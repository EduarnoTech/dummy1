{"ast":null,"code":"import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nvar flatRowTreeCreationMethod = function flatRowTreeCreationMethod(_ref) {\n  var ids = _ref.ids,\n      idRowsLookup = _ref.idRowsLookup,\n      idToIdLookup = _ref.idToIdLookup,\n      previousTree = _ref.previousTree;\n  var tree = {};\n\n  for (var i = 0; i < ids.length; i += 1) {\n    var rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree: tree,\n    treeDepth: 1,\n    idRowsLookup: idRowsLookup,\n    idToIdLookup: idToIdLookup,\n    ids: ids\n  };\n};\n\nexport var useGridRowsPreProcessors = function useGridRowsPreProcessors(apiRef) {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};","map":{"version":3,"names":["GRID_DEFAULT_STRATEGY","useGridRegisterStrategyProcessor","flatRowTreeCreationMethod","ids","idRowsLookup","idToIdLookup","previousTree","tree","i","length","rowId","id","depth","parent","groupingKey","groupingField","groupingName","treeDepth","useGridRowsPreProcessors","apiRef"],"sources":["C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsPreProcessors.js"],"sourcesContent":["import { GRID_DEFAULT_STRATEGY, useGridRegisterStrategyProcessor } from '../../core/strategyProcessing';\n\nconst flatRowTreeCreationMethod = ({\n  ids,\n  idRowsLookup,\n  idToIdLookup,\n  previousTree\n}) => {\n  const tree = {};\n\n  for (let i = 0; i < ids.length; i += 1) {\n    const rowId = ids[i];\n\n    if (previousTree && previousTree[rowId]) {\n      tree[rowId] = previousTree[rowId];\n    } else {\n      tree[rowId] = {\n        id: rowId,\n        depth: 0,\n        parent: null,\n        groupingKey: '',\n        groupingField: null\n      };\n    }\n  }\n\n  return {\n    groupingName: GRID_DEFAULT_STRATEGY,\n    tree,\n    treeDepth: 1,\n    idRowsLookup,\n    idToIdLookup,\n    ids\n  };\n};\n\nexport const useGridRowsPreProcessors = apiRef => {\n  useGridRegisterStrategyProcessor(apiRef, GRID_DEFAULT_STRATEGY, 'rowTreeCreation', flatRowTreeCreationMethod);\n};"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,gCAAhC,QAAwE,+BAAxE;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,OAK5B;EAAA,IAJJC,GAII,QAJJA,GAII;EAAA,IAHJC,YAGI,QAHJA,YAGI;EAAA,IAFJC,YAEI,QAFJA,YAEI;EAAA,IADJC,YACI,QADJA,YACI;EACJ,IAAMC,IAAI,GAAG,EAAb;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACM,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;IACtC,IAAME,KAAK,GAAGP,GAAG,CAACK,CAAD,CAAjB;;IAEA,IAAIF,YAAY,IAAIA,YAAY,CAACI,KAAD,CAAhC,EAAyC;MACvCH,IAAI,CAACG,KAAD,CAAJ,GAAcJ,YAAY,CAACI,KAAD,CAA1B;IACD,CAFD,MAEO;MACLH,IAAI,CAACG,KAAD,CAAJ,GAAc;QACZC,EAAE,EAAED,KADQ;QAEZE,KAAK,EAAE,CAFK;QAGZC,MAAM,EAAE,IAHI;QAIZC,WAAW,EAAE,EAJD;QAKZC,aAAa,EAAE;MALH,CAAd;IAOD;EACF;;EAED,OAAO;IACLC,YAAY,EAAEhB,qBADT;IAELO,IAAI,EAAJA,IAFK;IAGLU,SAAS,EAAE,CAHN;IAILb,YAAY,EAAZA,YAJK;IAKLC,YAAY,EAAZA,YALK;IAMLF,GAAG,EAAHA;EANK,CAAP;AAQD,CAhCD;;AAkCA,OAAO,IAAMe,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,MAAM,EAAI;EAChDlB,gCAAgC,CAACkB,MAAD,EAASnB,qBAAT,EAAgC,iBAAhC,EAAmDE,yBAAnD,CAAhC;AACD,CAFM"},"metadata":{},"sourceType":"module"}