[{"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\index.js":"1","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\reportWebVitals.js":"2","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\App.js":"3","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\pages\\messenger\\Messenger.jsx":"4","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\pages\\login\\Login.jsx":"5","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\Customer-Services.js":"6","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\StoreFiles-Service.js":"7","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\ApiHeaderKey.js":"8","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\Message-Services.js":"9","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\utils\\variables.js":"10","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\drag_dropFile\\DropFile.js":"11","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dropDown\\MoreMenu.js":"12","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\forwardConv\\ForwardMsg.jsx":"13","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\message\\Message.jsx":"14","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\conversations\\Conversation.jsx":"15","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\notes\\NoteHistory.jsx":"16","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\forms\\FormCreation.jsx":"17","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\tutorContacts\\TutorContact.jsx":"18","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\rightComponent\\RightSec.jsx":"19","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\paymentTab\\PaymentData.jsx":"20","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\Session.jsx":"21","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\Reason.jsx":"22","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\SessionList.jsx":"23","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\NotifiedTutors.jsx":"24","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\notes\\MoreMenu.jsx":"25","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\StickComments.jsx":"26","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\TutorRating&Reviews.jsx":"27"},{"size":517,"mtime":1654673485503,"results":"28","hashOfConfig":"29"},{"size":375,"mtime":1654673485503,"results":"30","hashOfConfig":"29"},{"size":1782,"mtime":1654750809486,"results":"31","hashOfConfig":"29"},{"size":65858,"mtime":1654673485503,"results":"32","hashOfConfig":"29"},{"size":18429,"mtime":1654778583849,"results":"33","hashOfConfig":"29"},{"size":155,"mtime":1654673485503,"results":"34","hashOfConfig":"29"},{"size":189,"mtime":1654673485503,"results":"35","hashOfConfig":"29"},{"size":684,"mtime":1654673485503,"results":"36","hashOfConfig":"29"},{"size":1474,"mtime":1654673485503,"results":"37","hashOfConfig":"29"},{"size":1040,"mtime":1654673485503,"results":"38","hashOfConfig":"29"},{"size":874,"mtime":1654673485487,"results":"39","hashOfConfig":"29"},{"size":2521,"mtime":1654673485487,"results":"40","hashOfConfig":"29"},{"size":14284,"mtime":1654673485487,"results":"41","hashOfConfig":"29"},{"size":16132,"mtime":1654673485487,"results":"42","hashOfConfig":"29"},{"size":16287,"mtime":1654673485486,"results":"43","hashOfConfig":"29"},{"size":9426,"mtime":1654673485487,"results":"44","hashOfConfig":"29"},{"size":9168,"mtime":1654673485487,"results":"45","hashOfConfig":"29"},{"size":32854,"mtime":1654673485503,"results":"46","hashOfConfig":"29"},{"size":14131,"mtime":1654673485487,"results":"47","hashOfConfig":"29"},{"size":2405,"mtime":1654673485487,"results":"48","hashOfConfig":"29"},{"size":37314,"mtime":1654673485487,"results":"49","hashOfConfig":"29"},{"size":2399,"mtime":1654673485487,"results":"50","hashOfConfig":"29"},{"size":153801,"mtime":1654673485487,"results":"51","hashOfConfig":"29"},{"size":83297,"mtime":1654673485487,"results":"52","hashOfConfig":"29"},{"size":2343,"mtime":1654673485487,"results":"53","hashOfConfig":"29"},{"size":1668,"mtime":1654673485487,"results":"54","hashOfConfig":"29"},{"size":10496,"mtime":1654673485487,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"wqkqk7",{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":77,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":2,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":146,"fixableErrorCount":0,"fixableWarningCount":2,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":59,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\index.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\reportWebVitals.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\App.js",["128","129"],"import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { useContext, useState } from \"react\";\r\nimport Messenger from \"./pages/messenger/Messenger\";\r\nimport Login from \"./pages/login/Login\";\r\n\r\nfunction App() {\r\n  const [userId, setUserId] = useState();\r\n  const [pass, setPass] = useState();\r\n  const [otp, setOtp] = useState();\r\n  const [agent, setAgent] = useState();\r\n  const [user, setUser] = useState(false);\r\n  const [apiUrl, setApiUrl] = useState();\r\n  const [apiKey, setApiKey] = useState();\r\n  let login = localStorage.getItem(\"user\");\r\n  let agent_ = localStorage.getItem(\"agent\");\r\n\r\n  if(Notification.permission !== 'denied') {\r\n    Notification.requestPermission().then(permission => {\r\n      console.log(permission)\r\n    })\r\n  }\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n         <Route exact path=\"/\">\r\n           {user || login ? <Messenger apiUrl={apiUrl} apiKey={apiKey} /> : <Login userId={userId} setUserId={setUserId} agent={agent} setAgent={setAgent} pass={pass} setPass={setPass} setUser={setUser} setApiUrl={setApiUrl} setApiKey={setApiKey} otp={otp} setOtp={setOtp}/>}\r\n         </Route>\r\n         <Route exact path=\"/login\">{user || login ? <Redirect to=\"/\" /> : <Login userId={userId} setUserId={setUserId} agent={agent} setAgent={setAgent} pass={pass} setPass={setPass} setUser={setUser} setApiUrl={setApiUrl} setApiKey={setApiKey} otp={otp} setOtp={setOtp}/>}</Route>\r\n         {/* <Route path=\"/\">{user || login ? <Redirect to={`/${agent_}`} /> : <Login userId={userId} setUserId={setUserId} agent={agent} setAgent={setAgent} pass={pass} setPass={setPass} setUser={setUser} setApiUrl={setApiUrl} setApiKey={setApiKey} />}</Route> */}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\pages\\messenger\\Messenger.jsx",["130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],"import React from 'react';\r\nimport './messenger.css';\r\nimport ReactLoading from 'react-loading';\r\nimport Conversation from '../../components/conversations/Conversation';\r\nimport Message from '../../components/message/Message';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\nimport {\r\n  msgUrl,\r\n  sendMsgUrl,\r\n  sendFileUrl,\r\n  templateMsgUrl,\r\n  sendtemplateMsgUrl,\r\n  addContactUrl,\r\n  addLabelUrl,\r\n  quickReplyUrl,\r\n  contactUrl,\r\n  addAgentUrl,\r\n} from '../../serviceUrls/Message-Services';\r\nimport { getCustomersUrl } from '../../serviceUrls/Customer-Services';\r\nimport ForwardMsg from '../../components/forwardConv/ForwardMsg';\r\nimport chatDemo from '../../assets/openChat2.png';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport SpeakerNotesIcon from '@material-ui/icons/SpeakerNotes';\r\nimport PersonAddAltOutlinedIcon from '@mui/icons-material/PersonAddAltOutlined';\r\nimport Stack from '@mui/material/Stack';\r\nimport Button from '@mui/material/Button';\r\nimport { storeFilesUrl } from '../../serviceUrls/StoreFiles-Service';\r\nimport { headerKey } from '../../serviceUrls/ApiHeaderKey';\r\nimport MoreMenu from '../../components/dropDown/MoreMenu';\r\nimport InfiniteScroll from 'react-infinite-scroll-component';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\nimport ReplayIcon from '@mui/icons-material/Replay';\r\nimport DropFile from '../../components/drag_dropFile/DropFile';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport TutorContact from '../../components/tutorContacts/TutorContact';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport RightSec from '../../components/rightComponent/RightSec';\r\nimport DynamicFormIcon from '@mui/icons-material/DynamicForm';\r\nimport FormCreation from '../../components/forms/FormCreation';\r\nimport AutorenewRoundedIcon from '@mui/icons-material/AutorenewRounded';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport NoteAddIcon from '@mui/icons-material/NoteAdd';\r\nimport ToggleOffIcon from '@mui/icons-material/ToggleOff';\r\nimport ToggleOnIcon from '@mui/icons-material/ToggleOn';\r\nimport NoteHistory from '../../components/notes/NoteHistory';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { NAME_SPACE } from '../../utils/variables';\r\n\r\nimport SpeedDial from '@mui/material/SpeedDial';\r\nimport SpeedDialIcon from '@mui/material/SpeedDialIcon';\r\nimport SpeedDialAction from '@mui/material/SpeedDialAction';\r\nimport FileCopyIcon from '@mui/icons-material/FileCopyOutlined';\r\nimport PrintIcon from '@mui/icons-material/Print';\r\nimport ShareIcon from '@mui/icons-material/Share';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport PriorityHighIcon from '@mui/icons-material/PriorityHigh';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nconst Messenger = ({ apiUrl, apiKey }) => {\r\n  const [conversations, setConversations] = useState([]);\r\n  const [currentChat, setCurrentChat] = useState(null);\r\n  const [msgResponse, setMsgResponse] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMsgRec, setNewMsgRec] = useState([]);\r\n  const [finalMessage, setFinalMessage] = useState([]);\r\n  const [textMsg, setTextMsg] = useState([]);\r\n  const [messageId, setMessageId] = useState(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [arrivalMessage, setArrivalMessage] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [forward, setForward] = useState({});\r\n  const [forwarded, setForwarded] = useState(false);\r\n  const socket = useRef();\r\n  const [userId, setUserId] = useState(null);\r\n  const [visible, setVisible] = useState();\r\n  const [search, setSearch] = useState('');\r\n  const [highlighted, setHighlighted] = useState(false);\r\n  const [sent, setSent] = useState(false);\r\n  const [alert, setAlert] = useState(0);\r\n  const [alertMsg, setAlertMsg] = useState([]);\r\n  const [myFiles, setMyFiles] = useState([]);\r\n  const [showFile, setShowFile] = useState();\r\n  const [file, setFile] = useState();\r\n  const [fileSent, setFileSent] = useState(0);\r\n  const [openTooltip, setOpenTooltip] = useState(false);\r\n  const [openTooltipForm, setOpenTooltipForm] = useState(false);\r\n  const [templateMessage, setTemplateMessage] = useState();\r\n  const [showTemplateMsg, setShowTemplateMsg] = useState(false);\r\n  const [caption, setCaption] = useState('');\r\n  const [saved, setSaved] = useState();\r\n  const [updated, setUpdated] = useState();\r\n  const [newNotification, setNewNotification] = useState();\r\n  const [addNewContact, setAddNewContact] = useState(false);\r\n  const [addName, setAddName] = useState();\r\n  const [addNumber, setAddNumber] = useState();\r\n  const [status, setStatus] = useState([]);\r\n  const [msgId, setMsgId] = useState();\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(20);\r\n  const [taglabel, setTaglabel] = useState();\r\n  const [tagUpdated, setTagUpdated] = useState();\r\n  const [msgCountUpdated, setMsgCountUpdated] = useState(false);\r\n  const [scrollView, setScrollView] = useState(true);\r\n  const [scrollView_, setScrollView_] = useState(true);\r\n  const [pinned, setPinned] = useState();\r\n  const [markChat, setMarkChat] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [showSelector, setShowSelector] = useState(false);\r\n  const [mulForward, setMulForward] = useState([]);\r\n  const [errMsg, setErrMsg] = useState();\r\n  const [scrollPosition, setScrollPosition] = useState();\r\n  const [forwardMsg, setForwardMsg] = useState();\r\n  const [msgLoad, setMsgLoad] = useState(false);\r\n  const [alertUpdate, setAlertUpdate] = useState();\r\n  const [quickReplyText, setQuickReplyText] = useState([]);\r\n  const [addingContact, setAddingContact] = useState(false);\r\n  const [confirmationText, setConfirmationText] = useState();\r\n  const [tutorList, setTutorList] = useState([]);\r\n  const [tutorTagUpdated, setTutorTagUpdated] = useState();\r\n  const [tutorRatingUpdated, setTutorRatingUpdated] = useState();\r\n  const [searchTutor, setSearchTutor] = useState('');\r\n  const [agentUpdated, setAgentUpdated] = useState();\r\n  const [agentlabel, setAgentlabel] = useState(localStorage.getItem('agent'));\r\n  const [agentStatus, setAgentStatus] = useState();\r\n  const [tutorCount, setTutorCount] = useState(0);\r\n  const [tutorPage, setTutorPage] = useState(1);\r\n  const [tutorListLoading, setTutorListLoading] = useState(false);\r\n  const [convCount, setConvCount] = useState(0);\r\n  const [contactPage, setContactPage] = useState(1);\r\n  const [contactListLoading, setContactListLoading] = useState(false);\r\n  const [searchContacts, setSearchContacts] = useState();\r\n  const [interestedTutors, setInterestedTutors] = useState();\r\n  const [newSessions, setNewSessions] = useState();\r\n  const [clientPayment, setClientPayment] = useState();\r\n  const [tutorPayout, setTutorPayout] = useState();\r\n  const scrollRef = useRef();\r\n  const listInnerRef = useRef();\r\n  const uniqueValuesSet = new Set();\r\n  const [chatLabels, setChatLabels] = useState();\r\n\r\n  const [loadingMsg, setLoadingMsg] = useState(false);\r\n\r\n  const snackBarPos = {\r\n    vertical: 'top',\r\n    horizontal: 'center'\r\n  }\r\n  const { vertical, horizontal } = snackBarPos;\r\n\r\n  const [alertText, setAlertText] = useState('')\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const handleCloseSnackBar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  const handleLoadMoreMsgClick = async () => {\r\n    setLoadingMsg(true);\r\n    try {\r\n      const res = await axios.get(\r\n        msgUrl + `/${currentChat?.wa_id}`,\r\n        {\r\n          params: {\r\n            page: page,\r\n            limit: limit,\r\n          },\r\n        },\r\n        {\r\n          headers: '',\r\n        }\r\n      );\r\n      if(res.data.length === 0) {\r\n        setOpenSnackBar(true);\r\n        setAlertText('No more messages');\r\n      }\r\n      else {\r\n        setMsgResponse(res.data);\r\n        // setMessages(() =>\r\n        //   res?.data?.messages?.items\r\n        //     .filter((f) => f.eventType === 'message')\r\n        //     .reverse()\r\n        // );\r\n        setMessages([...res?.data, ...messages]);\r\n        setLoadingMsg(false);\r\n        setPage(page + 1);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // for label\r\n  const handleLabelChange = async (e) => {\r\n    setTaglabel(e.target.value);\r\n    const payload = {\r\n      tags: e.target.value,\r\n    };\r\n    await axios.put(addLabelUrl + `/${currentChat?.wa_id}`, payload, {\r\n      headers: '',\r\n    });\r\n    setTagUpdated(payload.tags);\r\n  };\r\n\r\n  // agent assign\r\n  const handleAgentChange = async (e) => {\r\n    setAgentlabel(e.target.value);\r\n    const payload = {\r\n      agent: e.target.value,\r\n    };\r\n    await axios.put(addAgentUrl + `/${currentChat?.wa_id}`, payload, {\r\n      headers: '',\r\n    });\r\n    setAgentUpdated(payload.agent);\r\n  };\r\n\r\n  //desktop notification alert\r\n  const showNotification = () => {\r\n    const notification_ = new Notification('hey', {\r\n      body: 'A new message received',\r\n      icon: 'https://cdn2.iconfinder.com/data/icons/ios7-inspired-mac-icon-set/1024/messages_5122x.png',\r\n    });\r\n\r\n    notification_.onClick = (e) => {\r\n      window.location.href = 'http://google.com';\r\n    };\r\n  };\r\n\r\n  // connection with socket\r\n  useEffect(() => {\r\n    socket.current = io('/');\r\n    // socket.current.on('connection', () => {\r\n    //   console.log(\"Socket connected\");\r\n    // });\r\n    // socket.current.on('new_msg', (data) => {\r\n    //   setMsg((draft) => {\r\n    //     draft.res.push(data);\r\n    //   });\r\n    // });\r\n    let api = localStorage.getItem('api');\r\n    let device = localStorage.getItem('device');\r\n\r\n    socket.current.emit('user', {\r\n      api: api,\r\n      device: device,\r\n    });\r\n\r\n    let agent = localStorage.getItem('agent');\r\n\r\n    socket.current.emit('agent', agent);\r\n\r\n    socket.current.on('getAlert', (msg) => {\r\n      // storeFiles(msg); //store incoming files data to excel\r\n      setAlertMsg([msg]);\r\n      if (Notification.permission === 'granted' && msg?.contacts) {\r\n        showNotification();\r\n      }\r\n    });\r\n\r\n    // fetching msg from user through webhook\r\n\r\n    // socket.current.emit(\"addUser\", 'userId');\r\n    socket.current.on('getUsers', (msgs) => {\r\n      console.log(msgs, 'webhook');\r\n      let startInd = msgs.length > 19 ? msgs.length - 19 : 0;\r\n      setArrivalMessage(msgs.slice(startInd, msgs.length));\r\n      // let upcomingMsg = msgs?.filter((i) => i.contacts);\r\n      // let filteredMsg = msgs?.filter((i) => i.contacts && i?.contacts[0]?.wa_id == currentChat?.wa_id);\r\n    });\r\n    socket.current.on('save', (saved) => {\r\n      console.log(saved);\r\n      setSaved(saved);\r\n    });\r\n    socket.current.on('update', (update) => {\r\n      console.log('count', update);\r\n      setUpdated(update);\r\n    });\r\n    // socket.current.on('notification', (newNoti) => {\r\n    //   console.log(newNoti);\r\n    //   setNewNotification(newNoti);\r\n    // });\r\n    socket.current.on('statusChanged', (filtered) => {\r\n      console.log(filtered);\r\n      setStatus(() => filtered);\r\n      // setMsgId(id);\r\n    });\r\n\r\n    // razorpay notification\r\n    socket.current.on('rpayNoti', (payments) => {\r\n      console.log(payments, 'rpayWebhook');\r\n      setClientPayment(payments);\r\n    });\r\n\r\n    // razorpayX notification\r\n    socket.current.on('rpayXNoti', (payX) => {\r\n      console.log(payX, 'rpayXWebhook');\r\n      setTutorPayout(payX);\r\n    });\r\n\r\n    // interested tutor notification\r\n    socket.current.on('interestedTutors', (interestedTutor) => {\r\n      console.log(interestedTutor, 'interestedTutors');\r\n      setInterestedTutors(interestedTutor);\r\n    });\r\n\r\n    // new session notification\r\n    socket.current.on('newSession', (newSession) => {\r\n      console.log(newSession, 'newSessions');\r\n      setNewSessions(newSession);\r\n    });\r\n\r\n    //agent status fetch\r\n    const getAgentStatus = async () => {\r\n      try {\r\n        const res = await axios.get(`${localStorage.getItem('api')}/api/agent/getAgentStatus/${localStorage.getItem('agent')}`);\r\n        setAgentStatus(res.data.status);\r\n        setChatLabels(res.data.labels);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getAgentStatus();\r\n    // socket.current.on('getAlert', (msg) => {\r\n    //   console.log(msg);\r\n    //   setAlertMsg([msg]);\r\n    // });\r\n  }, []);\r\n\r\n  console.log(arrivalMessage);\r\n\r\n  useEffect(() => {\r\n    console.log(currentChat);\r\n    arrivalMessage[arrivalMessage.length - 1]?.contacts &&\r\n      setNewMsgRec(() =>\r\n        arrivalMessage?.filter(\r\n          (i) => i.contacts && i?.contacts[0]?.wa_id == currentChat?.wa_id\r\n        )\r\n      );\r\n  }, [arrivalMessage, currentChat]);\r\n  console.log(newMsgRec);\r\n\r\n   //fetching all messages of a particular selected user\r\n   useEffect(() => {\r\n    // setMsgLoad(true);\r\n    const getMessages = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          msgUrl + `/${currentChat?.wa_id}`,\r\n          {\r\n            params: {\r\n              page: 0,\r\n              limit: limit,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setMsgResponse(res.data);\r\n        // setMessages(() =>\r\n        //   res?.data?.messages?.items\r\n        //     .filter((f) => f.eventType === 'message')\r\n        //     .reverse()\r\n        // );\r\n        setMessages([...res?.data]);\r\n        setMsgLoad(false);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getMessages();\r\n    return () => {\r\n      setNewMsgRec([]);\r\n    };\r\n  }, [currentChat, forwarded, sent]);\r\n\r\n  //sending files\r\n  const handleFiles = (e) => {\r\n    let files = e;\r\n    setFile(e);\r\n    let fileData = [];\r\n    let reader = new FileReader();\r\n    let myfiles = files;\r\n    reader.readAsDataURL(myfiles);\r\n    reader.onload = (e) => {\r\n      let formData = { fileList: e.target.result };\r\n      console.log(formData);\r\n      setMyFiles([formData]);\r\n      // setFile(formData);\r\n    };\r\n\r\n    console.log(files);\r\n  };\r\n  console.log(myFiles);\r\n  console.log(file);\r\n\r\n  const closeFileModal = () => {\r\n    // show.current.style.display = 'none'\r\n    setMyFiles([]);\r\n    setFile(null);\r\n    setLoading(false);\r\n    setErrMsg('');\r\n    // setShowFile(false);\r\n  };\r\n\r\n  // // fetching msg from user through webhook\r\n  // useEffect(() => {\r\n  //   // socket.current.emit(\"addUser\", 'userId');\r\n  //   socket.current.on('getUsers', (msgs) => {\r\n  //     console.log(msgs);\r\n  //     setArrivalMessage(msgs);\r\n  //     // let upcomingMsg = msgs?.filter((i) => i.contacts);\r\n  //     let filteredMsg = msgs?.filter((i) => i.contacts && i?.contacts[0]?.wa_id == currentChat?.wa_id);\r\n  //     setNewMsgRec(filteredMsg.reverse());\r\n  //     console.log(currentChat);\r\n  //   });\r\n  //   // socket.current.on('getAlert', (msg) => {\r\n  //   //   console.log(msg);\r\n  //   //   setAlertMsg([msg]);\r\n  //   // });\r\n  // }, []);\r\n  console.log(newMsgRec);\r\n  console.log(currentChat);\r\n\r\n  // fetching contacts list\r\n  useEffect(() => {\r\n    let agent = localStorage.getItem('agent');\r\n    const getConversations = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.status);\r\n        // const filteredData = res?.data?.filter((i) => i.agent == agent);\r\n        // let pinnedChat = res?.data?.filter((el) => el.pinContact === true);\r\n        // let unPinnedChat = res?.data\r\n        //   ?.filter((el) => el.pinContact === false)\r\n        //   ?.sort((a, b) => {\r\n        //     return b.timestamp - a.timestamp;\r\n        //   });\r\n        setConversations(res?.data?.result);\r\n        setConvCount(res?.data?.length);\r\n        setSaved(null);\r\n        setUpdated(null);\r\n      } catch (err) {\r\n        console.log(err.Error);\r\n      }\r\n    };\r\n    getConversations();\r\n  }, [\r\n    // arrivalMessage,\r\n    saved,\r\n    updated,\r\n    tagUpdated,\r\n    agentUpdated,\r\n    pinned,\r\n    markChat,\r\n    alertUpdate,\r\n    sent,\r\n  ]);\r\n\r\n  console.log(conversations);\r\n\r\n  // //fetching tutors list\r\n  // useEffect(() => {\r\n  //   const getTutors = async () => {\r\n  //     try {\r\n  //       const res = await axios.get('${localStorage.getItem('api')}/api/tutor/getTutors',\r\n  //       {\r\n  //         params: {\r\n  //           page: 1,\r\n  //           limit: 10,\r\n  //         },\r\n  //       },\r\n  //       {\r\n  //         headers: '',\r\n  //       });\r\n  //       setTutorList(res.data.result);\r\n  //       setTutorCount(res.data.length);\r\n  //     } catch (err) {\r\n  //       console.log(err.Error);\r\n  //     }\r\n  //   }\r\n  //   getTutors();\r\n  // }, [tutorTagUpdated, tutorRatingUpdated])\r\n\r\n  useEffect(() => {\r\n    setFinalMessage([]);\r\n    setMsgLoad(true);\r\n    setPage(1);\r\n  }, [currentChat]);\r\n\r\n  console.log(forwarded);\r\n\r\n  console.log(messages);\r\n  console.log([...messages, ...newMsgRec]);\r\n  console.log(newMsgRec);\r\n\r\n  // var ur = [{n: [{id: '123'}]}, {n: [{id: '123'}]}, {id: '123'}, {n: [{id: '13'}]}];\r\n  function filteredArr(data, key) {\r\n    return [...new Map(data.map((x) => [key(x), x])).values()];\r\n  }\r\n  // filtering duplicate messages\r\n  useEffect(() => {\r\n    // let newArr = [...messages, ...newMsgRec];\r\n    let newArr = [...messages, ...newMsgRec];\r\n    // .filter(\r\n    //   (f) => f.eventType === 'message' || f.eventType === 'broadcastMessage'\r\n    // );\r\n    console.log('newArr', newArr);\r\n    setFinalMessage(() =>\r\n      filteredArr(newArr, (it) => (it.messages ? it.messages[0].id : it.id))\r\n    );\r\n  }, [messages, newMsgRec]);\r\n\r\n  //quick reply\r\n  const typeMsg = async (e) => {\r\n    if (e.target.value === '/') {\r\n      try {\r\n        const response = await axios.get(quickReplyUrl);\r\n        setQuickReplyText(response?.data);\r\n        // setQuickReplyText(quickReplies);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const filteredQuickReplyText =\r\n    newMessage.length > 0 && quickReplyText.length > 0\r\n      ? quickReplyText?.filter((f) => {\r\n          return (\r\n            f.shortcut.toLowerCase().indexOf(newMessage.toLowerCase()) !== -1\r\n          );\r\n        })\r\n      : null;\r\n\r\n  console.log(quickReplyText);\r\n\r\n  // sending messages\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      recipient_type: 'individual',\r\n      to: currentChat.wa_id,\r\n      conversationId: '',\r\n      name: currentChat.name,\r\n      from: currentChat.wa_id,\r\n      wa_id: currentChat.wa_id,\r\n      text: {\r\n        body: newMessage,\r\n      },\r\n      type: 'text',\r\n      data: '',\r\n      isOwner: true,\r\n    };\r\n    const timeStamp = {\r\n      timestamp: Math.floor(new Date().getTime() / 1000.0),\r\n    };\r\n    if (newMessage) {\r\n      try {\r\n        setNewMessage('');\r\n        const res = await axios.post(sendMsgUrl, payload, {\r\n          headers: { ...headerKey },\r\n        });\r\n        //setMessages([...messages, res.data.message]);\r\n        // setFinalMessage([...finalMessage, res?.data]);\r\n        console.log('sendm', res);\r\n        await axios.put(`${contactUrl}/${currentChat?.wa_id}`, timeStamp, {\r\n          headers: { 'Content-Type': 'application/json' },\r\n        });\r\n        setTimeout(() => {\r\n          console.log('This will run after 1 second!');\r\n          setSent(!sent);\r\n        }, 0);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  console.log('fmsg', finalMessage);\r\n\r\n  // sending files\r\n  const handleFileSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setErrMsg('');\r\n    setLoading(true);\r\n    console.log(file.name);\r\n    try {\r\n      const res_ = await axios.post(\r\n        'https://waba.360dialog.io/v1/media',\r\n        file,\r\n        {\r\n          headers: {\r\n            'Content-Type':\r\n              file.type == 'application/x-zip-compressed'\r\n                ? 'application/zip'\r\n                : file.type,\r\n            'D360-API-KEY': apiKey || localStorage.getItem('api_key'),\r\n          },\r\n        }\r\n      );\r\n      const payload = {\r\n        recipient_type: 'individual',\r\n        to: currentChat.wa_id,\r\n        type: file.type.includes('image/')\r\n          ? 'image'\r\n          : file.type.includes('video/')\r\n          ? 'video'\r\n          : file.type.includes('audio/')\r\n          ? 'audio'\r\n          : 'document',\r\n        data: {\r\n          id: res_.data.media[0].id,\r\n          caption: caption,\r\n          filename: file.name,\r\n        },\r\n        name: '',\r\n        from: '',\r\n        wa_id: currentChat.wa_id,\r\n        timestamp: '',\r\n        operatorName: '',\r\n        isOwner: true,\r\n        status: '',\r\n        ticketId: '',\r\n        eventType: '',\r\n      };\r\n      const res = await axios.post(sendFileUrl, payload, {\r\n        headers: { ...headerKey },\r\n      });\r\n      //setMessages([...messages, res.data.message]);\r\n      // setFinalMessage([...finalMessage, res.data.message]);\r\n      console.log(res);\r\n      // setUserId(currentChat?.wAid);\r\n      // setMessageId(res.data.message.whatsappMessageId);\r\n      setNewMessage('');\r\n      // setInterval(() => {\r\n      //   console.log('This will run every second!');\r\n      // }, 2000);\r\n      setTimeout(() => {\r\n        console.log('This will run after 0.5 second!');\r\n        setSent(!sent);\r\n        setFileSent(+fileSent + 1);\r\n      }, 500);\r\n      setMyFiles([]);\r\n      setLoading(false);\r\n      setCaption('');\r\n    } catch (err) {\r\n      setLoading(false);\r\n      setErrMsg('Something went wrong!');\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // fetching template messages\r\n  // const getTemplateMsg = async () => {\r\n  //   try {\r\n  //     const res = await axios.get(templateMsgUrl, {\r\n  //       headers: { ...headerKey },\r\n  //     });\r\n  //     console.log({templateMsg:res.data.waba_templates});\r\n  //     setTemplateMessage(res.data.waba_templates);\r\n  //     setShowTemplateMsg(true);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n  console.log(showTemplateMsg);\r\n\r\n  const closeTemplateTab = () => {\r\n    setShowTemplateMsg(false);\r\n  };\r\n\r\n  // // send template message\r\n  // const handleSendTemplate = async (val) => {\r\n  //   const payload = {\r\n  //     name: currentChat.name,\r\n  //     from: '',\r\n  //     wa_id: currentChat.wa_id,\r\n  //     templateName: val?.name,\r\n  //     templateText: val?.components?.filter((j) => j?.type === 'BODY')[0]?.text,\r\n  //     template: {\r\n  //       namespace: val.namespace,\r\n  //       language: val.language,\r\n  //     },\r\n  //     button: '',\r\n  //     timestamp: '',\r\n  //     operatorName: '',\r\n  //     isOwner: true,\r\n  //     status: '',\r\n  //     ticketId: '',\r\n  //     eventType: 'template',\r\n  //   };\r\n  //   try {\r\n  //     const res = await axios.post(sendtemplateMsgUrl, payload, {\r\n  //       headers: { ...headerKey },\r\n  //     });\r\n  //     console.log(res);\r\n  //     setTimeout(() => {\r\n  //       console.log('This will run after 1 second!');\r\n  //       setSent(!sent);\r\n  //     }, 100);\r\n  //     setShowTemplateMsg(false);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n   // send template message\r\n   const handleSendTemplate = async () => {\r\n    const payload = {\r\n      name: currentChat.name,\r\n      from: '',\r\n      wa_id: currentChat.wa_id,\r\n      templateName: \"conversation_initiate\",\r\n      templateText: `Hi ${currentChat.name}, This is Tutorpoint.We want to start a conversation with you. Please reply as soon as you see this message.`,\r\n      template: {\r\n        namespace: NAME_SPACE,\r\n        language: \"en\",\r\n      },\r\n      button: '',\r\n      timestamp: '',\r\n      operatorName: '',\r\n      isOwner: true,\r\n      status: '',\r\n      ticketId: '',\r\n      eventType: 'template',\r\n    };\r\n    try {\r\n      const res = await axios.post(sendtemplateMsgUrl, payload, {\r\n        headers: { ...headerKey },\r\n      });\r\n      console.log(res);\r\n      setTimeout(() => {\r\n        console.log('This will run after 1 second!');\r\n        setSent(!sent);\r\n      }, 100);\r\n      setShowTemplateMsg(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // adding note b/w messages\r\n  const handleSendNote = async (val) => {\r\n    const payload = {\r\n      name: currentChat.name,\r\n      from: '',\r\n      wa_id: currentChat.wa_id,\r\n      clientNotes: {\r\n        noteText: newMessage,\r\n        priority: val\r\n      },\r\n      button: '',\r\n      timestamp: '',\r\n      operatorName: '',\r\n      isOwner: true,\r\n      status: '',\r\n      ticketId: '',\r\n      eventType: 'note',\r\n    };\r\n    try {\r\n      const res = await axios.post(`${localStorage.getItem('api')}/api/messages/addChatNote`, payload, {\r\n        headers: { ...headerKey },\r\n      });\r\n      console.log(res);\r\n      setNewMessage('');\r\n      setTimeout(() => {\r\n        console.log('This will run after 1 second!');\r\n        setSent(!sent);\r\n      }, 100);\r\n      // setShowTemplateMsg(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  //Add contact\r\n  const addContact = async () => {\r\n    setAddingContact(true);\r\n    const payload = {\r\n      name: addName,\r\n      wa_id: `+${addNumber}`,\r\n    };\r\n    try {\r\n      const res = await axios.post(addContactUrl, payload, {\r\n        headers: {},\r\n      });\r\n      setConversations([...conversations, res.data]);\r\n      setAddNewContact(false);\r\n      setAddName('');\r\n      setAddNumber('');\r\n      setAddingContact(false);\r\n    } catch (err) {\r\n      setConfirmationText('Failed to add this contact!');\r\n      setAddingContact(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (scrollView_ && scrollView || finalMessage.length <= 20) {\r\n      scrollRef.current?.scrollIntoView();\r\n    }\r\n  }, [finalMessage, fileSent, currentChat]);\r\n\r\n  const handleSearch = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const filteredCoversation = conversations;\r\n\r\n  // filtered tutor list\r\n  // const filteredTutorList = tutorList?.filter((f) => {\r\n  //   let subject = f?.subjects?.find(element => element?.toLowerCase() == searchTutor?.toLowerCase());\r\n  //   let tag = f?.tags?.find(element => element?.toLowerCase() == searchTutor?.toLowerCase());\r\n  //   return (\r\n  //     f.name.toLowerCase().indexOf(searchTutor.toLowerCase()) !== -1 ||\r\n  //     f.wa_id.toLowerCase().indexOf(searchTutor.toLowerCase()) !== -1 ||\r\n  //     f?.subjects?.toString().toLowerCase().indexOf(searchTutor.toLowerCase()) !== -1 ||\r\n  //     f?.tags?.toString().toLowerCase().indexOf(searchTutor.toLowerCase()) !== -1\r\n  //   );\r\n  // });\r\n\r\n  console.log(currentChat);\r\n  const handleCloseTooltip = () => {\r\n    setOpenTooltip(false);\r\n  };\r\n\r\n  const handleOpenTooltip = () => {\r\n    setOpenTooltip(true);\r\n  };\r\n\r\n  const handleCloseTooltipForm = () => {\r\n    setOpenTooltipForm(false);\r\n  };\r\n\r\n  const handleOpenTooltipForm = () => {\r\n    setOpenTooltipForm(true);\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key == 'Enter' && e.shiftKey) {\r\n      handleSubmit(e);\r\n    }\r\n  };\r\n\r\n  const fetchMoreData = async (e) => {\r\n    // console.log(e.target.scrollHeight - e.target.scrollTop - e.target.clientHeight)\r\n    setScrollPosition(e.target.scrollTop);\r\n    const bottom = e.target.scrollTop;\r\n    if (bottom === 0) {\r\n      // TO SOMETHING HERE\r\n      console.log('Reached bottom');\r\n      // setPage(page + 1);\r\n      // try {\r\n      //   const res = await axios.get(\r\n      //     msgUrl + `/${currentChat?.wa_id}`,\r\n      //     {\r\n      //       params: {\r\n      //         page: page,\r\n      //         limit: limit,\r\n      //       },\r\n      //     },\r\n      //     {\r\n      //       headers: '',\r\n      //     }\r\n      //   );\r\n      //   console.log(res.data);\r\n      //   setMsgResponse(res.data);\r\n      //   // setMessages(() =>\r\n      //   //   res?.data?.messages?.items\r\n      //   //     .filter((f) => f.eventType === 'message')\r\n      //   //     .reverse()\r\n      //   // );\r\n      //   setMessages([...res?.data, ...messages]);\r\n      // } catch (err) {\r\n      //   console.log(err);\r\n      //  }\r\n    } else if (\r\n      e.target.scrollHeight - e.target.scrollTop - e.target.clientHeight <\r\n      260\r\n    ) {\r\n      setScrollView(true);\r\n    } else if (\r\n      e.target.scrollHeight - e.target.scrollTop - e.target.clientHeight >=\r\n      260\r\n    ) {\r\n      setScrollView(false);\r\n    }\r\n  };\r\n\r\n  // const handleTutorList = async (event, value) => {\r\n  //   setTutorListLoading(true);\r\n  //   setTutorPage(value);\r\n  //   try {\r\n  //     const res = await axios.get('${localStorage.getItem('api')}/api/tutor/getTutors',\r\n  //       {\r\n  //         params: {\r\n  //           page: value,\r\n  //           limit: 10,\r\n  //         },\r\n  //       },\r\n  //       {\r\n  //         headers: '',\r\n  //       }\r\n  //     );\r\n  //     console.log(res.data);\r\n  //     setTutorList(res.data.result);\r\n  //     setTutorListLoading(false);\r\n  //     // setLoadingMsg(false);\r\n  //     // setPage(page + 1);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n  // const handleSearchTutors = async (e) => {\r\n  //   // setSearchTutor(e.target.value);\r\n  //   if (e.key == 'Enter') {\r\n  //     try {\r\n  //       const res = await axios.get(`${localStorage.getItem('api')}/api/tutor/getTutors/${e.target.value}`,\r\n  //         {\r\n  //           params: {\r\n  //             page: 1,\r\n  //             limit: 10,\r\n  //           },\r\n  //         },\r\n  //         {\r\n  //           headers: '',\r\n  //         }\r\n  //       );\r\n  //       console.log(res.data);\r\n  //       setTutorList(res.data.result);\r\n  //       setTutorCount(res.data.length);\r\n  //       // setTutorListLoading(false);\r\n  //       // setLoadingMsg(false);\r\n  //       // setPage(page + 1);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   }\r\n  // };\r\n\r\n  const handleContactList = async (event, value) => {\r\n    let agent = localStorage.getItem('agent');\r\n    if (searchContacts) {\r\n      setContactListLoading(true);\r\n      setContactPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}/${searchContacts}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setConversations(res?.data?.result);\r\n        setContactListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n\r\n        setSaved(null);\r\n        setUpdated(null);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setContactListLoading(true);\r\n      setContactPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setConversations(res?.data?.result);\r\n        setContactListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n\r\n        setSaved(null);\r\n        setUpdated(null);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchContacts = async (e) => {\r\n    let agent = localStorage.getItem('agent');\r\n    setSearchContacts(e.target.value);\r\n    if (e.key == 'Enter') {\r\n      setContactListLoading(true);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}/${e.target.value}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setContactListLoading(false);\r\n        setConversations(res?.data?.result);\r\n        setConvCount(res?.data?.length);\r\n        setContactPage(1);\r\n        // setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleContactValidate = async () => {\r\n    let payload = {\r\n      wa_id: `+${currentChat?.wa_id}`,\r\n    }\r\n    try {\r\n      const res = await axios.post(`${localStorage.getItem('api')}/api/conversations/contactValidation`, payload);\r\n      setOpenSnackBar(true);\r\n      setAlertText(res.data.contacts[0].status + ' contact');\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleAgentStatus = async (status) => {\r\n    let payload = {\r\n      status: status\r\n    }\r\n    try {\r\n      const res = await axios.put(`${localStorage.getItem('api')}/api/agent/updateAgentStatus/${localStorage.getItem('agent')}`, payload);\r\n      window.location.reload();\r\n    }\r\n    catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const logOutFunc = () => {\r\n    localStorage.clear();\r\n    window.location.reload();\r\n  };\r\n\r\n  const actions = [\r\n    { icon: <PriorityHighIcon color='success' onClick={() => handleSendNote('low')} />, name: 'Low priority' },\r\n    { icon: <PriorityHighIcon color='primary' onClick={() => handleSendNote('medium')} />, name: 'Medium priority' },\r\n    { icon: <PriorityHighIcon color='error' onClick={() => handleSendNote('high')} />, name: 'High priority' },\r\n  ];\r\n\r\n  let deviceNo = localStorage.getItem('device');\r\n  let agentName = localStorage.getItem('agent');\r\n\r\n  // agent field update in all contacts\r\n  // const [convag, setConvag] = useState([]);\r\n  // useEffect(() => {\r\n  //   const getAgg = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(\r\n  //         '${localStorage.getItem('api')}/api/conversations3/getContacts',\r\n  //         {\r\n  //           headers: '',\r\n  //         }\r\n  //       );\r\n  //       setConvag(res?.data)\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getAgg();\r\n\r\n  // }, [])\r\n\r\n  // const agentUpdate = async () => {\r\n  //   let count = '200100';\r\n  //   for(let i = 0; i<convag.length; i++){\r\n  //     let pay = {\r\n  //       uid: count\r\n  //     }\r\n  //     await axios.put(`${localStorage.getItem('api')}/api/conversations3/customer/${convag[i].wa_id}`, pay);\r\n  //     count = +count + 1;\r\n  // }\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div className='messenger'>\r\n        <div className='chatMenu'>\r\n          <header className='chat_header'>\r\n            <img\r\n              className='profilePic'\r\n              src='/assets/person/noAvatar.png'\r\n              alt=''\r\n            />\r\n            <div\r\n              style={{\r\n                flex: '1',\r\n                fontSize: '16px',\r\n                fontWeight: '600',\r\n                height: '22px',\r\n                lineHeight: '4px',\r\n              }}\r\n              // onClick={agentUpdate}\r\n            >\r\n              Device-{deviceNo}{' '}\r\n              {deviceNo == 1\r\n                ? '(7761093194)'\r\n                : deviceNo == 2\r\n                ? '(7091489698)'\r\n                : deviceNo == 3\r\n                ? '(7761814102)'\r\n                : deviceNo == 4\r\n                ? '(8777592248)'\r\n                : deviceNo == 5\r\n                ? '(9065650479)'\r\n                : null}\r\n              <p style={{ color: '#585858' }}>{agentName}</p>\r\n            </div>\r\n            {localStorage.getItem('agent') != 'Admin' && agentStatus == 'inactive' ? <ToggleOffIcon\r\n              style={{\r\n                fontSize: '32px',\r\n                color: '#50585C',\r\n                cursor: 'pointer',\r\n                marginRight: '10px',\r\n              }}\r\n              onClick={() => handleAgentStatus('active')}\r\n            /> : localStorage.getItem('agent') != 'Admin' && agentStatus == 'active' ?\r\n            <ToggleOnIcon\r\n              style={{\r\n                fontSize: '32px',\r\n                color: '#00EC64',\r\n                cursor: 'pointer',\r\n                marginRight: '10px',\r\n              }}\r\n              onClick={() => handleAgentStatus('inactive')}\r\n            /> : null}\r\n            <div\r\n              style={{\r\n              marginRight: '10px',\r\n            }}\r\n            >\r\n              <NoteHistory setCurrentChat = {setCurrentChat} setFinalMessage = {setMessages} scrollRef={scrollRef} setScrollView_={setScrollView_} setPage = {setPage} />\r\n            </div>\r\n            <PersonAddAltOutlinedIcon\r\n              style={{\r\n                fontSize: '32px',\r\n                color: addNewContact ? '#337DDD' : '#50585C',\r\n                cursor: 'pointer',\r\n                marginRight: '10px',\r\n              }}\r\n              onClick={() => setAddNewContact(true)}\r\n            />\r\n            {/* <MoreVertIcon\r\n              style={{\r\n                fontSize: '25px',\r\n                color: '#50585C',\r\n                cursor: 'pointer',\r\n                marginRight: '-10px',\r\n              }}\r\n            /> */}\r\n            <LogoutIcon\r\n              style={{ cursor: 'pointer', marginLeft: '5px' }}\r\n              onClick={logOutFunc}\r\n            />\r\n          </header>\r\n          <div\r\n            style={{\r\n              height: '2.3rem',\r\n              padding: '6px 0px 6px 17px',\r\n              backgroundColor: '#9DE1FE',\r\n            }}\r\n          >\r\n            <input\r\n              placeholder='Search for users'\r\n              className='chatMenuInput'\r\n              onChange={(e) => handleSearch(e)}\r\n              onKeyPress={handleSearchContacts}\r\n            />\r\n          </div>\r\n          {addNewContact && (\r\n            <div\r\n              style={{\r\n                height: '8.4rem',\r\n                padding: '20px 0px 20px 17px',\r\n                backgroundColor: '#fff',\r\n                border: '1px solid #b3b0b0',\r\n                borderRadius: '3px',\r\n              }}\r\n            >\r\n              <input\r\n                type='text'\r\n                className='addContactInput'\r\n                placeholder='Name'\r\n                value={addName}\r\n                onChange={(e) => setAddName(e.target.value)}\r\n                required\r\n              />\r\n              <input\r\n                type='number'\r\n                className='addContactInput'\r\n                placeholder='WhatsApp Number (with country code)*'\r\n                value={addNumber}\r\n                onChange={(e) => setAddNumber(e.target.value)}\r\n                required\r\n              />\r\n              <Stack direction='row' spacing={2}>\r\n                {addName && addNumber && !addingContact ? (\r\n                  <Button\r\n                    size='small'\r\n                    variant='contained'\r\n                    color='error'\r\n                    onClick={() => addContact()}\r\n                  >\r\n                    save\r\n                  </Button>\r\n                ) : addingContact ? (\r\n                  <LoadingButton\r\n                    size='small'\r\n                    loading\r\n                    loadingPosition='start'\r\n                    startIcon={<SaveIcon />}\r\n                    variant='contained'\r\n                  >\r\n                    Save\r\n                  </LoadingButton>\r\n                ) : (\r\n                  <Button\r\n                    size='small'\r\n                    variant='contained'\r\n                    color='error'\r\n                    disabled\r\n                  >\r\n                    save\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  size='small'\r\n                  variant='outlined'\r\n                  color='error'\r\n                  onClick={() => {\r\n                    setAddNewContact(false);\r\n                    setAddingContact(false);\r\n                    setConfirmationText('');\r\n                  }}\r\n                >\r\n                  close\r\n                </Button>\r\n                <div\r\n                  style={{\r\n                    alignSelf: 'center',\r\n                    color: 'red',\r\n                    fontSize: '13px',\r\n                  }}\r\n                >\r\n                  {confirmationText}\r\n                </div>\r\n              </Stack>\r\n            </div>\r\n          )}\r\n          {contactListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <div className='chatMenuWrapper'>\r\n              {filteredCoversation?.map((c) => (\r\n                <div\r\n                  onClick={() => {\r\n                    setCurrentChat(c);\r\n                    setHighlighted(true);\r\n                    setShowTemplateMsg(false);\r\n                    setTaglabel('');\r\n                    setTagUpdated('');\r\n                  }}\r\n                >\r\n                  <Conversation\r\n                    conversation={c}\r\n                    currentChat={currentChat}\r\n                    finalMessage={finalMessage}\r\n                    alertMsg={alertMsg}\r\n                    arrivalMessage={arrivalMessage}\r\n                    alert={alert}\r\n                    // newNotification={newNotification}\r\n                    setAlert={setAlert}\r\n                    msgCountUpdated={msgCountUpdated}\r\n                    setMsgCountUpdated={setMsgCountUpdated}\r\n                    setPinned={setPinned}\r\n                    setMarkChat={setMarkChat}\r\n                    setAlertUpdate={setAlertUpdate}\r\n                    apiUrl={apiUrl}\r\n                  />\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  marginTop: '15px',\r\n                }}\r\n                count={Math.ceil(convCount / 20)}\r\n                page={contactPage}\r\n                onChange={handleContactList}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className='chatBox'>\r\n          <div className='chatBoxWrapper'>\r\n            {currentChat ? (\r\n              <>\r\n                <header className='currentChatHeader'>\r\n                  <img\r\n                    className='profilePic'\r\n                    src='/assets/person/noAvatar.png'\r\n                    alt=''\r\n                  />\r\n                  <div>\r\n                    {`${currentChat?.name}${currentChat?.wa_id.slice(\r\n                    0,\r\n                    3\r\n                  )}`}\r\n                  </div>\r\n                  <div style={{marginLeft: \"5px\", cursor: 'pointer'}}>\r\n                    <AutorenewRoundedIcon fontSize='small' onClick={handleContactValidate} />\r\n                    <Snackbar open={openSnackBar} autoHideDuration={2000} onClose={handleCloseSnackBar} anchorOrigin={{ vertical, horizontal }} key={vertical + horizontal}>\r\n                      <Alert onClose={handleCloseSnackBar} severity=\"info\" sx={{ width: '100%' }}>\r\n                        {alertText}\r\n                      </Alert>\r\n                    </Snackbar>\r\n                  </div>\r\n                  <div className='select-list'>\r\n                    <select\r\n                      name='taglabel'\r\n                      id='taglabel'\r\n                      value={taglabel}\r\n                      onChange={handleLabelChange}\r\n                    >\r\n                      <option selected value=''>\r\n                        Labels\r\n                      </option>\r\n                      {chatLabels?.map((l) => <option value={l}>{l}</option>)}\r\n                      {/* <option value='Old Client'>Old Client</option>\r\n                      <option value='New Client'>New Client</option>\r\n                      <option value='High Price Client'>High Price Client</option>\r\n                      <option value='Low Price Client'>Low Price Client</option>\r\n                      <option value='Call'>Call</option>\r\n                      <option value='Tutor'>Tutor</option>\r\n                      <option value='Full Course'>Full Course</option> */}\r\n                       {/*<option value='Tutor pay pending'>\r\n                        Tutor pay pending\r\n                      </option>\r\n                      <option value='Client payment pending'>\r\n                        Client payment pending\r\n                      </option>\r\n                      <option value='Session today'>Session today</option>\r\n                      <option value='Session tomorrow'>Session tomorrow</option>\r\n                      <option value='Assignment pending'>\r\n                        Assignment pending\r\n                      </option>\r\n                      <option value='Tutors notified'>Tutors notified</option>\r\n                      <option value='Tutor is working'>Tutor is working</option>\r\n                      <option value='Take payment'>Take payment</option>\r\n                      <option value='Pay tutor'>Pay tutor</option>\r\n                      <option value='More work available'>\r\n                        More work available\r\n                      </option>\r\n                      <option value='Not available tomorrow'>\r\n                        Not available tomorrow\r\n                      </option> */}\r\n                    </select>\r\n                    {/* {taglabel === 'other' ? (\r\n                  <input\r\n                    type='text'\r\n                    name='other_degree'\r\n                    style={{marginLeft: '20px', width: '70px'}}\r\n                    placeholder='tag name'\r\n                    // value={other_degree}\r\n                    // onChange={handleOther}\r\n                    // autoComplete='none'\r\n                    // required\r\n                  />\r\n                ) : null} */}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: '14px',\r\n                      fontWeight: '600',\r\n                    }}\r\n                  >\r\n                    Label: {currentChat.tags || taglabel || '--'}\r\n                  </div>\r\n                  {/* <div style={{ display: 'flex', marginLeft: '460px' }}>\r\n                    <MoreVertIcon style={{ alignSelf: 'center' }} />\r\n                  </div> */}\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      flex: '10%',\r\n                      justifyContent: 'flex-end',\r\n                      marginRight: '15px',\r\n                    }}\r\n                  >\r\n                    <div>Assign to:</div>\r\n                    <div className='select-list'>\r\n                      <select\r\n                        name='agentlabel'\r\n                        id='agentlabel'\r\n                        value={agentlabel}\r\n                        className='select-list2'\r\n                        onChange={handleAgentChange}\r\n                      >\r\n                        <option value='Admin'>Admin</option>\r\n                        <option value='Chaitanya'>Chaitanya</option>\r\n                        <option value='Nityananda'>Nityananda</option>\r\n                        <option value='Advaita'>Advaita</option>\r\n                        <option value='Abhay'>Abhay</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                </header>\r\n                {finalMessage?.length == 0 || msgLoad ? (\r\n                  <div className='chatBoxTop'>\r\n                    <ReactLoading\r\n                      type='spinningBubbles'\r\n                      color='#2ca6d6'\r\n                      className='loadingIcon'\r\n                    />\r\n                    <div className='no_message'>\r\n                      {finalMessage?.length == 0 && (\r\n                        <p className='no_messageText'>\r\n                          You have not started conversation with this person!\r\n                        </p>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <>\r\n                    <div\r\n                      className='chatBoxTop'\r\n                      // style={{display: 'flex', flexDirection: 'column-reverse'}}\r\n                      onScroll={fetchMoreData}\r\n                      ref={listInnerRef}\r\n                    >\r\n                      {finalMessage.length > 0 && (\r\n                        <div\r\n                          style={{\r\n                            textAlign: 'center',\r\n                            textAlign: '-webkit-center',\r\n                          }}\r\n                        >\r\n                          {/* <LoadingButton\r\n                            onClick={handleLoadMoreMsgClick}\r\n                            endIcon={<ReplayIcon />}\r\n                            loading={loadingMsg}\r\n                            loadingPosition='end'\r\n                            variant='outlined'\r\n                          >\r\n                            Load more\r\n                          </LoadingButton> */}\r\n                          <IconButton><ReplayIcon onClick={handleLoadMoreMsgClick} /></IconButton>\r\n                        </div>\r\n                      )}\r\n                      {finalMessage.map((m, i, j) => (\r\n                        <div ref={scrollRef} key={i}>\r\n                          <Message\r\n                            message={m}\r\n                            msgArr={j}\r\n                            own={m.owner}\r\n                            ownAlt={m.isOwner}\r\n                            setForward={setForward}\r\n                            mulForward={mulForward}\r\n                            setMulForward={setMulForward}\r\n                            setVisible={setVisible}\r\n                            setShowSelector={setShowSelector}\r\n                            showSelector={showSelector}\r\n                            apiUrl={apiUrl}\r\n                            status={status}\r\n                            msgId={msgId}\r\n                          />\r\n                        </div>\r\n                      ))}\r\n\r\n                      {visible && (\r\n                        <div>\r\n                          <ForwardMsg\r\n                            conversations={conversations}\r\n                            visible={visible}\r\n                            setVisible={setVisible}\r\n                            forward={forward}\r\n                            forwarded={forwarded}\r\n                            setForwarded={setForwarded}\r\n                            mulForward={mulForward}\r\n                            setMulForward={setMulForward}\r\n                            setForwardMsg={setForwardMsg}\r\n                            apiKey={apiKey}\r\n                            convCount={convCount}\r\n                            contactPage={contactPage}\r\n                            handleContactList={handleContactList}\r\n                            contactListLoading={contactListLoading}\r\n                            getCustomersUrl={getCustomersUrl}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n                {myFiles.length > 0 && file ? (\r\n                  <div id='id01' className='modal_'>\r\n                    <form className='modal-content_'>\r\n                      <header\r\n                        style={{\r\n                          height: '148px',\r\n                          backgroundColor: '#0B1929',\r\n                          position: 'absolute',\r\n                          width: '450px',\r\n                          borderRadius: '5px',\r\n                          padding: '12px 12px 0px 12px',\r\n                        }}\r\n                      >\r\n                        <CloseIcon\r\n                          fontSize='medium'\r\n                          style={{\r\n                            color: '#f2efef',\r\n                            margin: '12px 10px -5px 10px',\r\n                            cursor: 'pointer',\r\n                          }}\r\n                          onClick={closeFileModal}\r\n                        />\r\n                        <span\r\n                          style={{\r\n                            fontSize: '18px',\r\n                            margin: '0px 0px 0px 10px',\r\n                            fontWeight: '400',\r\n                            color: '#ffff',\r\n                          }}\r\n                        >\r\n                          Send the file\r\n                        </span>\r\n                        {/* <iframe src={myFiles[0].fileList} height=\"200\" width=\"300\" title=\"description\"></iframe> */}\r\n                        <div\r\n                          style={{ padding: '15px', color: 'rgb(219 218 218)' }}\r\n                        >\r\n                          {file?.name}\r\n                        </div>\r\n                        <input\r\n                          className='chatMessageInput'\r\n                          placeholder='Add a caption...'\r\n                          value={caption}\r\n                          onChange={(e) => setCaption(e.target.value)}\r\n                        />\r\n                        <SendIcon\r\n                          style={{\r\n                            color: '#ffff',\r\n                            cursor: 'pointer',\r\n                            float: 'right',\r\n                            padding: '5px 10px',\r\n                            fontSize: '30px',\r\n                          }}\r\n                          onClick={handleFileSubmit}\r\n                        />\r\n                        {loading && (\r\n                          <div style={{ paddingTop: '10px' }}>\r\n                            <LinearProgress />\r\n                          </div>\r\n                        )}\r\n                        {errMsg && <div className='errMsgText'>{errMsg}</div>}\r\n                      </header>\r\n                    </form>\r\n                  </div>\r\n                ) : null}\r\n                <footer className='chatBoxBottom'>\r\n\r\n                  {/* show templates */}\r\n                  {/* <div\r\n                    style={{\r\n                      width: '-webkit-fill-available',\r\n                      // overflowY: 'scroll',\r\n                      // overflowX: 'hidden',\r\n                      maxHeight: '199px',\r\n                    }}\r\n                  >\r\n                    {showTemplateMsg ? (\r\n                      <div>\r\n                        <header\r\n                          style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            backgroundColor: '#ffff',\r\n                            height: '3rem',\r\n                            borderBottom: '1px solid #f0f0f0',\r\n                          }}\r\n                        >\r\n                          <CloseIcon\r\n                            fontSize='medium'\r\n                            style={{\r\n                              color: 'gray',\r\n                              margin: '12px 16px 0px',\r\n                              cursor: 'pointer',\r\n                            }}\r\n                            onClick={closeTemplateTab}\r\n                          />\r\n                          <div\r\n                            style={{ display: 'flex', alignItems: 'center' }}\r\n                          >\r\n                            Choose Template\r\n                          </div>\r\n                        </header>\r\n                        <div\r\n                          style={{\r\n                            height: '150px',\r\n                            zIndex: '1',\r\n                            // marginBottom: '-46px',\r\n                            backgroundColor: '#ffff',\r\n                            overflowY: 'scroll',\r\n                            overflowX: 'hidden',\r\n                          }}\r\n                        >\r\n                          {templateMessage &&\r\n                            templateMessage?.map((i) => {\r\n                              return (\r\n                                <>\r\n                                  {i.status === 'approved' ? (\r\n                                    <div\r\n                                      className='templateCard'\r\n                                      onClick={() => handleSendTemplate(i)}\r\n                                    >\r\n                                      <p\r\n                                        style={{\r\n                                          fontWeight: 'bold',\r\n                                          fontStyle: 'italic',\r\n                                        }}\r\n                                      >\r\n                                        {i.name}\r\n                                      </p>\r\n                                      <p>\r\n                                        {\r\n                                          i.components.filter(\r\n                                            (j) => j.type === 'BODY'\r\n                                          )[0].text\r\n                                        }\r\n                                      </p>\r\n                                    </div>\r\n                                  ) : null}\r\n                                </>\r\n                              );\r\n                            })}\r\n                        </div>\r\n                      </div>\r\n                    ) : null}\r\n                  </div> */}\r\n                  <div\r\n                    style={{\r\n                      width: '-webkit-fill-available',\r\n                      overflowY: 'scroll',\r\n                      overflowX: 'hidden',\r\n                      maxHeight: '199px',\r\n                    }}\r\n                  >\r\n                    {filteredQuickReplyText &&\r\n                      filteredQuickReplyText?.map((i) => {\r\n                        return (\r\n                          <div\r\n                            style={{\r\n                              display: 'flex',\r\n                              flexDirection: 'row',\r\n                              justifyContent: 'flex-start',\r\n                              backgroundColor: 'rgb(223 223 223)',\r\n                              padding: '15px 20px',\r\n                              borderBottom: '1px solid rgb(209 209 209)',\r\n                              cursor: 'pointer',\r\n                            }}\r\n                            onClick={() => setNewMessage(i.message)}\r\n                          >\r\n                            <span\r\n                              style={{ fontWeight: '600', marginRight: '5px' }}\r\n                            >\r\n                              {i.shortcut}\r\n                            </span>\r\n                            {i.message}\r\n                          </div>\r\n                        );\r\n                      })}\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      display: 'flex',\r\n                      flexDirection: 'row',\r\n                      width: '-webkit-fill-available',\r\n                      height: '4.3rem',\r\n                      justifyContent: 'space-evenly',\r\n                      alignItems: 'center',\r\n                    }}\r\n                  >\r\n                    {showSelector ? (\r\n                      <div style={{ display: 'flex', flex: '100%' }}>\r\n                        <CloseIcon\r\n                          style={{\r\n                            flex: '5%',\r\n                            cursor: 'pointer',\r\n                            fontSize: '30px',\r\n                            marginLeft: '5px',\r\n                          }}\r\n                          onClick={() => {\r\n                            setShowSelector(false);\r\n                            setMulForward([]);\r\n                          }}\r\n                        />\r\n                        <div style={{ flex: '90%' }}></div>\r\n                        <ReplyIcon\r\n                          style={{ flex: '5%' }}\r\n                          className='forward_final'\r\n                          onClick={() => {\r\n                            setVisible(true);\r\n                            setShowSelector(false);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    ) : (\r\n                      <>\r\n                        <div className='attachFile'>\r\n                          <AttachFileIcon\r\n                            fontSize='medium'\r\n                            className='attachButton'\r\n                          />\r\n                          <input\r\n                            id='myFile'\r\n                            name='myFile'\r\n                            type='file'\r\n                            className='attachInput'\r\n                            onChange={(e) => handleFiles(e.target.files[0])}\r\n                          />\r\n                        </div>\r\n                        <Tooltip\r\n                          open={openTooltipForm}\r\n                          onClose={handleCloseTooltipForm}\r\n                          onOpen={handleOpenTooltipForm}\r\n                          title='CREATE FORM'\r\n                        >\r\n                          <FormCreation clientId={currentChat.uid} clientWaId = {currentChat.wa_id} clientName = {currentChat.name} agent = {currentChat.agent} />\r\n                        </Tooltip>\r\n                        <Tooltip\r\n                          open={openTooltip}\r\n                          onClose={handleCloseTooltip}\r\n                          onOpen={handleOpenTooltip}\r\n                          // title='SEND TEMPLATE'\r\n                          title='INITIATE CONVERSATION'\r\n                        >\r\n                          <SpeakerNotesIcon\r\n                            className='templateMsg'\r\n                            // onClick={getTemplateMsg}\r\n                            onClick={handleSendTemplate}\r\n                          />\r\n                        </Tooltip>\r\n                        <textarea\r\n                          className='chatMessageInput'\r\n                          placeholder='Type a message...'\r\n                          value={newMessage}\r\n                          onChange={(e) => {\r\n                            setNewMessage(e.target.value);\r\n                            typeMsg(e);\r\n                          }}\r\n                          onKeyPress={handleKeyPress}\r\n                        />\r\n                        {newMessage.length > 0 ? (\r\n                         <>\r\n                         &nbsp;\r\n                          <SendIcon\r\n                            fontSize='medium'\r\n                            style={{fontSize: '29px'}}\r\n                            className='chatSubmitButton'\r\n                            onClick={handleSubmit}\r\n                          />\r\n                          {/* <NoteAddIcon\r\n                            fontSize='medium'\r\n                            style={{fontSize: '25px'}}\r\n                            className='chatSubmitButton'\r\n                            onClick={handleSendNote}\r\n                          /> */}\r\n                          <span className='chatSubmitButton'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>\r\n                          <SpeedDial\r\n                            ariaLabel=\"SpeedDial openIcon example\"\r\n                            style={{left: '97%', height: '29px'}}\r\n                            sx={{ position: 'absolute', bottom: 16, right: 16 }}\r\n                            icon={<NoteAddIcon fontSize='medium' style={{fontSize: '26px', color:'#9B9B9B'}} openIcon={<SendIcon fontSize='medium' style={{fontSize: '26px', color:'#1977f2'}} />} />}\r\n                          >\r\n                            {actions.map((action) => (\r\n                              <SpeedDialAction\r\n                                key={action.name}\r\n                                icon={action.icon}\r\n                                tooltipTitle={action.name}\r\n                              />\r\n                            ))}\r\n                          </SpeedDial>\r\n                         </>\r\n                        ) : (\r\n                          <MicIcon fontSize='large' className='micButton' />\r\n                        )}\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </footer>\r\n              </>\r\n            ) : (\r\n              <img\r\n                src={chatDemo}\r\n                // height='600'\r\n                // width='600'\r\n                style={{\r\n                  alignSelf: 'center',\r\n                  marginTop: '130px',\r\n                  height: '60vh',\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n        <RightSec newSessions={newSessions} interestedTutors={interestedTutors} clientPayment={clientPayment} tutorPayout={tutorPayout} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Messenger;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\pages\\login\\Login.jsx",["207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237"],"import { useContext, useRef } from \"react\";\r\nimport \"./login.css\";\r\n// import { loginCall } from \"../../apiCalls\";\r\n// import { AuthContext } from \"../../context/AuthContext\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { gridColumnsTotalWidthSelector } from \"@mui/x-data-grid\";\r\n\r\nexport default function Login({\r\n  userId,\r\n  setUserId,\r\n  agent,\r\n  setAgent,\r\n  pass,\r\n  setPass,\r\n  setUser,\r\n  setApiUrl,\r\n  setApiKey,\r\n  otp,\r\n  setOtp,\r\n}) {\r\n  const email = useRef();\r\n  const password = useRef();\r\n  //   const { isFetching, dispatch } = useContext(AuthContext);\r\n\r\n  //   const handleClick = (e) => {\r\n  //     e.preventDefault();\r\n  //     loginCall(\r\n  //       { email: email.current.value, password: password.current.value },\r\n  //       dispatch\r\n  //     );\r\n  //   };\r\n  console.log(process.env.REACT_APP_API_194);\r\n\r\n  // verify OTP\r\n  const verifyUser = async (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      // otpMatched &&\r\n      userId == process.env.REACT_APP_ID1 &&\r\n      pass == process.env.REACT_APP_PASS1\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_194}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_194);\r\n        setApiKey(process.env.REACT_APP_API_KEY_194);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_194);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_194);\r\n        localStorage.setItem(\"device\", \"1\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"917761093194\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"1ff427bd_e20d_4582_a530_e28f311cc595\"\r\n        );\r\n        window.location.reload();\r\n      } else if (verifyAgent.data.remark === \"OTP Not Matched\") {\r\n        alert(\"OTP is not correct!\");\r\n        setUser(false);\r\n        console.log(\"failed verify agent api\");\r\n      } else {\r\n        alert(\"OTP is expired.Please send another\");\r\n        setUser(false);\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID2 &&\r\n      pass == process.env.REACT_APP_PASS2\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_7091}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_7091);\r\n        setApiKey(process.env.REACT_APP_API_KEY_7091);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_7091);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_7091);\r\n        localStorage.setItem(\"device\", \"2\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"917091489698\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"f02c5e46_b956_4160_abf2_e8f6cf283754\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID3 &&\r\n      pass == process.env.REACT_APP_PASS3\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_77618}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_77618);\r\n        setApiKey(process.env.REACT_APP_API_KEY_77618);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_77618);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_77618);\r\n        localStorage.setItem(\"device\", \"3\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"917761814102\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"1ff427bd_e20d_4582_a530_e28f311cc595\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID4 &&\r\n      pass == process.env.REACT_APP_PASS4\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_8777}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_8777);\r\n        setApiKey(process.env.REACT_APP_API_KEY_8777);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_8777);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_8777);\r\n        localStorage.setItem(\"device\", \"4\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"918777592248\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"1ff427bd_e20d_4582_a530_e28f311cc595\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID5 &&\r\n      pass == process.env.REACT_APP_PASS5\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_9065}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_9065);\r\n        setApiKey(process.env.REACT_APP_API_KEY_9065);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_9065);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_9065);\r\n        localStorage.setItem(\"device\", \"5\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"919065650479\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"f02c5e46_b956_4160_abf2_e8f6cf283754\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        setUser(false);\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID6 &&\r\n      pass == process.env.REACT_APP_PASS6\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_7070}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_7070);\r\n        setApiKey(process.env.REACT_APP_API_KEY_7070);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_7070);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_7070);\r\n        localStorage.setItem(\"device\", \"6\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"917070505631\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"f02c5e46_b956_4160_abf2_e8f6cf283754\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID7 &&\r\n      pass == process.env.REACT_APP_PASS7\r\n    ) {\r\n      const verifyAgent = await axios.post(\r\n        `${process.env.REACT_APP_API_9661}/api/agent/verifyOtp`,\r\n        {\r\n          otp: otp,\r\n          agent: agent,\r\n        }\r\n      );\r\n      const otpMatched = verifyAgent?.data?.success;\r\n      console.log({ otpMatched });\r\n\r\n      if (verifyAgent.data.success) {\r\n        setUser(true);\r\n        localStorage.setItem(\"user\", true);\r\n        setApiUrl(process.env.REACT_APP_API_9661);\r\n        setApiKey(process.env.REACT_APP_API_KEY_9661);\r\n        localStorage.setItem(\"api\", process.env.REACT_APP_API_9661);\r\n        localStorage.setItem(\"api_key\", process.env.REACT_APP_API_KEY_9661);\r\n        localStorage.setItem(\"device\", \"7\");\r\n        localStorage.setItem(\"agent\", agent);\r\n        localStorage.setItem(\"waid\", \"919661126925\");\r\n        localStorage.setItem(\r\n          \"namespace\",\r\n          \"3b25ca9e_e7fe_45a1_acd2_224e4fd396d8\"\r\n        );\r\n      } else {\r\n        alert(\"OTP is not correct!\");\r\n        console.log(\"failed verify agent api\");\r\n      }\r\n    } else {\r\n      setUser(false);\r\n      alert(\"Login Failed! UserID or password is incorrect.\");\r\n    }\r\n  };\r\n\r\n  // send Otp\r\n  const sendOtp = async () => {\r\n    if (\r\n      // otpMatched &&\r\n      userId == process.env.REACT_APP_ID1 &&\r\n      pass == process.env.REACT_APP_PASS1\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_194}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device1\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID2 &&\r\n      pass == process.env.REACT_APP_PASS2\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_7091}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device2\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID3 &&\r\n      pass == process.env.REACT_APP_PASS3\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_77618}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device3\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID4 &&\r\n      pass == process.env.REACT_APP_PASS4\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_8777}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device4\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID5 &&\r\n      pass == process.env.REACT_APP_PASS5\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_9065}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device5\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID6 &&\r\n      pass == process.env.REACT_APP_PASS6\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_7070}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device6\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else if (\r\n      userId == process.env.REACT_APP_ID7 &&\r\n      pass == process.env.REACT_APP_PASS7\r\n    ) {\r\n      if (\r\n        agent &&\r\n        (agent === process.env.REACT_APP_AGENT_ADMIN ||\r\n          agent === process.env.REACT_APP_AGENT_1 ||\r\n          agent === process.env.REACT_APP_AGENT_2 ||\r\n          agent === process.env.REACT_APP_AGENT_3 ||\r\n          agent === process.env.REACT_APP_AGENT_4)\r\n      ) {\r\n        const sendOtp = await axios.post(\r\n          `${process.env.REACT_APP_API_9661}/api/agent/sendOtp`,\r\n          {\r\n            device: \"Device7\",\r\n            agent: agent,\r\n          }\r\n        );\r\n        if (sendOtp.data) {\r\n          alert(\"OTP Sent\");\r\n          console.log(\"OTP is sent\");\r\n        } else {\r\n          alert(\"OTP not sent. Try Again!\");\r\n          console.log(\"OTP is sent\");\r\n        }\r\n      } else {\r\n        alert(\"Please Enter Correct Agent's Name\");\r\n      }\r\n    } else {\r\n      alert(\"UserID or password is incorrect.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"loginWrapper\">\r\n        <div className=\"loginLeft\">\r\n          <h3 className=\"loginLogo\">Eduarno Chat Dashboard</h3>\r\n        </div>\r\n        <div className=\"loginRight\">\r\n          <form className=\"loginBox\">\r\n            <input\r\n              placeholder=\"User ID\"\r\n              type=\"text\"\r\n              value={userId}\r\n              required\r\n              className=\"loginInput\"\r\n              onChange={(e) => setUserId(e.target.value)}\r\n              ref={email}\r\n            />\r\n            <input\r\n              placeholder=\"Agent Name\"\r\n              type=\"text\"\r\n              value={agent}\r\n              className=\"loginInput\"\r\n              onChange={(e) => setAgent(e.target.value)}\r\n              required\r\n            />\r\n            <input\r\n              placeholder=\"Password\"\r\n              type=\"password\"\r\n              value={pass}\r\n              required\r\n              minLength=\"6\"\r\n              className=\"loginInput\"\r\n              onChange={(e) => setPass(e.target.value)}\r\n              ref={password}\r\n            />\r\n            <div style={{ display: \"flex\" }}>\r\n              <input\r\n                style={{ flex: \"80%\", height: \"47px\" }}\r\n                placeholder=\"OTP\"\r\n                type=\"text\"\r\n                value={otp}\r\n                required\r\n                minLength=\"4\"\r\n                className=\"loginInput\"\r\n                onChange={(e) => setOtp(e.target.value)}\r\n              />\r\n              <button\r\n                style={{\r\n                  flex: \"20%\",\r\n                  height: \"50px\",\r\n                  marginLeft: \"10px\",\r\n                  backgroundColor: \"#25d366\",\r\n                  border: \"none\",\r\n                  borderRadius: \"10px\",\r\n                  color: \"white\",\r\n                }}\r\n                onClick={sendOtp}\r\n              >\r\n                Send OTP\r\n              </button>\r\n            </div>\r\n            <button className=\"loginButton\" type=\"submit\" onClick={verifyUser}>\r\n              Log In\r\n            </button>\r\n            <span className=\"loginForgot\">Forgot Password?</span>\r\n            {/* <button className=\"loginRegisterButton\">\r\n              {isFetching ? (\r\n                <CircularProgress color=\"white\" size=\"20px\" />\r\n              ) : (\r\n                \"Create a New Account\"\r\n              )}\r\n            </button> */}\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\Customer-Services.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\StoreFiles-Service.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\ApiHeaderKey.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\serviceUrls\\Message-Services.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\utils\\variables.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\drag_dropFile\\DropFile.js",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dropDown\\MoreMenu.js",["238","239"],"import React, { useState, useEffect } from 'react';\r\nimport './moreMenu.css'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\n\r\nconst MoreMenu = ({ arrivalMessage }) => {\r\n  const [options, setOptions] = useState();\r\n  const uniqueValuesSet = new Set();\r\n\r\n  useEffect(() => {\r\n    const filteredArr = arrivalMessage.reverse().filter((obj) => {\r\n      const isPresentInSet = uniqueValuesSet.has(obj.waId);\r\n      uniqueValuesSet.add(obj.waId);\r\n      return !isPresentInSet;\r\n    });\r\n    setOptions(filteredArr);\r\n  }, [arrivalMessage]);\r\n  //   const options = filteredArr;\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const open = Boolean(anchorEl);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const truncString = (str, max, add) => {\r\n    add = add || '...';\r\n    return (typeof str === 'string' && str.length > max ? str.substring(0,max)+add : str);\r\n };\r\n  return (\r\n    <div>\r\n      <IconButton\r\n        aria-label='more'\r\n        aria-controls='long-menu'\r\n        aria-haspopup='true'\r\n        onClick={handleClick}\r\n      >\r\n        <NotificationsIcon className={options?.length>0 ? 'notification' : 'no_noti'} />\r\n      </IconButton>\r\n      <Menu\r\n        id='long-menu'\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        PaperProps={{\r\n          style: {\r\n            maxHeight: ITEM_HEIGHT * 4.5,\r\n            width: '20ch',\r\n          },\r\n        }}\r\n      >\r\n        {options?.length > 0 ? (\r\n          options?.map((option) => (\r\n            <MenuItem\r\n              key={option.id}\r\n              // selected={option === 'None'}\r\n              onClick={handleClose}\r\n              style={{fontSize: '14px', fontWeight: 'bold'}}\r\n            >\r\n              {truncString(option.senderName, 10, '...')} ({truncString(option.text, 3, '..')})\r\n            </MenuItem>\r\n          ))\r\n        ) : (\r\n          <MenuItem\r\n            key={'noMsg'}\r\n            // selected={option === 'None'}\r\n            onClick={handleClose}\r\n          >\r\n            No new messages\r\n          </MenuItem>\r\n        )}\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoreMenu;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\forwardConv\\ForwardMsg.jsx",["240","241","242","243","244","245","246","247","248","249","250"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport './forwardMsg.css';\r\nimport axios from 'axios';\r\nimport { msgUrl, sendMsgUrl, sendFileUrl } from '../../serviceUrls/Message-Services';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport Pagination from '@mui/material/Pagination';\r\n\r\n\r\nconst ForwardMsg = ({\r\n  apiKey,\r\n  // conversations,\r\n  visible,\r\n  setVisible,\r\n  forward,\r\n  setForwarded,\r\n  forwarded,\r\n  mulForward,\r\n  setMulForward,\r\n  setForwardMsg,\r\n  getCustomersUrl,\r\n  // contactPage,\r\n  // handleContactList,\r\n  // contactListLoading,\r\n \r\n}) => {\r\n  const [check, setCheck] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [color, setColor] = useState(false);\r\n  const [removedNum, setRemovedNum] = useState();\r\n  const [conversationsForward,setConversationsForward]=useState()\r\n  const [convCount,setConvCount] =useState()\r\n  const [contactListLoading,setContactListLoading] =useState(false)\r\n  const [contactPage,setContactPage] =useState(1)\r\n\r\n  const show = useRef();\r\n  // console.log(conversations);\r\n\r\n  useEffect(() => {\r\n    let agent = localStorage.getItem('agent');\r\n    const getConversations = async () => {\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.status);\r\n        // const filteredData = res?.data?.filter((i) => i.agent == agent);\r\n        // let pinnedChat = res?.data?.filter((el) => el.pinContact === true);\r\n        // let unPinnedChat = res?.data\r\n        //   ?.filter((el) => el.pinContact === false)\r\n        //   ?.sort((a, b) => {\r\n        //     return b.timestamp - a.timestamp;\r\n        //   });\r\n        setConversationsForward(res?.data?.result);\r\n        setConvCount(res?.data?.length);\r\n      } catch (err) {\r\n        console.log(err.Error);\r\n      }\r\n    };\r\n    getConversations();\r\n  }, []);\r\n \r\n  const closeModal = () => {\r\n    // show.current.style.display = 'none'\r\n    setVisible(false);\r\n    setMulForward([]);\r\n  };\r\n\r\n  console.log(forward)\r\n\r\n  const handleCheck = (val) => {\r\n    if(check.find(element => element == val)) {\r\n      let index = check.indexOf(val);\r\n      let removedNo = check.splice(index, 1);\r\n      console.log(check)\r\n      setCheck(check);\r\n      console.log(removedNo)\r\n      setRemovedNum(removedNo[0])\r\n      setColor(false);\r\n    }\r\n    else {\r\n      setCheck([...check, val]);\r\n      setColor(true);\r\n    }\r\n  };\r\n  console.log(check);\r\n\r\n  const handleSend = async (user) => {\r\n    setLoading(true);\r\n    if(mulForward.length > 0) {\r\n    for(let k = 0; k < mulForward.length; k++) {\r\n      for (let i = 0; i < check.length; i++) {\r\n        if(mulForward[k].type === 'text') {\r\n        const payload = {\r\n          recipient_type: 'individual',\r\n          to: check[i],\r\n          conversationId: '',\r\n          name: '',\r\n          from: '',\r\n          wa_id: check[i],\r\n          text: {\r\n            body: mulForward[k].data.body\r\n          },\r\n          type: mulForward[k].type,\r\n          data: '',\r\n          isOwner: true,\r\n        };\r\n        try {\r\n          const res = await axios.post(\r\n            sendMsgUrl,\r\n            payload,\r\n            {\r\n              headers: '',\r\n            }\r\n          );\r\n          closeModal();\r\n          setForwarded(!forwarded);\r\n          setMulForward([]);\r\n          //   setMessages([...messages, res.data.message]);\r\n          //   console.log(res);\r\n          //   setUserId(currentChat?.wAid);\r\n          //   setMessageId(res.data.message.whatsappMessageId);\r\n          //   setNewMessage('');\r\n          setForwardMsg('Message forwarded!');\r\n          setLoading(false);\r\n        } catch (err) {\r\n          setForwardMsg('Something went wrong!');\r\n          setMulForward([]);\r\n          console.log(err);\r\n        }\r\n      }\r\n      else {\r\n        const payload = {\r\n          recipient_type: 'individual',\r\n          to: check[i],\r\n          type: mulForward[k].type,\r\n          data: {\r\n            id: mulForward[k]?.data?.id,\r\n            // caption: forward.data.caption,\r\n            filename: mulForward[k]?.data?.filename && mulForward[k]?.data?.filename\r\n          },\r\n          name: '',\r\n          from: '',\r\n          wa_id: check[i],\r\n          timestamp: '',\r\n          operatorName: '',\r\n          isOwner: true,\r\n          status: '',\r\n          ticketId: '',\r\n          eventType: '',\r\n        };\r\n        try {\r\n          const res = await axios.post(\r\n            sendFileUrl,\r\n            payload,\r\n            {\r\n              headers: {\r\n                'D360-API-KEY': apiKey || localStorage.getItem(\"api_key\"),\r\n              },\r\n            }\r\n          );\r\n          closeModal();\r\n          setForwarded(!forwarded);\r\n          setMulForward([]);\r\n          //   setMessages([...messages, res.data.message]);\r\n          //   console.log(res);\r\n          //   setUserId(currentChat?.wAid);\r\n          //   setMessageId(res.data.message.whatsappMessageId);\r\n          //   setNewMessage('');\r\n          setForwardMsg('Message forwarded!');\r\n          setLoading(false);\r\n        } catch (err) {\r\n          setForwardMsg('Something went wrong!');\r\n          console.log(err);\r\n        }\r\n      }\r\n      }\r\n    }\r\n  }\r\n    else {\r\n    for (let i = 0; i < check.length; i++) {\r\n      if(forward.type === 'text') {\r\n      const payload = {\r\n        recipient_type: 'individual',\r\n        to: check[i],\r\n        conversationId: '',\r\n        name: '',\r\n        from: '',\r\n        wa_id: check[i],\r\n        text: {\r\n          body: forward.data.body\r\n        },\r\n        type: forward.type,\r\n        data: '',\r\n        isOwner: true,\r\n      };\r\n      try {\r\n        const res = await axios.post(\r\n          sendMsgUrl,\r\n          payload,\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        closeModal();\r\n        setForwarded(!forwarded);\r\n        setMulForward([]);\r\n        setForwardMsg('Message forwarded!');\r\n        setTimeout(() => {\r\n          setForwardMsg(null);\r\n        }, 1000);\r\n        //   setMessages([...messages, res.data.message]);\r\n        //   console.log(res);\r\n        //   setUserId(currentChat?.wAid);\r\n        //   setMessageId(res.data.message.whatsappMessageId);\r\n        //   setNewMessage('');\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setForwardMsg('Something went wrong!');\r\n        console.log(err);\r\n      }\r\n    }\r\n    else {\r\n      const payload = {\r\n        recipient_type: 'individual',\r\n        to: check[i],\r\n        type: forward.type,\r\n        data: {\r\n          id: forward.data.id,\r\n          caption: forward.data.caption,\r\n          filename: forward?.data?.filename && forward?.data?.filename\r\n        },\r\n        name: '',\r\n        from: '',\r\n        wa_id: check[i],\r\n        timestamp: '',\r\n        operatorName: '',\r\n        isOwner: true,\r\n        status: '',\r\n        ticketId: '',\r\n        eventType: '',\r\n      };\r\n      try {\r\n        const res = await axios.post(\r\n          sendFileUrl,\r\n          payload,\r\n          {\r\n            headers: {\r\n              'D360-API-KEY': apiKey || localStorage.getItem(\"api_key\"),\r\n            },\r\n          }\r\n        );\r\n        closeModal();\r\n        setForwarded(!forwarded);\r\n        setMulForward([]);\r\n        //   setMessages([...messages, res.data.message]);\r\n        //   console.log(res);\r\n        //   setUserId(currentChat?.wAid);\r\n        //   setMessageId(res.data.message.whatsappMessageId);\r\n        //   setNewMessage('');\r\n        setForwardMsg('Message forwarded!');\r\n        setLoading(false);\r\n      } catch (err) {\r\n        setForwardMsg('Something went wrong!');\r\n        console.log(err);\r\n      }\r\n    }\r\n    }\r\n  }\r\n  };\r\n  // const handleSearch = (e) => {\r\n  //   setSearch(e.target.value);\r\n  // };\r\n  // const filteredCoversation = conversationsForward?.filter((f) => {\r\n  //   return (\r\n  //     f.name.toLowerCase().indexOf(search.toLowerCase()) !== -1 ||\r\n  //     f.uid.indexOf(search.toLowerCase()) !== -1\r\n  //   );\r\n  // });\r\n  const filteredCoversation = conversationsForward;\r\n  const handleSearch = async (e) => {\r\n    let agent = localStorage.getItem('agent');\r\n    setSearch(e.target.value);\r\n    // if (e.key == 'Control') {\r\n      setContactListLoading(true);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}/${e.target.value}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setContactListLoading(false);\r\n        setConversationsForward(res?.data?.result);\r\n        setConvCount(res?.data?.length);\r\n        setContactPage(1);\r\n        // setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    // }\r\n  };\r\n\r\n  const handleContactList = async (event, value) => {\r\n    let agent = localStorage.getItem('agent');\r\n    if (search) {\r\n      setContactListLoading(true);\r\n      setContactPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}/${search}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setConversationsForward(res?.data?.result);\r\n        setContactListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n\r\n        // setSaved(null);\r\n        // setUpdated(null);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setContactListLoading(true);\r\n      setContactPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          getCustomersUrl + `/${agent}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setConversationsForward(res?.data?.result);\r\n        setContactListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n\r\n        // setSaved(null);\r\n        // setUpdated(null);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div id='id01' className='modal' ref={show}>\r\n        <form className='modal-content'>\r\n          <header\r\n            style={{\r\n              height: '95px',\r\n              backgroundColor: '#04787c',\r\n              position: 'absolute',\r\n              width: '436px',\r\n              borderRadius: '4px 4px 0px 0px',\r\n            }}\r\n          >\r\n            <CloseIcon\r\n              fontSize='medium'\r\n              style={{\r\n                color: '#cccc',\r\n                margin: '12px 10px -5px 10px',\r\n                cursor: 'pointer',\r\n              }}\r\n              onClick={closeModal}\r\n            />\r\n            <span\r\n              style={{\r\n                fontSize: '19px',\r\n                margin: '0px 0px 0px 10px',\r\n                fontWeight: '400',\r\n                color: '#ffff',\r\n              }}\r\n            >\r\n              Forward message to\r\n            </span>\r\n            {loading ? <CircularProgress\r\n              style={{\r\n                color: '#ffff',\r\n                margin: '0px 0px -5px 169px',\r\n                height: '28px',\r\n                width: '28px'\r\n              }}\r\n            /> : check.length > 0 ? <SendIcon\r\n              style={{\r\n                color: `#ffff`,\r\n                margin: '0px 0px -5px 170px',\r\n                cursor: 'pointer',\r\n              }}\r\n              onClick={handleSend}\r\n            /> :\r\n            <SendIcon\r\n              style={{\r\n                color: '#cccc',\r\n                margin: '0px 0px -5px 170px',\r\n                cursor: 'default',\r\n              }}\r\n            />\r\n            }\r\n            <input\r\n              placeholder='Search for users'\r\n              className='searchConversation'\r\n              onChange={(e) => handleSearch(e)}\r\n            />\r\n          </header>\r\n\r\n          {contactListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) :<div className='container'>\r\n            {filteredCoversation &&\r\n              filteredCoversation?.map((i) => (\r\n                <div\r\n                  className={check.find(element => element == i.wa_id) ? 'selected_card' : removedNum == i.wa_id ? 'card' : 'card'}\r\n                  onClick={() => handleCheck(i.wa_id)}\r\n                >\r\n                  {/* <input\r\n                    type='checkbox'\r\n                    id={i.wa_id}\r\n                    name={i.wa_id}\r\n                    value={i.wa_id}\r\n                    onClick={(e) => handleCheck(e.target.value)}\r\n                  /> */}\r\n                  {check.find(element => element == i.wa_id) && <CheckCircleIcon fontSize='small' style={{color: 'rgb(11 145 102)'}} />}\r\n                  <label for={i.id} style={{ marginLeft: '10px', cursor: 'pointer' }}>\r\n                    {i.name}{' ['}{'ED'+i.uid}]\r\n                  </label>\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  margin: '8px',\r\n                }}\r\n                count={Math.ceil(convCount / 20)}\r\n                page={contactPage}\r\n                onChange={handleContactList}\r\n              />\r\n          </div>}\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForwardMsg;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\message\\Message.jsx",["251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290"],"import { useEffect, useState } from 'react';\r\nimport './message.css';\r\nimport { format } from 'timeago.js';\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport ScheduleIcon from '@material-ui/icons/Schedule';\r\nimport { getFileUrl } from '../../serviceUrls/Message-Services';\r\nimport { headerKey } from '../../serviceUrls/ApiHeaderKey';\r\nimport ReactAudioPlayer from 'react-audio-player';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport ReplyAllIcon from '@mui/icons-material/ReplyAll';\r\n\r\nconst Message = ({\r\n  apiUrl,\r\n  message,\r\n  msgArr,\r\n  own,\r\n  ownAlt,\r\n  setForward,\r\n  mulForward,\r\n  setMulForward,\r\n  setVisible,\r\n  showSelector,\r\n  setShowSelector,\r\n  status\r\n}) => {\r\n  const [fileData, setFileData] = useState();\r\n  const [image, setImage] = useState();\r\n  const [context, setContext] = useState();\r\n  const [fileType, setFileType] = useState();\r\n  const [check, setCheck] = useState();\r\n\r\n  console.log('stat', status)\r\n\r\n  console.log(message);\r\n\r\n  useEffect(() => {\r\n    const getImg = async () => {\r\n      try {\r\n        if (\r\n          message.type == 'image' ||\r\n          message.type == 'video' ||\r\n          message.type == 'document' ||\r\n          message.type == 'voice' ||\r\n          message.type == 'audio' ||\r\n          (message?.messages && message?.messages[0]?.type == 'image') ||\r\n          (message?.messages && message?.messages[0]?.type == 'video') ||\r\n          (message?.messages && message?.messages[0]?.type == 'voice') ||\r\n          (message?.messages && message?.messages[0]?.type == 'audio') ||\r\n          (message?.messages && message?.messages[0]?.type == 'document')\r\n        ) {\r\n          await fetch(\r\n            `https://waba.360dialog.io/v1/media/${\r\n              message?.data?.id ||\r\n              (message?.messages &&\r\n                message?.messages[0]?.[message?.messages[0]?.type]?.id)\r\n            }`,\r\n            {\r\n              headers: { ...headerKey },\r\n            }\r\n          )\r\n            .then((res) => res.blob())\r\n            .then((blob) => {\r\n              setImage(() => URL.createObjectURL(blob));\r\n            });\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    getImg();\r\n\r\n    const getContext = async () => {\r\n      if (\r\n        (message?.context && message?.context?.id) ||\r\n        (message?.messages && message?.messages[0]?.context)\r\n      ) {\r\n        try {\r\n          const res = await axios.get(\r\n            `${apiUrl || localStorage.getItem('api')}/api/messages/findMsg/${\r\n              message?.context?.id ||\r\n              (message?.messages && message?.messages[0]?.context?.id)\r\n            }`\r\n          );\r\n          if (res.data[0].eventType === 'template') {\r\n            setContext(res.data[0].templateText);\r\n            console.log(res.data[0]);\r\n          } else if (res.data[0].type === 'text') {\r\n            setContext(res.data[0].text.body);\r\n          } else if (\r\n            res.data[0].type === 'image' ||\r\n            res.data[0].type === 'video' ||\r\n            res.data[0].type === 'document'\r\n          ) {\r\n            setFileType(res.data[0].type);\r\n            await fetch(\r\n              `https://waba.360dialog.io/v1/media/${res.data[0].data?.id}`,\r\n              {\r\n                headers: { ...headerKey },\r\n              }\r\n            )\r\n              .then((res) => res.blob())\r\n              .then((blob) => {\r\n                setContext(() => URL.createObjectURL(blob));\r\n              });\r\n          }\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      }\r\n    };\r\n    getContext();\r\n    \r\n  }, [message]);\r\n\r\n  \r\n  console.log(image);\r\n\r\n  // const handleCheck = (val) => {\r\n  //   if(mulForward.find(element => element == val)) {\r\n  //     let index = mulForward.indexOf(val);\r\n  //     mulForward.splice(index, 1);\r\n  //   }\r\n  //   else if() {\r\n  //     message.type === 'image' ||\r\n  //             message.type === 'video' ||\r\n  //             message.type === 'document'\r\n  //               ? setMulForward([...mulForward, { type: message.type, data: message.data }]) : setMulForward([...mulForward, { type: message.type, data: message.text }])\r\n  //   }\r\n  // }\r\n\r\n  console.log(mulForward);\r\n\r\n  return (\r\n    <>\r\n      {message.eventType === 'template' ? (\r\n        <div className='temp_message'>\r\n          <p className='temp_messageText'>{message.templateText}</p>\r\n        </div>\r\n      ) : message.eventType === 'note' ? (\r\n        <div className='note_message'>\r\n          <p className='note_messageText'>\r\n            <span style={{color: message?.clientNotes?.priority === 'high' ? 'red' : message?.clientNotes?.priority === 'medium' ? 'royalblue' : '#9b9b9b', fontSize: '12px', fontWeight: '700'}}>NOTE: </span>\r\n            {message.clientNotes.noteText}\r\n          </p>\r\n        </div>\r\n      ) : (\r\n        <div className={own || ownAlt ? 'message own' : 'message'}>\r\n          <div className={own || ownAlt ? 'messageTop _own_' : 'messageTop'}>\r\n            {showSelector && (\r\n              <Checkbox\r\n                size='small'\r\n                style={{ placeSelf: 'center', marginRight: '15px' }}\r\n                // id={i._id}\r\n                // name={i._id}\r\n                // value={i.wa_id}\r\n                onChange={() => {\r\n                  if (\r\n                    mulForward?.find(\r\n                      (element) =>\r\n                        (element?.data?.body &&\r\n                          element?.data?.body == message?.text?.body) ||\r\n                        (element?.data?.body &&\r\n                          message?.messages &&\r\n                          element?.data?.body ==\r\n                            message?.messages[0]?.[message?.messages[0]?.type]\r\n                              .body) ||\r\n                        (element?.data?.id &&\r\n                          element?.data?.id == message?.data?.id) ||\r\n                        (element?.data?.id &&\r\n                          message?.messages &&\r\n                          element?.data?.id ==\r\n                            message?.messages[0]?.[message?.messages[0]?.type]\r\n                              .id)\r\n                    )\r\n                  ) {\r\n                    let index = mulForward?.findIndex(\r\n                      (x) =>\r\n                        (x?.data?.body &&\r\n                          x?.data?.body === message?.text?.body) ||\r\n                        (x?.data?.id && x?.data?.id === message?.data?.id) ||\r\n                        (x?.data?.body &&\r\n                          message?.messages &&\r\n                          x?.data?.body ===\r\n                            message?.messages[0]?.[message?.messages[0]?.type]\r\n                              .body) ||\r\n                        (x.data.id &&\r\n                          message?.messages &&\r\n                          x.data.id ===\r\n                            message?.messages[0]?.[message?.messages[0]?.type]\r\n                              .id)\r\n                    );\r\n                    mulForward.splice(index, 1);\r\n                  } else {\r\n                    setMulForward([\r\n                      ...mulForward,\r\n                      {\r\n                        type:\r\n                          message?.type ||\r\n                          (message?.messages && message?.messages[0]?.type),\r\n                        data:\r\n                          message?.data ||\r\n                          message.text ||\r\n                          (message?.messages &&\r\n                            message?.messages[0]?.[message?.messages[0]?.type]),\r\n                      },\r\n                    ]);\r\n                    // : message?.type === 'text' ||\r\n                    // message?.messages[0]?.type === 'text' ? setMulForward([\r\n                    //     ...mulForward,\r\n                    //     {\r\n                    //       type:\r\n                    //         message.type ||\r\n                    //         (message?.messages && message?.messages[0]?.type),\r\n                    //       data:\r\n                    //         message.text ||\r\n                    //         (message?.messages &&\r\n                    //           message?.messages[0]?.text),\r\n                    //     },\r\n                    //   ]) : setMulForward([\r\n                    //     ...mulForward,\r\n                    //     {\r\n                    //       type:\r\n                    //         message.type ||\r\n                    //         (message?.messages && message?.messages[0]?.type),\r\n                    //       data:\r\n                    //         message.text ||\r\n                    //         (message?.messages &&\r\n                    //           message?.messages[0]?.text),\r\n                    //     },\r\n                    //   ])\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n            {message.type === 'image' ||\r\n            (message?.messages && message?.messages[0]?.type == 'image') ? (\r\n              <div className={own || ownAlt ? 'messageImage own_' : 'messageImage'}>\r\n              <img\r\n                src={image}\r\n                className={own || ownAlt ? 'imageBox ownimg_' : 'imageBox'}\r\n                // className={own || ownAlt ? 'messageImage own_' : 'messageImage'}\r\n              />\r\n              <div style={{textAlign: 'start', padding: '0px 7px 0px 7px', fontSize: '13px', width: '-webkit-fill-available'}}>\r\n                {message?.data?.caption || message?.messages && message?.messages[0]?.[message?.messages[0]?.type]?.caption}\r\n              </div>\r\n              </div>\r\n            ) : message.type === 'video' ||\r\n              (message?.messages && message?.messages[0]?.type == 'video') ? (\r\n              <div className={\r\n                own || ownAlt ? 'messageVideo ownVid' : 'messageVideo'\r\n              }>\r\n              <video\r\n                controls\r\n                src={image}\r\n                className={\r\n                  own || ownAlt ? 'videoBox ownVid_' : 'videoBox'\r\n                }\r\n              />\r\n              <div style={{textAlign: 'start', padding: '0px 7px 0px 7px', fontSize: '13px', width: '-webkit-fill-available'}}>\r\n                {message?.data?.caption || message?.messages && message?.messages[0]?.[message?.messages[0]?.type]?.caption}\r\n              </div>\r\n              </div>\r\n            ) : message.type === 'voice' || message.type === 'audio' ||\r\n              (message?.messages && message?.messages[0]?.type == 'voice') || (message?.messages && message?.messages[0]?.type == 'audio') ? (\r\n              <ReactAudioPlayer\r\n                src={image}\r\n                style={{ marginBottom: '15px' }}\r\n                controls\r\n              />\r\n            ) : message.type === 'document' ||\r\n              (message?.messages &&\r\n                message?.messages[0]?.type == 'document') ? (\r\n              <div\r\n                className={own || ownAlt ? 'messageDocs own_' : 'messageDocs'}\r\n              >\r\n                {/* <iframe src={image} height=\"200\" width=\"300\"></iframe> */}\r\n                {/* {JSON.stringify(image)} */}\r\n                {/* <img src={image} /> */}\r\n                <a href={image} target='_blank'>\r\n                  {message?.messages\r\n                    ? message?.messages[0]?.document?.filename || message?.messages[0]?.document?.caption\r\n                    : message.data.filename\r\n                    ? message.data.filename\r\n                    : !message.data.filename\r\n                    ? message.data.caption\r\n                    : null}\r\n                </a>\r\n                {/* {message?.messages ? message?.messages[0]?.document?.filename : message.data.filename ? message.data.filename : null} */}\r\n              </div>\r\n            ) : message.type === 'button' ||\r\n              (message?.messages && message?.messages[0]?.type == 'button') ? (\r\n              <div>\r\n                <p className='messageTextContext'>{context}</p>\r\n                <p className='messageTextReplyBtn'>\r\n                  {message?.messages\r\n                    ? message?.messages[0]?.button?.text\r\n                    : message?.replyButton\r\n                    ? message?.replyButton\r\n                    : null}\r\n                </p>\r\n              </div>\r\n            ) : (\r\n              <div style={{ whiteSpace: 'pre-wrap' }}>\r\n                {message?.context ||\r\n                (message?.messages && message?.messages[0]?.context) ? (\r\n                  <div>\r\n                    {fileType === 'image' ||\r\n                    fileType === 'video' ||\r\n                    fileType === 'document' ? (\r\n                      // <iframe\r\n                      //   src={context}\r\n                      //   width='100'\r\n                      //   height='100'\r\n                      //   style={{ border: '2px solid #fff' }}\r\n                      // ></iframe>\r\n                      <div className='messageFileContext'>\r\n                        <a href={context} target='_blank'>\r\n                          file link\r\n                        </a>\r\n                      </div>\r\n                    ) : (\r\n                      <p className='messageTextContext'>{context}</p>\r\n                    )}\r\n                  </div>\r\n                ) : null}\r\n                <p\r\n                  className={\r\n                    message.context ||\r\n                    (message?.messages && message?.messages[0]?.context)\r\n                      ? 'messageTextReply'\r\n                      : 'messageText'\r\n                  }\r\n                >\r\n                  {message?.messages\r\n                    ? message?.messages[0]?.text?.body\r\n                    : message?.text?.body\r\n                    ? message?.text?.body\r\n                    : null}\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            {own || ownAlt ? (\r\n              <>\r\n                {message.status === 'read' || status?.find(e => e?.msgId == message?.id)?.msgStatus  == 'read' ? (\r\n                  <DoneAllIcon className='seen' />\r\n                ) : message.status === 'delivered' || status?.find(e => e?.msgId == message?.id)?.msgStatus == 'delivered' ? (\r\n                  <DoneAllIcon className='delivered' />\r\n                ) : message.status === 'sent' || status?.find(e => e?.msgId == message?.id)?.msgStatus == 'sent' ? (\r\n                  <DoneIcon className='sent' />\r\n                ) : (\r\n                  <ScheduleIcon className='notsent' />\r\n                )}\r\n              </>\r\n            ) : null}\r\n            <div className='messageBottom'>\r\n              {/* {format(\r\n                message?.createdAt ||\r\n                  (message?.messages &&\r\n                    new Date(message?.messages[0]?.timestamp * 1000))\r\n              )} */}\r\n              {moment(\r\n                message?.createdAt ||\r\n                  (message?.messages &&\r\n                    new Date(message?.messages[0]?.timestamp * 1000))\r\n              ).format('lll')}\r\n            </div>\r\n            <div className='fowardCont'>\r\n              <ReplyIcon\r\n                className='forward'\r\n                onClick={() => {\r\n                  setForward({\r\n                    type:\r\n                      message?.type ||\r\n                      (message?.messages && message?.messages[0]?.type),\r\n                    data:\r\n                      message?.data ||\r\n                      message.text ||\r\n                      (message?.messages &&\r\n                        message?.messages[0]?.[message?.messages[0]?.type]),\r\n                  });\r\n                  setVisible(true);\r\n                }}\r\n              />\r\n              <ReplyAllIcon\r\n                className='forward'\r\n                onClick={() => setShowSelector(true)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Message;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\conversations\\Conversation.jsx",["291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307","308","309"],"import axios from 'axios';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport './conversation.css';\r\nimport {\r\n  msgUrl,\r\n  alertMsgUrl,\r\n  pinChatUrl,\r\n  markChatUrl,\r\n  stickComment,\r\n  fetchStickComment\r\n} from '../../serviceUrls/Message-Services';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport { io } from 'socket.io-client';\r\nimport moment from 'moment';\r\nimport PushPinIcon from '@mui/icons-material/PushPin';\r\nimport Button from '@mui/material/Button';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport Badge from '@mui/material/Badge';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport StickComments from \"../dialogs/StickComments\"\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\nconst HtmlTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: \"rgba(80, 80, 80, 0.92)\",\r\n    color: \"#ffff\",\r\n    fontWeight: \"500\",\r\n    maxWidth: 350,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid rgba(80, 80, 80, 0.92)\",\r\n    overflowX: \"hidden\",\r\n    overflowY: \"scroll\",\r\n    maxHeight: \"300px\"\r\n  },\r\n}));\r\n// import useSound from 'use-sound';\r\n\r\n// import notification from '../../assets/notification.mp3';\r\n\r\nexport default function Conversation({\r\n  apiUrl,\r\n  conversation,\r\n  currentUser,\r\n  currentChat,\r\n  finalMessage,\r\n  arrivalMessage,\r\n  alertMsg,\r\n  alert,\r\n  setAlert,\r\n  setPinned,\r\n  setMarkChat,\r\n  setAlertUpdate,\r\n}) {\r\n  const [msg, setMsg] = useState([]);\r\n  const [alertText, setAlertText] = useState([]);\r\n  const [alertMessage, setAlertMessage] = useState([]);\r\n  // const [hide, setHide] = useState(false);\r\n  const [msgCount, setMsgCount] = useState();\r\n\r\n  const socket = useRef();\r\n  const alertIcon = useRef();\r\n  const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n  const headerKey = {\r\n    Accept: 'application/json',\r\n    Authorization:\r\n      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxMTYyMWZkZi0wYjJjLTQxYzAtOWZmMS1iZDk5NWZmYTQ2ZTUiLCJ1bmlxdWVfbmFtZSI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwibmFtZWlkIjoib2ZmaWNlQHR1dG9ycG9pbnQuaW4iLCJlbWFpbCI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwiYXV0aF90aW1lIjoiMDgvMDQvMjAyMSAwODoxMTowMSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFETUlOSVNUUkFUT1IiLCJleHAiOjI1MzQwMjMwMDgwMCwiaXNzIjoiQ2xhcmVfQUkiLCJhdWQiOiJDbGFyZV9BSSJ9.lSSh1EL29ksj23Y_rTSrLhYVwhOFyddK1c6bKU-_HB4',\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const [stickComments,setStickComments] =useState();\r\n  const [noteDetails, setNoteDetails] = useState();\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  console.log(msg);\r\n  // useEffect(() => {\r\n  //   const friendId = conversation.id;\r\n\r\n  //   const getUser = async () => {\r\n  //     try {\r\n  //       const res = await axios(getCustomersUrl + `/${friendId}`, {headers: {...headerKey}});\r\n  //       setUser(res.data);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getUser();\r\n  // }, [conversation]);\r\n\r\n  // useEffect(() => {\r\n  //   socket.current = io('ws://localhost:8900');\r\n  //   socket.current.on('getAlert', (msg) => {\r\n  //     // storeFiles(msg); //store incoming files data to excel\r\n  //     setAlertMsg([msg]);\r\n  //   });\r\n  // }, []);\r\n\r\n  // const [play] = useSound(notification);\r\n\r\n  // useEffect(() => {\r\n  //   const getMessages = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(\r\n  //         msgUrl + `/${conversation?.wa_id}?page=0&limit=20`,\r\n  //         {\r\n  //           headers: { ...headerKey },\r\n  //         }\r\n  //       );\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getMessages();\r\n  // }, [newNotification, alertMsg]);\r\n\r\n  // console.log(arrivalMessage.length);\r\n\r\n  // // useEffect(() => {\r\n  // //   play();\r\n  // // }, [arrivalMessage?.length])\r\n\r\n  // useEffect(() => {\r\n  //   const getAlert = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(alertMsgUrl + `/${conversation?.wa_id}`, {\r\n  //         headers: {},\r\n  //       });\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //       setMsgCount(() => res?.data?.filter((i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id).length);\r\n  //       setHide(false);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getAlert();\r\n  // }, [alertMsg, newNotification]);\r\n\r\n  // console.log(alertMessage);\r\n\r\n  // useEffect(() => {\r\n  //   setMsgCount(\r\n  //     () =>\r\n  //       alertMessage?.filter(\r\n  //         (i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id\r\n  //       ).length\r\n  //   );\r\n  // }, [alertMessage, alertMsg, newNotification]);\r\n\r\n  const updateAlert = async (wa_id) => {\r\n    if (conversation.newMsgCount > 0) {\r\n      try {\r\n        const payload = {\r\n          newMsgCount: 0,\r\n          timestamp: Math.floor(new Date().getTime() / 1000.0),\r\n        };\r\n        const response = await axios.put(\r\n          `${apiUrl || localStorage.getItem('api')}/api/conversations/${wa_id}`,\r\n          payload,\r\n          {\r\n            headers: {},\r\n          }\r\n        );\r\n        setAlertUpdate(Math.floor(new Date().getTime() / 1000.0));\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  console.log(alertMessage);\r\n\r\n  const diff_hours = (dt1) => {\r\n    var diff = new Date().getTime() / 1000.0 - dt1;\r\n    diff /= 60 * 60;\r\n    return Math.abs(Math.round(diff));\r\n  };\r\n\r\n  // const filteredArrivalMessage = alertMsg?.filter(\r\n  //   (i) => i.wAid === conversation.wAid\r\n  // );\r\n\r\n  // const newNoti = (id) => {\r\n  //   let filtered = alertText.filter((i) => i.waId === id);\r\n  //   console.log(filtered);\r\n  //   return { arr: filtered, len: filtered.length };\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   setAlertText([...alertText, ...alertMsg]);\r\n  //   setAlert(alert + 1);\r\n  //   // return () => {\r\n  //   //   setAlertText([])\r\n  //   // }\r\n  // }, [alertMsg]);\r\n\r\n  // let filteredAlert = alertText?.filter((i) => i.waId === conversation?.wAid);\r\n\r\n  // console.log(alertMsg);\r\n  // console.log(alertText);\r\n  // console.log(alert);\r\n\r\n  const handlePinChat = async (waId, pin) => {\r\n    const payload = {\r\n      pinContact: !pin,\r\n    };\r\n    const res = await axios.put(pinChatUrl + `/${waId}`, payload, {\r\n      headers: '',\r\n    });\r\n    setPinned(res?.data?.updatedAt);\r\n  };\r\n\r\n  const handleMarkChat = async (waId, markChat) => {\r\n    const payload = {\r\n      markAsUnread: !markChat,\r\n    };\r\n    const res = await axios.put(markChatUrl + `/${waId}`, payload, {\r\n      headers: '',\r\n    });\r\n    setMarkChat(res?.data?.updatedAt);\r\n  };\r\n\r\n  const handleStickComments = async (whatsId, stickComments) => {\r\n    const payload = {\r\n      comments: stickComments,\r\n    };\r\n    const res = await axios.put(stickComment + `/${whatsId}`, payload, {\r\n      headers: '',\r\n    });\r\n    fetchStickComments(whatsId)\r\n    // setStickComments(res?.data?.comments);\r\n    handleClose()\r\n  };\r\n\r\n  const fetchStickComments = async (waId) => {\r\n  \r\n    const res = await axios.get(fetchStickComment + `/${waId}`);\r\n    if(res.data){\r\n      setStickComments(res.data)\r\n    }\r\n   \r\n  };\r\n\r\n  const getNoteDetails = async (waId) => {\r\n    try{\r\n      const response = await axios.get(`${localStorage.getItem(\"api\")}/api/messages/getNotes/${waId}`);\r\n      setNoteDetails(response.data);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n\r\n  }\r\n\r\n  const shortText = (text) => {\r\n    if(text.length > 17) {\r\n      return `${text.slice(0, 17)}..`;\r\n    }\r\n    else if(text.length <= 17) {\r\n      return text;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        currentChat?.wa_id == conversation?.wa_id\r\n          ? 'conversation highlighted'\r\n          : 'conversation'\r\n      }\r\n      onClick={() => {\r\n        updateAlert(conversation?.wa_id);\r\n      }}\r\n    >\r\n      <div className='userTab'>\r\n        <Avatar className='conversationImg'>\r\n          {conversation?.name?.slice(0, 2)}\r\n        </Avatar>\r\n        <div style={{ paddingBottom: '5px' }}>\r\n          <div className='conversationName'>{`${\r\n            conversation?.name\r\n          }${conversation?.wa_id.slice(0, 3)}`}\r\n            <HtmlTooltip\r\n                placement=\"right\"\r\n                title={\r\n                  <>\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                    {noteDetails && noteDetails.length > 0 ? 'Notes: ' : 'No Notes'}\r\n                    </Typography>\r\n                    {noteDetails && noteDetails.length > 0 && (\r\n                      <Typography\r\n                        color=\"inherit\"\r\n                        style={{\r\n                          fontSize: \"13.5px\",\r\n                          fontWeight: \"600\",\r\n                          marginBottom: \"5px\",\r\n                          maxHeight:\"500px\",\r\n                          overflowY:\"scroll\"\r\n                        }}\r\n                      >\r\n                        {noteDetails.map((i) => \r\n                        <div\r\n                          style={{ display: 'flex', justifyContent: 'space-between', fontSize: \"12px\", fontWeight: \"normal\", padding: '8px 5px', borderBottom: '1px solid #ffff' }}\r\n                        >\r\n                          <div style={{display: 'flex', flex: '60%', fontSize: '13px', fontWeight: '600', color: i?.clientNotes?.priority === 'high' ? 'red' : i?.clientNotes?.priority === 'medium' ? 'royalblue' : '#565555'}}>{i?.clientNotes?.noteText}</div>\r\n                          <div style={{display: 'flex', alignSelf: 'self-end', fontSize: '11px'}}>\r\n                            {moment(new Date(i.timestamp * 1000)).format('lll')}\r\n                          </div>\r\n                        </div>)}\r\n                      </Typography>\r\n                    )}\r\n                   \r\n                  </>\r\n                }\r\n              >\r\n                <InfoIcon\r\n                  fontSize=\"small\"\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    cursor: \"pointer\",\r\n                    marginLeft: \"1px\",\r\n                  }}\r\n                  onMouseEnter={() => getNoteDetails(conversation?.wa_id)}\r\n                />\r\n            </HtmlTooltip>\r\n          </div>\r\n          <div style={{ fontSize: '12px' }}>\r\n            {`ED${conversation?.uid}`}\r\n            <span className='usertag_'>{shortText(conversation?.tags)}</span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            flex: '35%',\r\n            flexDirection: 'column',\r\n            justifyContent: 'flex-end',\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              display: 'flex',\r\n              flex: '1',\r\n              justifyContent: 'flex-end',\r\n              padding: '10px',\r\n              fontSize: '12px',\r\n              fontWeight: 'normal',\r\n            }}\r\n          >\r\n            {conversation?.pinContact && (\r\n              <span\r\n                style={{\r\n                  marginRight: '14px',\r\n                  transform: 'rotate(45deg)',\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                <PushPinIcon style={{ fontSize: '15px' }} />\r\n              </span>\r\n            )}\r\n            {diff_hours(conversation?.timestamp) < 24\r\n              ? moment(\r\n                  new Date(conversation?.timestamp * 1000).toISOString()\r\n                ).format('hh:mm a')\r\n              : moment(\r\n                  new Date(conversation?.timestamp * 1000).toISOString()\r\n                ).format('L')}\r\n          </span>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              alignSelf: 'flex-end',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                padding: '0px 10px',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              {conversation.markAsUnread && (\r\n                <Badge badgeContent={''} color='primary'></Badge>\r\n              )}\r\n            </span>\r\n            {conversation.newMsgCount > 0 && (\r\n              <span\r\n                style={{\r\n                  padding: '0px 10px',\r\n                  marginRight: '5px',\r\n                }}\r\n              >\r\n                <Badge\r\n                  badgeContent={conversation.newMsgCount}\r\n                  color='success'\r\n                ></Badge>\r\n              </span>\r\n            )}\r\n            <span style={{ paddingRight: '5px' }}>\r\n              <KeyboardArrowDownIcon\r\n                fontSize='small'\r\n                color='action'\r\n                onClick={(e) => {\r\n                  e.stopPropagation(); \r\n                  handleClick(e);\r\n                }}\r\n              />\r\n              <Menu\r\n                id='basic-menu'\r\n                anchorEl={anchorEl}\r\n                open={open}\r\n                onClose={handleClose}\r\n                MenuListProps={{\r\n                  'aria-labelledby': 'basic-button',\r\n                }}\r\n              >\r\n                <MenuItem\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handlePinChat(\r\n                      conversation?.wa_id,\r\n                      conversation?.pinContact\r\n                    );\r\n                    handleClose();\r\n                  }}\r\n                >\r\n                  {conversation?.pinContact ? 'Unpin chat' : 'Pin chat'}\r\n                </MenuItem>\r\n                <MenuItem\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleMarkChat(\r\n                      conversation?.wa_id,\r\n                      conversation?.markAsUnread\r\n                    );\r\n                    handleClose();\r\n                  }}\r\n                >\r\n                  {conversation?.markAsUnread\r\n                    ? 'Mark as read'\r\n                    : 'Mark as unread'}\r\n                </MenuItem>\r\n                <MenuItem\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    // setWhatsId(conversation?.wa_id)\r\n                    // fetchStickComments(conversation?.wa_id)\r\n                  }}\r\n                >\r\n                  <StickComments handleStickComments={handleStickComments} fetchStickComments={fetchStickComments} wa_id={conversation?.wa_id} setStickComments={setStickComments} stickComments={stickComments}/>\r\n                  {/* {conversation?.pinContact ? 'Unpin chat' : 'Pin chat'} */}\r\n                </MenuItem>\r\n              </Menu>\r\n            </span>\r\n          </div>\r\n          {/* {filteredAlert.length > 0 ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'flex-end',\r\n                padding: '0px 10px 0px 0px',\r\n              }}\r\n              ref={alertIcon}\r\n            >\r\n              <NotificationsIcon style={{ color: '#03D755' }} />\r\n            </div>\r\n          ) : null} */}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\notes\\NoteHistory.jsx",["310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332"],"import React, { useState, useRef, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport './noteHistory.css';\r\nimport moment from 'moment';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport CommentOutlinedIcon from '@mui/icons-material/CommentOutlined';\r\nimport Link from '@mui/material/Link';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MoreMenu from './MoreMenu';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\n\r\nconst NoteHistory = ({ setCurrentChat, setFinalMessage, scrollRef, setScrollView_, setPage }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const openMore = Boolean(anchorEl);\r\n  const [allNotes, setAllNotes] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const descriptionElementRef = useRef(null);\r\n  const [val, setVal] = useState(1);\r\n  const [count, setCount] = useState(0);\r\n  const [notePage, setNotePage] = useState(1);\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n  const [closeBtnDisabled, setCloseBtnDisabled] = useState(false);\r\n  const [clientAmt, setClientAmt] = useState();\r\n  const [currency, setCurrency] = useState('USD');\r\n  const [scroll, setScroll] = useState('paper');\r\n  const [errorMsg, setErrorMsg] = useState('Please enter your name here!');\r\n  let deviceNo = localStorage.getItem('device');\r\n  const ITEM_HEIGHT = 48;\r\n\r\n  const handleClickOpen = () => {\r\n    getAllNotes();\r\n    setOpen(true);\r\n    setIsLoading(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setAllNotes([]);\r\n    // setFormLink('');\r\n    // setBtnDisabled(false);\r\n  };\r\n\r\n  const handleClickMore = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleCloseMore = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  const getAllNotes = async () => {\r\n    try {\r\n      const res = await axios.get(\r\n        `${localStorage.getItem(\"api\")}/api/messages/getAllNotes`,\r\n        {\r\n          params: {\r\n            page: val,\r\n            limit: 10,\r\n          },\r\n        },\r\n        {\r\n          headers: '',\r\n        }\r\n      );\r\n      setAllNotes(res?.data?.result);\r\n      setIsLoading(false);\r\n      setCount(res?.data?.length);\r\n      setNotePage(val);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleNoteHistory = async (event, value) => {\r\n    setIsLoading(true);\r\n    setNotePage(value);\r\n    try {\r\n      const res = await axios.get(\r\n        `${localStorage.getItem(\"api\")}/api/messages/getAllNotes`,\r\n        {\r\n          params: {\r\n            page: value,\r\n            limit: 10,\r\n          },\r\n        },\r\n        {\r\n          headers: '',\r\n        }\r\n      );\r\n      setAllNotes(res?.data?.result);\r\n      setIsLoading(false);\r\n      setVal(value);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\nconst handleMarkAsSolved = async (_id) => {\r\n  let payload = {\r\n    _id: _id\r\n  }\r\n  try {\r\n    const res = await axios.post(`${localStorage.getItem(\"api\")}/api/messages/markNotesAsResolved`, payload, {\r\n      headers: ''\r\n    });\r\n    getAllNotes();\r\n  }\r\n  catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n//   const openInChat = async (wa_id, time) => {\r\n//     try {\r\n//         const res_ = await axios.get(`${localStorage.getItem(\"api\")}/api/conversations5/findContact/${wa_id}`);\r\n//         setCurrentChat(res_?.data?.result[0]);\r\n        \r\n//         const res = await axios.get(`${localStorage.getItem(\"api\")}/api/messages5/filteredMsg/${wa_id}/${time}`);\r\n//         setFinalMessage(res?.data);\r\n//         handleClose();\r\n//         setScrollView_(false);\r\n//         window.scrollTo(0, scrollRef.current.offsetTop);\r\n//         // scrollRef.current?.scrollIntoView({behavior: \"smooth\", block: \"start\", inline: \"nearest\"});\r\n//     } catch (err) {\r\n//         console.log(err);\r\n//     }\r\n//   }\r\n\r\n  return (\r\n    <div>\r\n      <CommentOutlinedIcon\r\n        fontSize='medium'\r\n        color='primary'\r\n        style={{cursor: 'pointer', display: 'flex'}}\r\n        onClick={handleClickOpen}\r\n      />\r\n      <Dialog\r\n        open={open}\r\n        onClose={handleClose}\r\n        scroll={scroll}\r\n        aria-labelledby='scroll-dialog-title'\r\n        aria-describedby='scroll-dialog-description'\r\n      >\r\n        <DialogTitle\r\n          style={{\r\n            fontSize: '16px',\r\n            display: 'flex',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'center',\r\n            padding: '16px 10px 10px 24px',\r\n          }}\r\n          id='scroll-dialog-title'\r\n        >\r\n          All Notes:\r\n        </DialogTitle>\r\n\r\n        <DialogContent\r\n          dividers={scroll === 'paper'}\r\n          style={{ padding: '16px 0px' }}\r\n        >\r\n          {isLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                padding: '255px 210px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <DialogContentText\r\n              id='scroll-dialog-description'\r\n              ref={descriptionElementRef}\r\n              tabIndex={-1}\r\n            >\r\n              <>\r\n                {allNotes &&\r\n                  allNotes.map((i, j) => {\r\n                    return (\r\n                      <div className='tutorlist_'>\r\n                        <div className='userTab'>\r\n                          <Avatar className='conversationImg_'>\r\n                            {i?.name?.slice(0, 1)}\r\n                          </Avatar>\r\n                          <div style={{ paddingBottom: '5px' }}>\r\n                            <div className='conversationName_'>\r\n                              {i?.name}\r\n                              <div style={{ fontSize: '10px' }}>\r\n                                {moment(new Date(i?.timestamp * 1000)).format(\r\n                                  'lll'\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                          <div style={{display: 'flex', flexDirection: 'row', flex:'0%', justifyContent: 'flex-end', alignSelf: 'center', marginRight: '10px'}}>\r\n                            {i?.clientNotes?.status && i?.clientNotes?.status === 'resolved' ? <span style={{color: '#3c4043', opacity: '0.8', fontStyle: 'italic', fontSize: '10px'}}>Marked as resolved</span> : <DoneIcon fontSize='small' color='success' style={{cursor: 'pointer'}} onClick={() => handleMarkAsSolved(i?._id)} />}\r\n                          </div>\r\n                        </div>\r\n                        <div\r\n                          style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            fontSize: '13px',\r\n                            marginTop: '5px',\r\n                            marginLeft: '2px',\r\n                            justifyContent: 'space-between',\r\n                            alignItems: 'center',\r\n                            color: i?.clientNotes?.priority === 'high' ? 'red' : i?.clientNotes?.priority === 'medium' ? 'royalblue' : '#565555',\r\n                            opacity: i?.clientNotes?.status && i?.clientNotes?.status === 'resolved' ? 0.5 : 1\r\n                          }}\r\n                        >\r\n                          {i?.clientNotes?.noteText}\r\n                          <span>\r\n                          <MoreMenu data = {i} setCurrentChat = {setCurrentChat} setFinalMessage = {setFinalMessage} scrollRef = {scrollRef} setScrollView_ = {setScrollView_} handleCloseModal = {handleClose} setAllNotes = {setAllNotes} setPage = {setPage} />\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                <Pagination\r\n                  style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    padding: '20px 45px 20px 30px',\r\n                  }}\r\n                  count={Math.ceil(count / 10)}\r\n                  page={notePage}\r\n                  onChange={handleNoteHistory}\r\n                />\r\n              </>\r\n            </DialogContentText>\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Close</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\nexport default NoteHistory;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\forms\\FormCreation.jsx",["333","334","335","336","337","338","339","340","341","342","343","344"],"import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DynamicFormIcon from '@mui/icons-material/DynamicForm';\r\nimport Link from '@mui/material/Link';\r\n\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport NativeSelect from '@mui/material/NativeSelect';\r\nimport { createSessionUrl } from '../../serviceUrls/Message-Services';\r\nimport { NAME_SPACE, WAID } from '../../utils/variables';\r\n\r\n\r\nconst FormCreation = ({ clientId, clientWaId, clientName, agent }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [sessionData, setSessionData] = useState([]);\r\n  const [formLink, setFormLink] = useState();\r\n  const [btnDisabled, setBtnDisabled] = useState(false);\r\n  const [closeBtnDisabled, setCloseBtnDisabled] = useState(false);\r\n  const [clientAmt, setClientAmt] = useState();\r\n  const [currency, setCurrency] = useState('USD')\r\n  const [values, setValues] = useState({\r\n    numberformat: '1320',\r\n  });\r\n  const [executive, setExecutive] = useState();\r\n  const [errorMsg, setErrorMsg] = useState('Please enter your name here!');\r\n  let deviceNo = localStorage.getItem('device');\r\n  const linkBaseURL = `https://client-response.tutorpoint.in/d${deviceNo}/live-session-form`;\r\n\r\n  const handleClickOpen = () => {\r\n    getSessionDet();\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setFormLink('');\r\n    setBtnDisabled(false);\r\n  };\r\n\r\n  const handleChangeAmt = (event) => {\r\n    console.log(event.target.value)\r\n    setClientAmt(event.target.value);\r\n  };\r\n\r\n  const handleChangeCurrency = (event) => {\r\n    setCurrency(event.target.value);\r\n    console.log(event.target.value)\r\n  };\r\n\r\n  //session form link creation\r\n  const getSessionDet = async () => {\r\n    try {\r\n      const res = await axios.get(\r\n        `${localStorage.getItem('api')}/api/sessions/getSessionDetails/${clientId}`,\r\n        {\r\n          headers: '',\r\n        }\r\n      );\r\n      setSessionData(res?.data?.result);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const executiveName = (event) => {\r\n    if(event.target.value) {\r\n     setExecutive(event.target.value);\r\n     setErrorMsg(null);\r\n    }\r\n    else {\r\n      setErrorMsg('Please enter your name here!');\r\n    }\r\n  }\r\n\r\n  const linkGenerator = async () => {\r\n    setBtnDisabled(true);\r\n    setCloseBtnDisabled(true);\r\n    const payload = {\r\n      session_id: sessionData.length > 0 ? +sessionData[sessionData.length - 1]?.session_id + 1 + '' : clientId + '1010',\r\n      client_id: clientId,\r\n      client_waId: clientWaId,\r\n      client_name: clientName,\r\n      session_agent: agent,\r\n      opExecutive: executive\r\n      // client_amount: clientAmt,\r\n      // currency: currency\r\n    };\r\n    try {\r\n      const res = await axios.post(\r\n        createSessionUrl,\r\n        payload,\r\n        {\r\n          headers: '',\r\n        }\r\n      );\r\n      \r\n      // generating g-drive link for session form\r\n      const payload2 = {\r\n        sessionId: res?.data?.result.session_id,\r\n        clientId: res?.data?.result.client_id\r\n      }\r\n      const res2 = await axios.post(`${localStorage.getItem('api')}/api/sessions/folderBuilder`, payload2);\r\n      \r\n      const link = `${linkBaseURL}/${res?.data?.result.session_id}/${res?.data?.result.client_id}?agent=success&key=poc_y6d_ui9`;\r\n      const tempBody = {\r\n        name: clientName,\r\n        from: '',\r\n        wa_id: clientWaId,\r\n        templateName: `clientsessionform_create_send_${WAID}`,\r\n        templateText: \"Hi *{{1}}*, This is Tutorpoint\\n\\nPlease click on the button below to submit your assignment work or book a live question session with us. \\n\\nAfter submitting the request, wait for sometime to get the confirmation about the price and deadline from us. We will start only after you have confirmed the price and deadline of session with our agent.\\n\\nPlease fill the form carefully. For any issues, you can call us by clicking the button below.\\n\\n\",\r\n        template: {\r\n          namespace: NAME_SPACE,\r\n          language: \"en\",\r\n        },\r\n        param1: \"Session Request \" + res?.data?.result.session_id,\r\n        param2: clientName,\r\n        param3: `d${deviceNo}/live-session-form/${res?.data?.result.session_id}/${res?.data?.result.client_id}`,\r\n        button: '',\r\n        timestamp: '',\r\n        operatorName: '',\r\n        isOwner: true,\r\n        status: '',\r\n        ticketId: '',\r\n        eventType: 'template',\r\n      };\r\n      const sendTemplate = await axios.post(`${localStorage.getItem('api')}/api/messages/clientTemplate`, tempBody, {\r\n        headers: '',\r\n      }\r\n      );\r\n      setFormLink(link);\r\n      setBtnDisabled(true);\r\n      setCloseBtnDisabled(false);\r\n    } catch (err) {\r\n      setBtnDisabled(false);\r\n      setCloseBtnDisabled(false);\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DynamicFormIcon\r\n        fontSize='medium'\r\n        className='templateMsg'\r\n        onClick={handleClickOpen}\r\n      />\r\n      <Dialog open={open}>\r\n        <DialogTitle>Create Form Link</DialogTitle>\r\n        <DialogContent style={{ marginBottom: '20px', marginTop: '20px' }}>\r\n          <label style={{ fontSize: '13px' }}>Session ID</label>\r\n          <TextField\r\n            // autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            // label=\"Session ID\"\r\n            // placeholder=\"Session ID\"\r\n            type='text'\r\n            value={sessionData.length > 0 ? +sessionData[sessionData.length - 1]?.session_id + 1 + '' : clientId + '1010'}\r\n            fullWidth\r\n            variant='standard'\r\n            style={{ marginBottom: '30px' }}\r\n          />\r\n          <label style={{ fontSize: '13px' }}>Client ID</label>\r\n          <TextField\r\n            // autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            // label=\"Session ID\"\r\n            // placeholder=\"Session ID\"\r\n            type='text'\r\n            value={clientId}\r\n            style={{ marginBottom: '27px' }}\r\n            fullWidth\r\n            variant='standard'\r\n          />\r\n          <label style={{ fontSize: '13px' }}>Agent/Executive Name</label>\r\n          <TextField\r\n            // autoFocus\r\n            margin='dense'\r\n            id='name'\r\n            // label=\"Session ID\"\r\n            // placeholder=\"Agent name\"\r\n            type='text'\r\n            // value={executive}\r\n            onChange={executiveName}\r\n            // style={{ marginBottom: '27px' }}\r\n            fullWidth\r\n            required\r\n            variant='standard'\r\n          />\r\n          {errorMsg && <p style={{fontSize: '11px', color: 'red', margin: '0px 0px 5px 0px'}}>{errorMsg}</p>}\r\n          {/* <label style={{ fontSize: '13px' }}>Client Amount</label>\r\n          <FormControl fullWidth style={{display: 'flex', flexDirection: 'row'}}>\r\n        <NativeSelect\r\n          defaultValue='USD'\r\n          inputProps={{\r\n            name: 'amount',\r\n            id: 'uncontrolled-native',\r\n          }}\r\n          style={{ width: '20%', padding: '6px 5px', marginTop: '8px', fontSize: '14px'}}\r\n          onChange={handleChangeCurrency}\r\n        >\r\n          <option value='USD'>USD</option>\r\n          <option value='EUR'>EUR</option>\r\n          <option value='BHD'>BHD</option>\r\n          <option value='INR'>INR</option>\r\n          <option value='CAD'>CAD</option>\r\n          <option value='AUD'>AUD</option>\r\n          <option value='GBP'>GBP</option>\r\n          <option value='AED'>AED</option>\r\n        </NativeSelect>\r\n          <TextField\r\n            margin='dense'\r\n            id='amount'\r\n            // label=\"Session ID\"\r\n            // placeholder=\"Session ID\"\r\n            // name='numberformat'\r\n            value={clientAmt}\r\n            // value={values.numberformat}\r\n            style={{ marginTop: '18px', marginBottom: '0px', marginLeft: '5px' }}\r\n            onChange={handleChangeAmt}\r\n            fullWidth\r\n            variant='standard'\r\n          />\r\n      </FormControl> */}\r\n          {formLink ? (\r\n            <>\r\n              <p style={{ fontSize: '13px', marginBottom: '8px', marginTop: '25px' }}>Form Link</p>\r\n              <Link\r\n                underline='always'\r\n                style={{ cursor: 'pointer' }}\r\n                onClick={() => window.open(formLink, '_blank')}\r\n              >\r\n                {formLink?.slice(0, 41).concat(' ...')}\r\n              </Link>\r\n            </>\r\n          ) : null}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          {closeBtnDisabled ? <Button disabled>Creating...</Button> : <Button onClick={handleClose}>Close</Button>}\r\n          {!btnDisabled && !errorMsg && <Button onClick={linkGenerator}>Create</Button>}\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\nexport default FormCreation;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\tutorContacts\\TutorContact.jsx",["345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385","386","387"],"import axios from \"axios\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport \"./tutorContacts.css\";\r\nimport {\r\n  msgUrl,\r\n  alertMsgUrl,\r\n  pinChatUrl,\r\n  markChatUrl,\r\n} from \"../../serviceUrls/Message-Services\";\r\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\r\nimport { io } from \"socket.io-client\";\r\nimport moment from \"moment\";\r\nimport PushPinIcon from \"@mui/icons-material/PushPin\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Rating from \"@mui/material/Rating\";\r\nimport Box from \"@mui/material/Box\";\r\nimport StarIcon from \"@mui/icons-material/Star\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport ToggleOnIcon from \"@mui/icons-material/ToggleOn\";\r\nimport ToggleOffIcon from \"@mui/icons-material/ToggleOff\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\r\nimport Reason from \"../dialogs/Reason\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { NAME_SPACE } from \"../../utils/variables\";\r\n// import { set } from \"mongoose\";\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n// import useSound from 'use-sound';\r\n\r\n// import notification from '../../assets/notification.mp3';\r\n\r\nconst HtmlTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: \"rgba(80, 80, 80, 0.92)\",\r\n    color: \"#ffff\",\r\n    fontWeight: \"500\",\r\n    maxWidth: 350,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid rgba(80, 80, 80, 0.92)\",\r\n    overflowX: \"hidden\",\r\n    overflowY: \"scroll\",\r\n    maxHeight: \"300px\",\r\n  },\r\n}));\r\n\r\nconst TutorContact = ({\r\n  apiUrl,\r\n  conversation,\r\n  setTutorTagUpdated,\r\n  setTutorRatingUpdated,\r\n  updated,\r\n  setUpdated,\r\n}) => {\r\n  const [msg, setMsg] = useState([]);\r\n  // const [alertText, setAlertText] = useState([]);\r\n  const [alertMessage, setAlertMessage] = useState([]);\r\n  // const [hide, setHide] = useState(false);\r\n  const [msgCount, setMsgCount] = useState();\r\n  const [value, setValue] = useState(2);\r\n  const [hover, setHover] = useState(-1);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [tagValue, setTagValue] = useState();\r\n  const [ratingVal, setRatingVal] = useState();\r\n  const [visibleCircularbar, setVisibleCircularbar] = useState(false);\r\n  const [checked, setChecked] = useState();\r\n  const [writerStatus, setWriterStatus] = useState(conversation?.writer);\r\n  const [reason, setReason] = useState(false);\r\n  const [reasonVal, setReasonVal] = useState(\"\");\r\n  const [reasonDialog, setReasonDialog] = useState(false);\r\n  const [editEmailVal,setEditEmailVal]=useState(false);\r\n  const [editPhoneVal,setEditPhoneVal]=useState(false);\r\n  const [emailVal,setEmailVal]=useState();\r\n  const [phoneVal,setPhoneVal]=useState();\r\n\r\n\r\n  const snackBarPos = {\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n  };\r\n  const { vertical, horizontal } = snackBarPos;\r\n\r\n  const [alertText, setAlertText] = useState(\"\");\r\n\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const handleCloseSnackBar = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  const handleToggle = (e) => {\r\n    e.preventDefault();\r\n    setReasonDialog(true);\r\n  };\r\n\r\n  const handleChangeStatus = async (tutorId, status_) => {\r\n    // setChecked(event.target.checked);\r\n    try {\r\n      // const payload = {\r\n      //   status: status_,\r\n      // };\r\n      // await axios.put(\r\n      //   `https://annular-arena-331607.el.r.appspot.com/api/tutor/setTutorStatus/${tutorId}`,\r\n      //   payload\r\n      // );\r\n\r\n      // sending template for tutor active or inactive\r\n      if (conversation?.wa_id) {\r\n        console.log({ reasonVal: reasonVal });\r\n        const payloadActiveInactiveTutor = {\r\n          name: conversation?.name,\r\n          from: \"\",\r\n          wa_id: conversation?.wa_id,\r\n          templateName: \"tutor_inactive_active_template\",\r\n          templateText: `Hi ${conversation.name}, Your account is ${\r\n            status_ === \"active\" ? \"unblocked\" : \"blocked\"\r\n          } ${\r\n            reasonVal !== undefined && reasonVal?.target?.value?.length !== 0\r\n              ? `Reason: ${reasonVal?.target?.value}`\r\n              : \" \"\r\n          }`,\r\n          template: {\r\n            namespace: NAME_SPACE,\r\n            language: \"en\",\r\n          },\r\n          param1: status_ === \"active\" ? \"ACTIVATED\" : \"BLOCKED\",\r\n          param2: conversation.name,\r\n          param3: status_ === \"active\" ? \"activated\" : \"blocked\",\r\n          param4:\r\n            reasonVal !== undefined && reasonVal?.target?.value?.length !== 0\r\n              ? `Reason: ${reasonVal?.target?.value} `\r\n              : \" \",\r\n          button: \"\",\r\n          timestamp: \"\",\r\n          operatorName: \"\",\r\n          isOwner: true,\r\n          status: \"\",\r\n          ticketId: \"\",\r\n          eventType: \"template\",\r\n        };\r\n\r\n        await axios\r\n          .post(\r\n            `${localStorage.getItem(\r\n              \"api\"\r\n            )}/api/messages/tutorActiveInactiveTemplate`,\r\n            payloadActiveInactiveTutor,\r\n            {\r\n              headers: \"\",\r\n            }\r\n          )\r\n          .then(\r\n            async (res) => {\r\n              const payload = {\r\n                status: status_,\r\n              };\r\n              await axios.put(\r\n                `${localStorage.getItem('api')}/api/tutor/setTutorStatus/${tutorId}`,\r\n                payload\r\n              );\r\n              console.log(res);\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            }\r\n          );\r\n      } else {\r\n        console.log(\"WhatsApp number is not valid\");\r\n        alert(\"Invalid WhatsApp Number!\");\r\n      }\r\n\r\n      setChecked(status_);\r\n      setUpdated(!updated);\r\n      setVisibleCircularbar(false);\r\n      setReason(false);\r\n      setReasonDialog(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    // let val= templateMessage.filter(el=>el.name===\"tutor_inactive_active_template\")\r\n    if (reason) {\r\n      setVisibleCircularbar(true);\r\n      let payload = {\r\n        wa_id: `+${conversation?.wa_id}`,\r\n      };\r\n\r\n      const res = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/conversations/contactValidation`,\r\n        payload\r\n      );\r\n      if (res.data.contacts[0].status === \"invalid\") {\r\n        setReasonDialog(false);\r\n        setReason(false);\r\n        setVisibleCircularbar(false);\r\n        setOpenSnackBar(true);\r\n        setAlertText(res.data.contacts[0].status + \" contact\");\r\n      } else {\r\n        console.log({ valtest: \"done\" });\r\n        if (conversation?.tutor_status === \"inactive\") {\r\n          handleChangeStatus(conversation?.tutor_id, \"active\");\r\n        } else {\r\n          handleChangeStatus(conversation?.tutor_id, \"inactive\");\r\n        }\r\n      }\r\n    }\r\n  }, [reason]);\r\n\r\n  const handleChangeWriterStatus = async (tutorId, status_) => {\r\n    // setChecked(event.target.checked);\r\n    try {\r\n      const payload = {\r\n        status: status_,\r\n      };\r\n      await axios.put(\r\n        `${localStorage.getItem('api')}/api/tutor/setTutorWriterStatus/${tutorId}`,\r\n        payload\r\n      );\r\n      setWriterStatus(status_);\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const [openTag, setOpenTag] = useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpenTag(true);\r\n  };\r\n\r\n  const _handleClose = () => {\r\n    setOpenTag(false);\r\n  };\r\n\r\n  const _handleAddTag = async () => {\r\n    const payload = {\r\n      tag: tagValue,\r\n    };\r\n    try {\r\n      const res = await axios.put(\r\n        `${localStorage.getItem('api')}/api/tutor/addTag/${conversation?.tutor_id}`,\r\n        payload\r\n      );\r\n      setOpenTag(false);\r\n      setTutorTagUpdated(tagValue);\r\n    } catch (err) {\r\n      console.log(err.Error);\r\n    }\r\n  };\r\n\r\n  const rateHandler = async (e) => {\r\n    if (ratingVal) {\r\n      const payload = {\r\n        rating: ratingVal,\r\n      };\r\n      try {\r\n        const res = await axios.put(\r\n          `${localStorage.getItem('api')}/api/tutor/setTutorRating/${conversation?.tutor_id}`,\r\n          payload\r\n        );\r\n        setRatingVal(\"\");\r\n        setTutorRatingUpdated(ratingVal);\r\n      } catch (err) {\r\n        console.log(err.Error);\r\n      }\r\n    }\r\n  };\r\n\r\n  // const socket = useRef();\r\n  // const alertIcon = useRef();\r\n  // const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n  // const headerKey = {\r\n  //   Accept: 'application/json',\r\n  //   Authorization:\r\n  //     'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxMTYyMWZkZi0wYjJjLTQxYzAtOWZmMS1iZDk5NWZmYTQ2ZTUiLCJ1bmlxdWVfbmFtZSI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwibmFtZWlkIjoib2ZmaWNlQHR1dG9ycG9pbnQuaW4iLCJlbWFpbCI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwiYXV0aF90aW1lIjoiMDgvMDQvMjAyMSAwODoxMTowMSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFETUlOSVNUUkFUT1IiLCJleHAiOjI1MzQwMjMwMDgwMCwiaXNzIjoiQ2xhcmVfQUkiLCJhdWQiOiJDbGFyZV9BSSJ9.lSSh1EL29ksj23Y_rTSrLhYVwhOFyddK1c6bKU-_HB4',\r\n  // };\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const handleClick = () => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n  console.log(msg);\r\n\r\n  // useEffect(() => {\r\n  //   const friendId = conversation.id;\r\n\r\n  //   const getUser = async () => {\r\n  //     try {\r\n  //       const res = await axios(getCustomersUrl + `/${friendId}`, {headers: {...headerKey}});\r\n  //       setUser(res.data);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getUser();\r\n  // }, [conversation]);\r\n\r\n  // useEffect(() => {\r\n  //   socket.current = io('ws://localhost:8900');\r\n  //   socket.current.on('getAlert', (msg) => {\r\n  //     // storeFiles(msg); //store incoming files data to excel\r\n  //     setAlertMsg([msg]);\r\n  //   });\r\n  // }, []);\r\n\r\n  // const [play] = useSound(notification);\r\n\r\n  // useEffect(() => {\r\n  //   const getMessages = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(\r\n  //         msgUrl + `/${conversation?.wa_id}?page=0&limit=20`,\r\n  //         {\r\n  //           headers: { ...headerKey },\r\n  //         }\r\n  //       );\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getMessages();\r\n  // }, [newNotification, alertMsg]);\r\n\r\n  // console.log(arrivalMessage.length);\r\n\r\n  // // useEffect(() => {\r\n  // //   play();\r\n  // // }, [arrivalMessage?.length])\r\n\r\n  // useEffect(() => {\r\n  //   const getAlert = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(alertMsgUrl + `/${conversation?.wa_id}`, {\r\n  //         headers: {},\r\n  //       });\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //       setMsgCount(() => res?.data?.filter((i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id).length);\r\n  //       setHide(false);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getAlert();\r\n  // }, [alertMsg, newNotification]);\r\n\r\n  // console.log(alertMessage);\r\n\r\n  // useEffect(() => {\r\n  //   setMsgCount(\r\n  //     () =>\r\n  //       alertMessage?.filter(\r\n  //         (i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id\r\n  //       ).length\r\n  //   );\r\n  // }, [alertMessage, alertMsg, newNotification]);\r\n\r\n  const shortText = (text) => {\r\n    if (text.length > 6) {\r\n      return `${text.slice(0, 6)}..`;\r\n    } else if (text.length <= 6) {\r\n      return text;\r\n    }\r\n  };\r\n\r\n  // const handleEmailChange=async(e,tutorId)=>{\r\n  //   e.preventDefault()\r\n\r\n  //   try {\r\n  //     const response = await axios.put(\r\n  //       // `${localStorage.getItem(\"api\")}/api/sessions/assignedTutorUpdateAmount`,\r\n  //       `http://localhost:8800/api/tutor/updateTutorEmail/${tutorId}`,{email:emailVal}\r\n  //     );\r\n  //     if(response?.data?.success==true){\r\n  //     setEditEmailVal(false);\r\n  //     setUpdated(!updated);\r\n  //     }else{\r\n  //       console.log(\"Email didn't updated!\")\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.log({err});\r\n      \r\n  //   }\r\n\r\n  // }\r\n\r\n  // const handlePhoneChange=async(e,tutorId)=>{\r\n  //   e.preventDefault()\r\n\r\n  //   try {\r\n  //     const response = await axios.put(\r\n  //       // `${localStorage.getItem(\"api\")}/api/sessions/assignedTutorUpdateAmount`,\r\n  //       `http://localhost:8800/api/tutor/updateTutorWaId/${tutorId}`,{wa_id:phoneVal}\r\n  //     );\r\n  //    if(response?.data?.success==true){\r\n  //     setEditPhoneVal(false);\r\n  //     setUpdated(!updated);\r\n  //    }else{\r\n  //      console.log(\"WhatsApp number didn't updated!\")\r\n  //    }\r\n  //   } catch (err) {\r\n  //     console.log({err});\r\n  //   }\r\n\r\n  // }\r\n\r\n  // const handleEditEmail=(e,curEmailVal)=>{\r\n  //     e.preventDefault()\r\n  //     setEditEmailVal(!editEmailVal)\r\n  //     setEmailVal(curEmailVal)\r\n\r\n  // }\r\n\r\n  // const handleEditPhone=(e,curPhoneVal)=>{\r\n  //   e.preventDefault()\r\n  //   setEditPhoneVal(!editPhoneVal)\r\n  //   setPhoneVal(curPhoneVal)\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={showMenu ? \"tutorlist highlighted\" : \"tutorlist\"}\r\n        // onClick={() => {\r\n        //   updateAlert(conversation?.wa_id);\r\n        // }}\r\n      >\r\n        <div className=\"userTab\">\r\n          <Avatar className=\"conversationImg\">\r\n            {conversation?.name?.slice(0, 2)}\r\n          </Avatar>\r\n          <div style={{ paddingBottom: \"5px\" }}>\r\n            <div className=\"conversationName\">\r\n              {`${conversation?.name}`}{\" \"}\r\n              {conversation?.writer && (\r\n                <span>\r\n                  <BorderColorIcon\r\n                    fontSize=\"small\"\r\n                    style={{ fontSize: \"14px\" }}\r\n                  />\r\n                </span>\r\n              )}\r\n              <span\r\n                style={{ fontSize: \"12px\", color: \"green\", marginLeft: \"5px\" }}\r\n              >\r\n                {conversation?.highlights &&\r\n                  conversation?.highlights.map((i) => (\r\n                    <span>\r\n                      {i?.path?.slice(0, 1)}\r\n                      {\": \"}\r\n                      {i?.texts?.map((j) => (\r\n                        <span>{j.value}&nbsp;</span>\r\n                      ))}\r\n                    </span>\r\n                  ))}\r\n              </span>\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"12px\",\r\n              }}\r\n            >\r\n              {conversation?.tutor_id}{\" \"}\r\n              <span\r\n                style={{\r\n                  color: \"green\",\r\n                  fontWeight: \"800\",\r\n                  marginLeft: \"5px\",\r\n                  fontSize: \"13px\",\r\n                  cursor: 'pointer',\r\n                }}\r\n              >\r\n                 <HtmlTooltip\r\n                    placement=\"top\"\r\n                    title={\r\n                      <>\r\n                        <span style={{ marginBottom: \"10px\" }}>\r\n                          Sessions Done:\r\n                        </span>\r\n                        {conversation?.sessions_done?.map((el) => (\r\n                            <Typography\r\n                              color=\"inherit\"\r\n                              style={{\r\n                                fontSize: \"13.5px\",\r\n                                fontWeight: \"600\",\r\n                                marginTop: \"5px\",\r\n                              }}\r\n                            >\r\n                              &#8226;{\" \"}\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"normal\",\r\n                                }}\r\n                              >\r\n                                {el}\r\n                              </span>\r\n                            </Typography>\r\n                          ))}\r\n                      </>\r\n                    }\r\n                  >\r\n                    <span>{conversation?.sessions_done &&\r\n                    '[' +\r\n                      conversation?.sessions_done?.filter((c, index, arr) => {\r\n                        return arr.indexOf(c) === index;\r\n                      }).length +\r\n                      ']'}\r\n                    </span>\r\n                  </HtmlTooltip>\r\n              </span>\r\n              <Box\r\n                sx={{\r\n                  width: 200,\r\n                  display: \"flex\",\r\n                  alignItems: \"center\",\r\n                  justifyContent: \"flex-end\",\r\n                }}\r\n              >\r\n                <Rating\r\n                  name=\"read-only\"\r\n                  size=\"small\"\r\n                  value={conversation?.rating / 2}\r\n                  precision={0.1}\r\n                  emptyIcon={\r\n                    <StarIcon style={{ opacity: 0.55 }} fontSize=\"inherit\" />\r\n                  }\r\n                  readOnly\r\n                />\r\n                &nbsp;\r\n                <span style={{ fontSize: \"13px\", fontWeight: \"700\" }}>\r\n                  {(\"\" + conversation?.rating / 2)?.slice(0, 4)}\r\n                </span>\r\n                <span>\r\n                  <HtmlTooltip\r\n                    placement=\"top\"\r\n                    title={\r\n                      <>\r\n                        <span style={{ marginBottom: \"10px\" }}>\r\n                          Last 5 reviews\r\n                        </span>\r\n                        {conversation?.rating_and_reviews\r\n                          ?.slice(\r\n                            Math.max(\r\n                              conversation?.rating_and_reviews?.length - 5,\r\n                              0\r\n                            )\r\n                          )\r\n                          ?.map((el) => (\r\n                            <Typography\r\n                              color=\"inherit\"\r\n                              style={{\r\n                                fontSize: \"13.5px\",\r\n                                fontWeight: \"600\",\r\n                                marginTop: \"5px\",\r\n                              }}\r\n                            >\r\n                              -{\" \"}\r\n                              <span\r\n                                style={{\r\n                                  fontSize: \"12px\",\r\n                                  fontWeight: \"normal\",\r\n                                }}\r\n                              >\r\n                                {el.reviews}\r\n                              </span>\r\n                            </Typography>\r\n                          ))}\r\n                      </>\r\n                    }\r\n                  >\r\n                    <InfoIcon\r\n                      fontSize=\"small\"\r\n                      style={{ fontSize: \"16px\", cursor: \"pointer\" }}\r\n                    />\r\n                  </HtmlTooltip>\r\n                </span>\r\n              </Box>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: \"10%\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignSelf: \"flex-end\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <span style={{ paddingRight: \"5px\" }}>\r\n                {showMenu ? (\r\n                  <KeyboardArrowUpIcon\r\n                    fontSize=\"medium\"\r\n                    color=\"action\"\r\n                    onClick={handleClick}\r\n                  />\r\n                ) : (\r\n                  <KeyboardArrowDownIcon\r\n                    fontSize=\"medium\"\r\n                    color=\"action\"\r\n                    onClick={handleClick}\r\n                  />\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {showMenu && (\r\n        <div className=\"conversationDetails\">\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-between\",\r\n              margin: \"7px\",\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              Highest Degree: <span>{conversation?.highest_degree}</span>\r\n            </span>\r\n            {(conversation?.tutor_status === \"active\" ) ? (\r\n              <span\r\n                style={{ marginTop: \"-8px\", cursor: \"pointer\" }}\r\n                onClick={handleToggle}\r\n              >\r\n                {console.log({valTestConv:conversation?.tutor_status, checked})}\r\n                {/* <Switch\r\n                Active\r\n                checked={checked}\r\n                onChange={handleChangeStatus}\r\n                inputProps={{ 'aria-label': 'controlled' }}\r\n                size='small'\r\n              /> */}\r\n                <ToggleOnIcon fontSize=\"large\" />\r\n              </span>\r\n            ) : (conversation?.tutor_status == \"inactive\") ? (\r\n              <span\r\n                style={{ marginTop: \"-8px\", cursor: \"pointer\" }}\r\n                onClick={handleToggle}\r\n              >\r\n                <ToggleOffIcon fontSize=\"large\" color=\"disabled\" />\r\n              </span>\r\n            ) : null}\r\n            <Snackbar\r\n              open={openSnackBar}\r\n              autoHideDuration={2000}\r\n              onClose={handleCloseSnackBar}\r\n              anchorOrigin={{ vertical, horizontal }}\r\n              key={vertical + horizontal}\r\n            >\r\n              <Alert\r\n                onClose={handleCloseSnackBar}\r\n                severity=\"info\"\r\n                sx={{ width: \"100%\" }}\r\n              >\r\n                {alertText}\r\n              </Alert>\r\n            </Snackbar>\r\n          </div>\r\n          {reasonDialog && (\r\n            <Reason\r\n              setReason={setReason}\r\n              setReasonVal={setReasonVal}\r\n              setReasonDialog={setReasonDialog}\r\n              reasonDialog={reasonDialog}\r\n              visibleCircularbar={visibleCircularbar}\r\n            />\r\n          )}\r\n          <div style={{ margin: \"15px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              College:{\" \"}\r\n              <span>\r\n                {conversation?.academic_info &&\r\n                  conversation?.academic_info[0]?.college}\r\n              </span>\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: \"23px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              WhatsApp: <span>{conversation?.wa_id}</span>\r\n              {/* { !editPhoneVal ? \r\n              (<span>{conversation?.wa_id}</span>)\r\n              :   (<span>\r\n                    <input\r\n                      type=\"number\"\r\n                      style={{\r\n                        backgroundColor: \"aliceblue\",\r\n                        width: \"30%\",\r\n                        height: \"20px\",\r\n                        marginTop: \"5px\",\r\n                        outline: \"none\",\r\n                        border: \"none\",\r\n                        borderBottom: \"1px solid gray\",\r\n                        borderRadius: \"0px\",\r\n                      }}\r\n                      value={phoneVal}\r\n                      onChange={(val) => setPhoneVal(val.target.value)}\r\n                      autoFocus\r\n                    />{\" \"}\r\n                    &nbsp;\r\n                    <button\r\n                      style={{\r\n                        backgroundColor: \"#1876D1\",\r\n                        color: \"#ffff\",\r\n                        border: \"none\",\r\n                        borderRadius: \"2px\",\r\n                        height: \"25px\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={(e)=>handlePhoneChange(e,conversation?.tutor_id)}\r\n                    >\r\n                      Update\r\n                    </button>\r\n                </span>)\r\n              }\r\n              <span style={{ marginLeft: \"3px\" }}>\r\n                <EditIcon\r\n                  fontSize=\"x-small\"\r\n                  style={{ fontSize: \"15px\" }}\r\n                  onClick={(e) => handleEditPhone(e,conversation?.wa_id)}\r\n                />\r\n              </span> */}\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: \"23px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              Email: <span>{conversation?.email}</span>\r\n              {/* { !editEmailVal ? \r\n              (<span>{conversation?.email}</span>)\r\n              :   (<span>\r\n                    <input\r\n                      type=\"email\"\r\n                      style={{\r\n                        backgroundColor: \"aliceblue\",\r\n                        width: \"50%\",\r\n                        height: \"20px\",\r\n                        marginTop: \"5px\",\r\n                        outline: \"none\",\r\n                        border: \"none\",\r\n                        borderBottom: \"1px solid gray\",\r\n                        borderRadius: \"0px\",\r\n                      }}\r\n                      value={emailVal}\r\n                      onChange={(val) => setEmailVal(val.target.value)}\r\n                      autoFocus\r\n                    />{\" \"}\r\n                    &nbsp;\r\n                    <button\r\n                      style={{\r\n                        backgroundColor: \"#1876D1\",\r\n                        color: \"#ffff\",\r\n                        border: \"none\",\r\n                        borderRadius: \"2px\",\r\n                        height: \"25px\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={(e)=>handleEmailChange(e,conversation?.tutor_id)}\r\n                    >\r\n                      Update\r\n                    </button>\r\n                </span>)\r\n              }\r\n              <span style={{ marginLeft: \"3px\" }}>\r\n                <EditIcon\r\n                  fontSize=\"x-small\"\r\n                  style={{ fontSize: \"15px\" }}\r\n                  onClick={(e) => handleEditEmail(e,conversation.email)}\r\n                />\r\n              </span> */}\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: \"15px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              Subjects known:\r\n            </span>\r\n            {conversation?.subjects &&\r\n              conversation?.subjects.map((i) => (\r\n                <Chip style={{ margin: \"6px\" }} label={i} />\r\n              ))}\r\n          </div>\r\n          <div style={{ margin: \"15px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              Add tag:\r\n            </span>\r\n            {conversation?.tags &&\r\n              conversation?.tags.map((i) => (\r\n                <Chip style={{ margin: \"6px\" }} label={i} color=\"primary\" />\r\n              ))}\r\n\r\n            <Fab\r\n              style={{ height: \"36px\", width: \"36px\" }}\r\n              color=\"primary\"\r\n              aria-label=\"add\"\r\n            >\r\n              <AddIcon onClick={handleClickOpen} />\r\n              <Dialog open={openTag} onClose={_handleClose}>\r\n                <DialogContent>\r\n                  <DialogContentText>Add New Tag</DialogContentText>\r\n                  <TextField\r\n                    autoFocus\r\n                    margin=\"dense\"\r\n                    id=\"name\"\r\n                    label=\"Tag Name\"\r\n                    type=\"text\"\r\n                    value={tagValue}\r\n                    onChange={(e) => setTagValue(e.target.value)}\r\n                    fullWidth\r\n                    variant=\"standard\"\r\n                  />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick={_handleClose}>Cancel</Button>\r\n                  <Button onClick={_handleAddTag}>Add</Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </Fab>\r\n          </div>\r\n          <div style={{ display: \"flex\", margin: \"15px 7px 7px 7px\" }}>\r\n            <span\r\n              style={{\r\n                fontSize: \"14px\",\r\n                fontWeight: \"500\",\r\n                marginRight: \"5px\",\r\n              }}\r\n            >\r\n              Writer:\r\n            </span>\r\n            {conversation?.writer  ? (\r\n              <span\r\n                style={{ marginTop: \"-8px\", cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  handleChangeWriterStatus(conversation?.tutor_id, false)\r\n                }\r\n              >\r\n                <ToggleOnIcon fontSize=\"large\" color=\"primary\" />\r\n              </span>\r\n            ) : !conversation?.writer  ? (\r\n              <span\r\n                style={{ marginTop: \"-8px\", cursor: \"pointer\" }}\r\n                onClick={() =>\r\n                  handleChangeWriterStatus(conversation?.tutor_id, true)\r\n                }\r\n              >\r\n                <ToggleOffIcon fontSize=\"large\" color=\"disabled\" />\r\n              </span>\r\n            ) : null}\r\n          </div>\r\n          {/* <div style={{ margin: '15px 7px 7px 7px' }}>\r\n            <span\r\n              style={{\r\n                fontSize: '14px',\r\n                fontWeight: '500',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              Rate this tutor:{' '}\r\n              <span>\r\n                <input\r\n                  type='number'\r\n                  style={{ width: '15%', marginLeft: '5px', outline: 'none' }}\r\n                  min='1'\r\n                  max='10'\r\n                  value={ratingVal}\r\n                  // onKeyDown={(evt) => evt.preventDefault()}\r\n                  onChange={(e) => setRatingVal(e.target.value)}\r\n                />{' '}\r\n                &nbsp;\r\n                <button\r\n                  style={{\r\n                    backgroundColor: '#1876D1',\r\n                    color: '#ffff',\r\n                    border: 'none',\r\n                    borderRadius: '2px',\r\n                    height: '21px',\r\n                    cursor: 'pointer',\r\n                  }}\r\n                  onClick={rateHandler}\r\n                >\r\n                  rate\r\n                </button>\r\n              </span>\r\n            </span>\r\n          </div> */}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TutorContact;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\rightComponent\\RightSec.jsx",["388","389","390","391","392","393"],"import '../../pages/messenger/messenger.css';\r\nimport { useContext, useEffect, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\nimport TutorContact from '../tutorContacts/TutorContact';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport Session from '../sessionTab/Session';\r\nimport PaymentData from '../paymentTab/PaymentData';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Badge from '@mui/material/Badge';\r\nimport NotificationsIcon from '@mui/icons-material/Notifications';\r\n\r\nconst RightSec = ({newSessions, interestedTutors, clientPayment, tutorPayout}) => {\r\n  const [tutorList, setTutorList] = useState([]);\r\n  const [tutorTagUpdated, setTutorTagUpdated] = useState();\r\n  const [tutorRatingUpdated, setTutorRatingUpdated] = useState();\r\n  const [searchTutor, setSearchTutor] = useState();\r\n\r\n  const [tutorCount, setTutorCount] = useState(0);\r\n  const [tutorPage, setTutorPage] = useState(1);\r\n  const [tutorListLoading, setTutorListLoading] = useState(true);\r\n\r\n  const [tutorTab, setTutorTab] = useState(true);\r\n  const [sessionTab, setSessionTab] = useState(false);\r\n  const [paymentTab, setPaymentTab] = useState(false);\r\n  const [clickedNoti, setClickedNoti] = useState(false);\r\n  const [val, setval] = useState(1);\r\n  const [updated, setUpdated] = useState(false);\r\n\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const openMenu = Boolean(anchorEl);\r\n  const ITEM_HEIGHT = 48;\r\n  \r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setClickedNoti(true);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  //fetching tutors list\r\n  useEffect(() => {\r\n    const getTutors = async () => {\r\n\r\n      if(searchTutor) {\r\n        try {\r\n          const res = await axios.get(\r\n            `${localStorage.getItem('api')}/api/tutor/getTutors/${searchTutor}`,\r\n            {\r\n              params: {\r\n                page: val,\r\n                limit: 20,\r\n              },\r\n            },\r\n            {\r\n              headers: '',\r\n            }\r\n          );\r\n          setTutorList(res.data.result);\r\n          setTutorListLoading(false);\r\n          setTutorCount(res.data.length);\r\n          setTutorPage(val);\r\n\r\n        } catch (err) {\r\n          setTutorListLoading(false);\r\n          console.log(err.Error);\r\n        }\r\n      } else {\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        setTutorList(res?.data?.result);\r\n        setTutorCount(res.data.length);\r\n        setTutorListLoading(false);\r\n      } catch (err) {\r\n        console.log(err.Error);\r\n        setTutorListLoading(false);\r\n      }\r\n    }\r\n    };\r\n    getTutors();\r\n  }, [tutorTagUpdated, tutorRatingUpdated, updated]);\r\n\r\n  useEffect(() => {\r\n    if(newSessions && newSessions.length > 0) {\r\n      setClickedNoti(false);\r\n    }\r\n  }, [newSessions])\r\n\r\n  const handleTutorList = async (event, value) => {\r\n    if (searchTutor) {\r\n      setTutorListLoading(true);\r\n      setTutorPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors/${searchTutor}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setTutorList(res.data.result);\r\n        setTutorListLoading(false);\r\n        setval(value);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setTutorListLoading(true);\r\n      setTutorPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setTutorList(res.data.result);\r\n        setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleSearchTutors = async (e) => {\r\n    setSearchTutor(e.target.value);\r\n    if (e.key == 'Enter') {\r\n      setTutorListLoading(true);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors/${e.target.value}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setTutorListLoading(false);\r\n        setTutorList(res.data.result);\r\n        setTutorCount(res.data.length);\r\n        setTutorPage(1);\r\n        // setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleTutorTab = () => {\r\n    setTutorTab(true);\r\n    setSessionTab(false);\r\n    setPaymentTab(false);\r\n  };\r\n  const handleSessionTab = () => {\r\n    setTutorTab(false);\r\n    setSessionTab(true);\r\n    setPaymentTab(false);\r\n  };\r\n  const handlePaymentTab = () => {\r\n    setTutorTab(false);\r\n    setSessionTab(false);\r\n    setPaymentTab(true);\r\n  };\r\n\r\n  //   const logOutFunc = () => {\r\n  //     localStorage.clear();\r\n  //     window.location.reload();\r\n  //   };\r\n\r\n  return (\r\n    <div className='chatMenu2'>\r\n      <header className='chat_header2'>\r\n        <div\r\n          style={{\r\n            flex: '1',\r\n            fontSize: `${tutorTab ? '17px' : '16px'}`,\r\n            fontWeight: '600',\r\n            height: '100%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: `${tutorTab ? '#5e8de7' : '#EDEDED'}`,\r\n            color: `${tutorTab ? '#fff' : 'black'}`,\r\n            borderRight: '1px solid lightgray',\r\n            cursor: 'pointer',\r\n          }}\r\n          onClick={handleTutorTab}\r\n        >\r\n          Tutors List\r\n        </div>\r\n        <div\r\n          style={{\r\n            flex: '1',\r\n            fontSize: `${sessionTab ? '17px' : '16px'}`,\r\n            // marginLeft: '10px',\r\n            fontWeight: '600',\r\n            height: '100%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: `${sessionTab ? '#5e8de7' : '#EDEDED'}`,\r\n            color: `${sessionTab ? '#fff' : 'black'}`,\r\n            borderRight: '1px solid lightgray',\r\n            cursor: 'pointer',\r\n          }}\r\n          onClick={handleSessionTab}\r\n        >\r\n          Sessions\r\n        </div>\r\n        <div\r\n          style={{\r\n            flex: '1',\r\n            fontSize: `${paymentTab ? '17px' : '16px'}`,\r\n            // marginLeft: '10px',\r\n            fontWeight: '600',\r\n            height: '100%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n            backgroundColor: `${paymentTab ? '#5e8de7' : '#EDEDED'}`,\r\n            color: `${paymentTab ? '#fff' : 'black'}`,\r\n            cursor: 'pointer',\r\n          }}\r\n          onClick={handlePaymentTab}\r\n        >\r\n          Payments\r\n        </div><div\r\n          // style={{\r\n          //   flex: '1',\r\n          //   fontSize: `${paymentTab ? '17px' : '16px'}`,\r\n          //   // marginLeft: '10px',\r\n          //   fontWeight: '600',\r\n          //   height: '100%',\r\n          //   display: 'flex',\r\n          //   alignItems: 'center',\r\n          //   justifyContent: 'center',\r\n          //   backgroundColor: `${paymentTab ? '#5e8de7' : '#EDEDED'}`,\r\n          //   color: `${paymentTab ? '#fff' : 'black'}`,\r\n          // }}\r\n        >\r\n           <div style={{ placeSelf: 'center' }}>\r\n              <IconButton\r\n                aria-label='more'\r\n                style={{marginLeft: '-16px', marginRight: '6px'}}\r\n                id='long-button'\r\n                aria-controls='long-menu'\r\n                aria-expanded={openMenu ? 'true' : undefined}\r\n                aria-haspopup='true'\r\n                onClick={handleClick}\r\n              >\r\n                {newSessions && !clickedNoti ? <Badge color=\"success\" badgeContent=\"\" variant='dot'>\r\n                  <NotificationsIcon fontSize='small' style={{ placeSelf: 'center', color: 'gray' }} />\r\n                </Badge> :\r\n                <NotificationsIcon fontSize='small' style={{ placeSelf: 'center', color: 'gray' }} />}\r\n              </IconButton>\r\n              <Menu\r\n                id='long-menu'\r\n                MenuListProps={{\r\n                  'aria-labelledby': 'long-button',\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={openMenu}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                  style: {\r\n                    maxHeight: ITEM_HEIGHT * 4.5,\r\n                    width: '35ch',\r\n                  },\r\n                }}\r\n              >\r\n                {newSessions ? newSessions?.map((option, i, arr) => (\r\n                  <MenuItem\r\n                    key={option.session_id}\r\n                    // selected={option.session_id == arr[0].session_id}\r\n                    onClick={handleClose}\r\n                    style={{\r\n                      fontSize: '14px'\r\n                    }}\r\n                  >\r\n                   New<span style={{marginLeft: '4px', marginRight: '4px', fontWeight: '700'}}>{option?.type}</span>available<span style={{marginLeft: '4px', fontWeight: '700'}}>{'ID: '}{option?.session_id}</span> \r\n                  </MenuItem>\r\n                )) : \r\n                  <MenuItem\r\n                    key='no'\r\n                  >\r\n                    No new notifications\r\n                  </MenuItem>}\r\n              </Menu>\r\n            </div>\r\n        </div>\r\n        {/* <PersonAddAltOutlinedIcon\r\n              style={{\r\n                fontSize: '32px',\r\n                color: addNewContact ? '#337DDD' : '#50585C',\r\n                cursor: 'pointer',\r\n                marginRight: '10px',\r\n              }}\r\n              onClick={() => setAddNewContact(true)}\r\n            /> */}\r\n        {/* <MoreVertIcon\r\n              style={{\r\n                fontSize: '25px',\r\n                color: '#50585C',\r\n                cursor: 'pointer',\r\n                marginRight: '-10px',\r\n              }}\r\n            /> */}\r\n      </header>\r\n      {tutorTab ? (\r\n        <div>\r\n          <div\r\n            style={{\r\n              height: '2.3rem',\r\n              padding: '6px 0px 6px 17px',\r\n              backgroundColor: '#9DE1FE',\r\n            }}\r\n          >\r\n            <input\r\n              placeholder='Search for tutors'\r\n              className='chatMenuInput'\r\n              // onChange={(e) => handleSearchTutors(e)}\r\n              onKeyPress={handleSearchTutors}\r\n            />\r\n          </div>\r\n\r\n          {tutorListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <div className='chatMenuWrapper'>\r\n              {tutorList?.map((c) => (\r\n                <div\r\n                // onClick={() => {\r\n                //   setCurrentChat(c);\r\n                //   setHighlighted(true);\r\n                //   setShowTemplateMsg(false);\r\n                //   setTaglabel('');\r\n                //   setTagUpdated('');\r\n                // }}\r\n                >\r\n                  <TutorContact\r\n                    conversation={c}\r\n                    setTutorTagUpdated={setTutorTagUpdated}\r\n                    setTutorRatingUpdated={setTutorRatingUpdated}\r\n                    updated={updated}\r\n                    setUpdated={setUpdated}\r\n                    searchTutor={searchTutor}\r\n                    // currentChat={currentChat}\r\n                    // finalMessage={finalMessage}\r\n                    // alertMsg={alertMsg}\r\n                    // arrivalMessage={arrivalMessage}\r\n                    // alert={alert}\r\n                    // // newNotification={newNotification}\r\n                    // setAlert={setAlert}\r\n                    // msgCountUpdated={msgCountUpdated}\r\n                    // setMsgCountUpdated={setMsgCountUpdated}\r\n                    // setPinned={setPinned}\r\n                    // setMarkChat={setMarkChat}\r\n                    // setAlertUpdate={setAlertUpdate}\r\n                    // apiUrl={apiUrl}\r\n                  />\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  marginTop: '15px',\r\n                }}\r\n                count={Math.ceil(tutorCount / 20)}\r\n                page={tutorPage}\r\n                onChange={handleTutorList}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : sessionTab ? (\r\n        <div>\r\n          <Session tutorList={tutorList} setTutorList={setTutorList} searchTutor={searchTutor} handleSearchTutors={handleSearchTutors} tutorCount={tutorCount} interestedTutors={interestedTutors} clientPayment={clientPayment} tutorPayout={tutorPayout} />\r\n        </div>\r\n      ) : paymentTab ? (\r\n        <div>\r\n          <PaymentData />\r\n        </div>\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RightSec;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\paymentTab\\PaymentData.jsx",["394","395"],"import { useState, useEffect } from 'react';\r\nimport './payment.css'\r\nimport axios from 'axios';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nconst columns = [\r\n  { field: 'id', headerName: 'SL No.', width: 70 },\r\n  { field: 'txnId', headerName: 'ID', width: 180 },\r\n  { field: 'tutorId', headerName: 'Tutor ID', width: 180 },\r\n  { field: 'amount', headerName: 'Amount', width: 130 },\r\n  { field: 'status', headerName: 'Status', width: 120 },\r\n];\r\n\r\n\r\nconst PaymentData = () => {\r\n  const [payDet, setPayDet] = useState();\r\n  const [paymentCount, setpaymentCount] = useState();\r\n\r\n  const payHeaders = {\r\n    username: 'rzp_live_Jk4vwq7tyL9Aeg',\r\n    password: 'qUjOJWotN6x47WSDExJ4NURs',\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getPaymentDetails = async () => {\r\n      const response = await axios.get(\r\n        `${localStorage.getItem('api')}/api/payments/payouts?account_number=3434949239801329`,\r\n        {\r\n          headers: {\r\n            ...payHeaders,\r\n          },\r\n        }\r\n      );\r\n      // const data = await response.json();\r\n      setPayDet(response?.data?.items);\r\n      setpaymentCount(response?.data?.count);\r\n    };\r\n    getPaymentDetails();\r\n  }, []);\r\n\r\n  const rows = payDet?.map((i, j) => ({\r\n    id: j+1,\r\n    txnId: i.id,\r\n    tutorId: i.reference_id,\r\n    amount: i.amount/100 + ' INR',\r\n    status: i.status,\r\n  }));\r\n  //   const rows = [\r\n  //     { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 }]\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n        //   borderLeft: '1px solid rgba(224, 224, 224, 1)',\r\n          fontFamily: 'sans-serif',\r\n          fontSize: '17px',\r\n          fontWeight: '500',\r\n          padding: '18px 15px',\r\n        }}\r\n      >\r\n        Payment History\r\n        <hr\r\n          style={{\r\n            width: '12%',\r\n            marginLeft: '1px',\r\n            marginTop: '2px',\r\n            marginBottom: '2px',\r\n            background: 'coral',\r\n            borderColor: 'coral',\r\n            borderRadius: '5px',\r\n          }}\r\n        />\r\n      </div>\r\n      <div style={{ height: '85vh', width: '100%' }}>\r\n        <DataGrid\r\n          rows={rows}\r\n          columns={columns}\r\n          pageSize={20}\r\n          rowsPerPageOptions={[20]}\r\n          style={{ borderRadius: '0px', border: '0px', borderTop: '1px solid rgba(224, 224, 224, 1)' }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaymentData;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\Session.jsx",["396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport axios from 'axios';\r\nimport Box from '@mui/material/Box';\r\nimport Tab from '@mui/material/Tab';\r\nimport TabContext from '@mui/lab/TabContext';\r\nimport TabList from '@mui/lab/TabList';\r\nimport TabPanel from '@mui/lab/TabPanel';\r\nimport './session.css';\r\nimport SessionList from './SessionList';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nimport Pagination from '@mui/material/Pagination';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle';\r\nimport ClearRoundedIcon from '@mui/icons-material/ClearRounded';\r\n\r\nimport Rating from '@mui/material/Rating';\r\nimport StarIcon from '@mui/icons-material/Star';\r\nimport Chip from '@mui/material/Chip';\r\nimport StarPurple500SharpIcon from '@mui/icons-material/StarPurple500Sharp';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport { sendtemplateMsgUrl } from '../../serviceUrls/Message-Services';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MoreVertIcon from '@mui/icons-material/MoreVert';\r\nimport Menu from '@mui/material/Menu';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport Badge from '@mui/material/Badge';\r\nimport NotificationsIcon from '@mui/icons-material/Notifications';\r\nimport FilterListRoundedIcon from '@mui/icons-material/FilterListRounded';\r\nimport FilterListOffRoundedIcon from '@mui/icons-material/FilterListOffRounded';\r\n\r\nimport Drawer from '@mui/material/Drawer';\r\nimport List from '@mui/material/List';\r\nimport Divider from '@mui/material/Divider';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\n\r\nimport TextField from '@mui/material/TextField';\r\nimport DateRangePicker from '@mui/lab/DateRangePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\n\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\n\r\nimport Stack from '@mui/material/Stack';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst Session = ({\r\n  tutorList,\r\n  setTutorList,\r\n  searchTutor,\r\n  tutorCount,\r\n  interestedTutors,\r\n  clientPayment,\r\n  tutorPayout,\r\n  handleSearchTutors\r\n}) => {\r\n  const [value, setValue] = useState(1);\r\n  const [val, setVal] = useState('1');\r\n  const [sessionList, setSessionList] = useState([]);\r\n  const [sessionListToday, setSessionListToday] = useState([]);\r\n  const [sessionListUpcoming, setSessionListUpcoming] = useState([]);\r\n  const [sessionListPast, setSessionListPast] = useState([]);\r\n  const [sessionCount, setSessionCount] = useState(0);\r\n  const [sessionPage, setSessionPage] = useState(1);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [scroll, setScroll] = useState('paper');\r\n  const descriptionElementRef = useRef(null);\r\n\r\n  const [tutorPage, setTutorPage] = useState(1);\r\n  const [sessionListLoading, setSessionListLoading] = useState(true);\r\n  const [sessionTime, setSessionTime] = useState('today');\r\n  const [searchSession, setSearchSession] = useState();\r\n\r\n  const [assignedTutor, setAssignedTutor] = useState();\r\n\r\n  const [updated, setUpdated] = useState(false);\r\n  const [reload, setReload] = useState(false);\r\n\r\n  const [clickedNoti, setClickedNoti] = useState(false);\r\n\r\n  const today = new Date();\r\n  let tomorrow =  new Date();\r\n  tomorrow.setDate(today.getDate() + 1);\r\n\r\n  const [applyFilter, setApplyFilter] = useState(false);\r\n  const [dateRange, setDateRange] = useState([null, null]);\r\n  const [filterValue, setFilterValue] = useState(null);\r\n  const [filterValue_, setFilterValue_] = useState(null);\r\n  const [filterValue2, setFilterValue2] = useState(null);\r\n  const [filterActive, setFilterActive] = useState(false);\r\n\r\n  const snackBarPos = {\r\n    vertical: 'bottom',\r\n    horizontal: 'right',\r\n  }\r\n  const { vertical, horizontal } = snackBarPos;\r\n\r\n\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  console.log(dateRange);\r\n  console.log(assignedTutor);\r\n\r\n  \r\n  const ITEM_HEIGHT = 48;\r\n\r\n  //fetching sessions list\r\n  useEffect(() => {\r\n    const getSessions = async () => {\r\n      if(searchSession) {\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/getSessions/${sessionTime}/${searchSession}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        setSessionListLoading(false);\r\n        setSessionList(res?.data?.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(value);\r\n      } catch (err) {\r\n        setSessionListLoading(false);\r\n        console.log(err.Error);\r\n      }\r\n    } else if(filterActive && filterValue || filterValue_ || filterValue2 || dateRange[0] || dateRange[1]) {\r\n      try {\r\n        let payload = {\r\n          work_status: filterValue,\r\n          payment_status: filterValue_,\r\n          tutor_payment_status: filterValue2,\r\n          from: dateRange[0],\r\n          to: dateRange[1]\r\n        }\r\n        const res = await axios.post(\r\n          `${localStorage.getItem('api')}/api/sessions/filter/filterSessions`, payload,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        setSessionListLoading(false);\r\n        setSessionList(res?.data?.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(value);\r\n      } catch (err) {\r\n        setSessionListLoading(false);\r\n        console.log(err.Error);\r\n      }\r\n    } else if(applyFilter) {\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/filterSessionsByDate/${dateRange[0]}/${dateRange[1]}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        setSessionListLoading(false);\r\n        setSessionList(res?.data?.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(value);\r\n      } catch (err) {\r\n        setSessionListLoading(false);\r\n        console.log(err.Error);\r\n      }\r\n    } else {\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/getSessions/${sessionTime}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        setSessionListLoading(false);\r\n        setSessionList(res?.data?.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(value);\r\n      } catch (err) {\r\n        setSessionListLoading(false);\r\n        console.log(err.Error);\r\n      }\r\n    }\r\n    };\r\n    getSessions();\r\n  }, [sessionTime, assignedTutor, updated, reload, openSnackBar]);\r\n\r\n  const handleSessionList = async (event, value) => {\r\n    if (searchSession) {\r\n      setSessionListLoading(true);\r\n      setSessionPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/getSessions/${sessionTime}/${searchSession}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res.data.result);\r\n        setSessionListLoading(false);\r\n        setValue(value);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else if(filterActive) {\r\n      setSessionListLoading(true);\r\n      setSessionPage(value);\r\n      try {\r\n        let payload = {\r\n          work_status: filterValue,\r\n          payment_status: filterValue_,\r\n          tutor_payment_status: filterValue2,\r\n          from: dateRange[0],\r\n          to: dateRange[1]\r\n        }\r\n        const res = await axios.post(\r\n          `${localStorage.getItem('api')}/api/sessions/filter/filterSessions`, payload,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res.data.result);\r\n        setSessionListLoading(false);\r\n        setValue(value);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else if(applyFilter) {\r\n      setSessionListLoading(true);\r\n      setSessionPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/filterSessionsByDate/${dateRange[0]}/${dateRange[1]}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res.data.result);\r\n        setSessionListLoading(false);\r\n        setValue(value);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setSessionListLoading(true);\r\n      setSessionPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/getSessions/${sessionTime}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res?.data?.result);\r\n        setSessionListLoading(false);\r\n        setValue(value);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const openMenu = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setClickedNoti(true);\r\n  };\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleSearchSession = async (e) => {\r\n    setSearchSession(e.target.value);\r\n    if (e.key == 'Enter') {\r\n      setSessionListLoading(true);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/getSessions/${sessionTime}/${e.target.value}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionListLoading(false);\r\n        setSessionList(res.data.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(1);\r\n        setValue(1);\r\n        // setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setVal(newValue);\r\n    console.log(newValue);\r\n    setSessionTime(\r\n      newValue === '1' ? 'today' : newValue === '2' ? 'upcoming' : 'past'\r\n    );\r\n    setValue(1);\r\n    setDateRange([null, null]);\r\n    setSessionListLoading(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  // let interestedTutorList = interestedTutors;\r\n  // console.log(interestedTutors.reverse())\r\n\r\n  useEffect(() => {\r\n    if(interestedTutors && interestedTutors.length > 0) {\r\n      setClickedNoti(false);\r\n    }\r\n  }, [interestedTutors]);\r\n\r\n  // filter session list by date\r\n  const handleFilterByDateRange = async () => {\r\n    setApplyFilter(true);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/sessions/filterSessionsByDate/${dateRange[0]}/${dateRange[1]}`,\r\n          {\r\n            params: {\r\n              page: 1,\r\n              limit: 10,\r\n            },\r\n          },\r\n          {\r\n            headers: '',\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res.data.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(1);\r\n        // setTutorListLoading(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n  };\r\n\r\n  // filter sessions according to selected value\r\n  const handleApplyFilterSession = async () => {\r\n    // setApplyFilter(true);\r\n    try {\r\n      let payload = {\r\n        work_status: filterValue,\r\n        payment_status: filterValue_,\r\n        tutor_payment_status: filterValue2,\r\n        from: dateRange[0],\r\n        to: dateRange[1]\r\n      }\r\n      const res = await axios.post(\r\n        `${localStorage.getItem('api')}/api/sessions/filter/filterSessions`, payload,\r\n        {\r\n          params: {\r\n            page: 1,\r\n            limit: 10,\r\n          },\r\n        },\r\n        {\r\n          headers: '',\r\n        }\r\n        );\r\n        console.log(res.data);\r\n        setSessionList(res.data.result);\r\n        setSessionCount(res.data.length);\r\n        setSessionPage(1);\r\n        toggleDrawer('right', false)\r\n        setFilterActive(true);\r\n        setValue(1);\r\n        setState({ ...state, right: false });\r\n      // setTutorListLoading(false);\r\n      // setLoadingMsg(false);\r\n      // setPage(page + 1);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const [state, setState] = useState({\r\n    top: false,\r\n    left: false,\r\n    bottom: false,\r\n    right: false,\r\n  });\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const [range, setRange] = useState([20, 37]);\r\n\r\n  const handleRangeChange = (event, newValue) => {\r\n    setRange(newValue);\r\n  };\r\n\r\n  const handleFilterSession = (e) => {\r\n    setFilterValue(e.target.value);\r\n  }\r\n  const handleFilterSession_ = (e) => {\r\n    setFilterValue_(e.target.value);\r\n  }\r\n  const handleFilterSession2 = (e) => {\r\n    setFilterValue2(e.target.value);\r\n  }\r\n  console.log(filterValue);\r\n\r\n  const list = (anchor) => (\r\n    <Box\r\n      sx={{ width: anchor === 'top' || anchor === 'bottom' ? 'auto' : 360 }}\r\n      role=\"presentation\"\r\n      // onClick={toggleDrawer(anchor, false)}\r\n      onKeyDown={toggleDrawer(anchor, false)}\r\n    >\r\n      <div style={{padding: '18px', backgroundColor: '#04787C', color: '#ffff', fontSize: '18px', fontWeight: '600'}}>Filters</div>\r\n      <List>\r\n      <ListItem button key='Duration:'>\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemText primary='Duration:' />\r\n            \r\n          </ListItem>\r\n      <div style={{display: 'flex', alignItems: 'center', padding: '0px 10px 0px 12px'}}>\r\n            {/* <span style={{fontSize: '14px'}}>Duration: &nbsp;</span> */}\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DateRangePicker\r\n                label=\"Advanced keyboard\"\r\n                value={dateRange}\r\n                onChange={(newValue) => setDateRange(newValue)}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <Box sx={{ mx: 1, fontSize: '14px' }}> From </Box>\r\n                    <input ref={startProps.inputRef} {...startProps.inputProps} className='dateRange' />\r\n                    <Box sx={{ mx: 1, fontSize: '14px' }}> to </Box>\r\n                    <input ref={endProps.inputRef} {...endProps.inputProps} className='dateRange' />\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n            {/* <Button variant=\"contained\" size=\"small\" color='primary' style={{fontSize: '11px', lineHeight: '1.6', minWidth: '57px', marginLeft: '22px'}} onClick={handleFilterByDateRange}>\r\n              Apply\r\n            </Button>\r\n            <>\r\n            <FilterListOffRoundedIcon style={{marginLeft: '20px', cursor: 'pointer'}} color='primary' onClick={() => {setDateRange([null, null]); setFilterValue(null); setFilterValue_(null); setOpenSnackBar(true);}} />\r\n            <Snackbar open={openSnackBar} autoHideDuration={6000} onClose={handleCloseSnackBar} anchorOrigin={{ vertical, horizontal }} key={vertical + horizontal}>\r\n              <Alert onClose={handleCloseSnackBar} severity=\"info\" sx={{ width: '100%' }}>\r\n                Cleared all filters!\r\n              </Alert>\r\n            </Snackbar>\r\n            </> */}\r\n          </div>\r\n      </List>\r\n      <List>\r\n        {/* {['Deadline', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( */}\r\n          <ListItem button key='Session Status:'>\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemText primary='Session Status:' />\r\n            \r\n          </ListItem>\r\n          <div style={{display: 'flex', flexDirection: 'row', marginLeft: '18px'}}>\r\n          <RadioGroup row aria-label=\"gender\" name=\"row-radio-buttons-group\" value={filterValue} onChange={handleFilterSession}>\r\n          <FormControlLabel value=\"New Task\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"New Task\" />\r\n          <FormControlLabel value=\"Not Confirmed\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Not Confirmed\" />\r\n            <FormControlLabel value=\"Tutors Notified\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Tutors Notified\" />\r\n            <FormControlLabel value=\"Tutors Assigned\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Tutors Assigned\" />\r\n            <FormControlLabel value=\"Pending\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Pending\" />\r\n            <FormControlLabel value=\"In Progress\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"In Progress\" />\r\n            <FormControlLabel value=\"Client Cancelled\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Client Cancelled\" />\r\n            <FormControlLabel value=\"Agent Cancelled\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Agent Cancelled\" />\r\n            <FormControlLabel value=\"Completed\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Completed\" />\r\n      </RadioGroup>\r\n          </div>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {/* {['Deadline', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( */}\r\n          <ListItem button key='Client Payment Status:'>\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemText primary='Client Payment Status:' />\r\n            \r\n          </ListItem>\r\n          <div style={{display: 'flex', flexDirection: 'row', marginLeft: '18px'}}>\r\n          <RadioGroup row aria-label=\"gender\" name=\"row-radio-buttons-group\" value={filterValue_} onChange={handleFilterSession_}>\r\n        <FormControlLabel value=\"not_paid\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Not Paid\" />\r\n        <FormControlLabel value=\"partially_paid\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Partially Paid\" />\r\n        <FormControlLabel value=\"paid\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Fully Paid\" />\r\n      </RadioGroup>\r\n          </div>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {/* {['Deadline', 'Starred', 'Send email', 'Drafts'].map((text, index) => ( */}\r\n          <ListItem button key='Tutor Payment Status:'>\r\n            {/* <ListItemIcon>\r\n              {index % 2 === 0 ? <InboxIcon /> : <MailIcon />}\r\n            </ListItemIcon> */}\r\n            <ListItemText primary='Tutor Payment Status:' />\r\n            \r\n          </ListItem>\r\n          <div style={{display: 'flex', flexDirection: 'row', marginLeft: '18px'}}>\r\n          <RadioGroup row aria-label=\"gender\" name=\"row-radio-buttons-group\" value={filterValue2} onChange={handleFilterSession2}>\r\n        <FormControlLabel value=\"not_paid\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Payment pending\" />\r\n        <FormControlLabel value=\"paid\" control={<Radio size='small' style={{paddingRight: '5px'}} />} label=\"Payment released to all assigned tutors\" />\r\n      </RadioGroup>\r\n          </div>\r\n      </List>\r\n      <footer style={{padding: '18px', backgroundColor: '#FF9E00', color: '#ffff', fontSize: '18px', fontWeight: '600', textAlign: 'center', cursor: 'pointer', position: 'relative', top: 'calc(100vh - 635px'}} onClick={handleApplyFilterSession}>Apply Filter</footer>\r\n    </Box>\r\n  );\r\n\r\n  const handleCloseSnackBar = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TabContext value={val}>\r\n        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n          <TabList\r\n            onChange={handleChange}\r\n            aria-label='lab API tabs example'\r\n            centered\r\n          >\r\n            <Tab label='Next 24 Hrs' value='1' />\r\n            <Tab label='Upcoming' value='2' />\r\n            <Tab label='Past' value='3' />\r\n            <div style={{ placeSelf: 'center' }}>\r\n              <IconButton\r\n                aria-label='more'\r\n                id='long-button'\r\n                aria-controls='long-menu'\r\n                aria-expanded={openMenu ? 'true' : undefined}\r\n                aria-haspopup='true'\r\n                onClick={handleClick}\r\n              >\r\n                {interestedTutors && !clickedNoti ? <Badge color=\"success\" badgeContent=\"\" variant='dot'>\r\n                  <NotificationsIcon fontSize='small' style={{ placeSelf: 'center', color: 'gray' }} />\r\n                </Badge> :\r\n                <NotificationsIcon fontSize='small' style={{ placeSelf: 'center', color: 'gray' }} />}\r\n              </IconButton>\r\n              <Menu\r\n                id='long-menu'\r\n                MenuListProps={{\r\n                  'aria-labelledby': 'long-button',\r\n                }}\r\n                anchorEl={anchorEl}\r\n                open={openMenu}\r\n                onClose={handleClose}\r\n                PaperProps={{\r\n                  style: {\r\n                    maxHeight: ITEM_HEIGHT * 4.5,\r\n                    width: '35ch'\r\n                  },\r\n                }}\r\n              >\r\n                {interestedTutors ? interestedTutors?.map((option, i, arr) => (\r\n                  <MenuItem\r\n                    key={option.session_id}\r\n                    // selected={option.session_id == arr[0].session_id}\r\n                    onClick={handleClose}\r\n                    style={{\r\n                    fontSize:  '14px'\r\n                    }}\r\n                  >\r\n                   New tutor in session-<span style={{marginLeft: '4px', fontWeight: '700'}}>{option?.session_id}</span>\r\n                  </MenuItem>\r\n                )) : \r\n                  <MenuItem\r\n                    key='no'\r\n                    style={{fontSize: '14px'}}\r\n                  >\r\n                    No new notifications\r\n                  </MenuItem>}\r\n              </Menu>\r\n            </div>\r\n          </TabList>\r\n        </Box>\r\n        <TabPanel value='1' style={{ padding: '16px 10px' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '0px 10px' }}>\r\n            <input\r\n              placeholder='Search for sessions'\r\n              className='sessionSearch'\r\n              // onChange={(e) => handleSearchTutors(e)}\r\n              onKeyPress={handleSearchSession}\r\n            />\r\n            <>\r\n              <FilterListRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={toggleDrawer('right', true)} />\r\n              <Drawer\r\n              anchor={'right'}\r\n              open={state['right']}\r\n              onClose={toggleDrawer('right', false)}\r\n              >\r\n                {list('right')}\r\n              </Drawer>\r\n            </>\r\n            <>\r\n            <FilterListOffRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={() => {setDateRange([null, null]); setFilterValue(null); setFilterValue_(null); setFilterValue2(null); setOpenSnackBar(true); setFilterActive(false)}} />\r\n            <Snackbar open={openSnackBar} autoHideDuration={2000} onClose={handleCloseSnackBar} anchorOrigin={{ vertical, horizontal }} key={vertical + horizontal}>\r\n              <Alert onClose={handleCloseSnackBar} severity=\"info\" sx={{ width: '100%' }}>\r\n                Cleared all filters!\r\n              </Alert>\r\n            </Snackbar>\r\n            </>\r\n          </div>\r\n          {/* <div style={{display: 'flex', alignItems: 'center', padding: '10px 10px 10px 12px'}}>\r\n            <span style={{fontSize: '14px'}}>Duration: &nbsp;</span>\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DateRangePicker\r\n                label=\"Advanced keyboard\"\r\n                value={dateRange}\r\n                onChange={(newValue) => setDateRange(newValue)}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <input ref={startProps.inputRef} {...startProps.inputProps} className='dateRange' />\r\n                    <Box sx={{ mx: 1, fontSize: '14px' }}> to </Box>\r\n                    <input ref={endProps.inputRef} {...endProps.inputProps} className='dateRange' />\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>\r\n            <Button variant=\"contained\" size=\"small\" color='primary' style={{fontSize: '11px', lineHeight: '1.6', minWidth: '57px', marginLeft: '22px'}} onClick={handleFilterByDateRange}>\r\n              Apply\r\n            </Button>\r\n          </div> */}\r\n\r\n          {sessionListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <div className='sessionMenuWrapper'>\r\n              {sessionList?.map((c) => (\r\n                <div\r\n                // onClick={() => {\r\n                //   setCurrentChat(c);\r\n                //   setHighlighted(true);\r\n                //   setShowTemplateMsg(false);\r\n                //   setTaglabel('');\r\n                //   setTagUpdated('');\r\n                // }}\r\n                >\r\n                  <SessionList\r\n                    conversation={c}\r\n                    tutorList={tutorList}\r\n                    setTutorList={setTutorList}\r\n                    searchTutor={searchTutor}\r\n                    tutorCount={tutorCount}\r\n                    setAssignedTutor={setAssignedTutor}\r\n                    interestedTutors={interestedTutors}\r\n                    clientPayment={clientPayment}\r\n                    tutorPayout={tutorPayout}\r\n                    updated={updated}\r\n                    setUpdated={setUpdated}\r\n                    setReload={setReload}\r\n                    reload={reload}\r\n                    handleSearchTutors={handleSearchTutors}\r\n                    // setTutorTagUpdated={setTutorTagUpdated}\r\n                    // setTutorRatingUpdated={setTutorRatingUpdated}\r\n                    // currentChat={currentChat}\r\n                    // finalMessage={finalMessage}\r\n                    // alertMsg={alertMsg}\r\n                    // arrivalMessage={arrivalMessage}\r\n                    // alert={alert}\r\n                    // // newNotification={newNotification}\r\n                    // setAlert={setAlert}\r\n                    // msgCountUpdated={msgCountUpdated}\r\n                    // setMsgCountUpdated={setMsgCountUpdated}\r\n                    // setPinned={setPinned}\r\n                    // setMarkChat={setMarkChat}\r\n                    // setAlertUpdate={setAlertUpdate}\r\n                    // apiUrl={apiUrl}\r\n                  />\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  marginTop: '15px',\r\n                }}\r\n                count={Math.ceil(sessionCount / 10)}\r\n                page={sessionPage}\r\n                onChange={handleSessionList}\r\n              />\r\n            </div>\r\n          )}\r\n        </TabPanel>\r\n        <TabPanel value='2' style={{ padding: '16px 10px' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '0px 10px' }}>\r\n            <input\r\n              placeholder='Search for sessions'\r\n              className='sessionSearch'\r\n              // onChange={(e) => handleSearchTutors(e)}\r\n              onKeyPress={handleSearchSession}\r\n            />\r\n            <>\r\n              <FilterListRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={toggleDrawer('right', true)} />\r\n              <Drawer\r\n              anchor={'right'}\r\n              open={state['right']}\r\n              onClose={toggleDrawer('right', false)}\r\n              >\r\n                {list('right')}\r\n              </Drawer>\r\n            </>\r\n            <>\r\n            <FilterListOffRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={() => {setDateRange([null, null]); setFilterValue(null); setFilterValue_(null); setFilterValue2(null); setOpenSnackBar(true)}} />\r\n            <Snackbar open={openSnackBar} autoHideDuration={2000} onClose={handleCloseSnackBar} anchorOrigin={{ vertical, horizontal }} key={vertical + horizontal}>\r\n              <Alert onClose={handleCloseSnackBar} severity=\"info\" sx={{ width: '100%' }}>\r\n                Cleared all filters!\r\n              </Alert>\r\n            </Snackbar>\r\n            </>       \r\n            </div>\r\n          {sessionListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <div className='sessionMenuWrapper'>\r\n              {sessionList?.map((c) => (\r\n                <div\r\n                // onClick={() => {\r\n                //   setCurrentChat(c);\r\n                //   setHighlighted(true);\r\n                //   setShowTemplateMsg(false);\r\n                //   setTaglabel('');\r\n                //   setTagUpdated('');\r\n                // }}\r\n                >\r\n                  <SessionList\r\n                    conversation={c}\r\n                    tutorList={tutorList}\r\n                    setTutorList={setTutorList}\r\n                    searchTutor={searchTutor}\r\n                    tutorCount={tutorCount}\r\n                    setAssignedTutor={setAssignedTutor}\r\n                    interestedTutors={interestedTutors}\r\n                    clientPayment={clientPayment}\r\n                    tutorPayout={tutorPayout}\r\n                    updated={updated}\r\n                    setUpdated={setUpdated}\r\n                    setReload={setReload}\r\n                    reload={reload}                    \r\n                    handleSearchTutors={handleSearchTutors}\r\n\r\n                    // setTutorTagUpdated={setTutorTagUpdated}\r\n                    // setTutorRatingUpdated={setTutorRatingUpdated}\r\n                    // currentChat={currentChat}\r\n                    // finalMessage={finalMessage}\r\n                    // alertMsg={alertMsg}\r\n                    // arrivalMessage={arrivalMessage}\r\n                    // alert={alert}\r\n                    // // newNotification={newNotification}\r\n                    // setAlert={setAlert}\r\n                    // msgCountUpdated={msgCountUpdated}\r\n                    // setMsgCountUpdated={setMsgCountUpdated}\r\n                    // setPinned={setPinned}\r\n                    // setMarkChat={setMarkChat}\r\n                    // setAlertUpdate={setAlertUpdate}\r\n                    // apiUrl={apiUrl}\r\n                  />\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  marginTop: '15px',\r\n                }}\r\n                count={Math.ceil(sessionCount / 10)}\r\n                page={sessionPage}\r\n                onChange={handleSessionList}\r\n              />\r\n            </div>\r\n          )}\r\n        </TabPanel>\r\n        <TabPanel value='3' style={{ padding: '16px 10px' }}>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between', padding: '0px 10px' }}>\r\n            <input\r\n              placeholder='Search for sessions'\r\n              className='sessionSearch'\r\n              // onChange={(e) => handleSearchTutors(e)}\r\n              onKeyPress={handleSearchSession}\r\n            />\r\n            <>\r\n              <FilterListRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={toggleDrawer('right', true)} />\r\n              <Drawer\r\n              anchor={'right'}\r\n              open={state['right']}\r\n              onClose={toggleDrawer('right', false)}\r\n              >\r\n                {list('right')}\r\n              </Drawer>\r\n            </>\r\n            <>\r\n            <FilterListOffRoundedIcon style={{alignSelf: 'center', cursor: 'pointer'}} fontSize='medium' color='primary' onClick={() => {setDateRange([null, null]); setFilterValue(null); setFilterValue_(null); setFilterValue2(null); setOpenSnackBar(true)}} />\r\n            <Snackbar open={openSnackBar} autoHideDuration={2000} onClose={handleCloseSnackBar} anchorOrigin={{ vertical, horizontal }} key={vertical + horizontal}>\r\n              <Alert onClose={handleCloseSnackBar} severity=\"info\" sx={{ width: '100%' }}>\r\n                Cleared all filters!\r\n              </Alert>\r\n            </Snackbar>\r\n            </>\r\n          </div>\r\n\r\n          {sessionListLoading ? (\r\n            <div\r\n              style={{\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                marginTop: '100px',\r\n              }}\r\n            >\r\n              <CircularProgress />\r\n            </div>\r\n          ) : (\r\n            <div className='sessionMenuWrapper'>\r\n              {sessionList?.map((c) => (\r\n                <div\r\n                // onClick={() => {\r\n                //   setCurrentChat(c);\r\n                //   setHighlighted(true);\r\n                //   setShowTemplateMsg(false);\r\n                //   setTaglabel('');\r\n                //   setTagUpdated('');\r\n                // }}\r\n                >\r\n                  <SessionList\r\n                    conversation={c}\r\n                    tutorList={tutorList}\r\n                    setTutorList={setTutorList}\r\n                    searchTutor={searchTutor}\r\n                    tutorCount={tutorCount}\r\n                    setAssignedTutor={setAssignedTutor}\r\n                    interestedTutors={interestedTutors}\r\n                    clientPayment={clientPayment}\r\n                    tutorPayout={tutorPayout}\r\n                    updated={updated}\r\n                    setUpdated={setUpdated}\r\n                    setReload={setReload}\r\n                    reload={reload}\r\n                    handleSearchTutors={handleSearchTutors}\r\n                  />\r\n                </div>\r\n              ))}\r\n              <Pagination\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'center',\r\n                  marginTop: '15px',\r\n                }}\r\n                count={Math.ceil(sessionCount / 10)}\r\n                page={sessionPage}\r\n                onChange={handleSessionList}\r\n              />\r\n            </div>\r\n          )}\r\n        </TabPanel>\r\n      </TabContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\Reason.jsx",["432","433","434"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport TextareaAutosize from '@mui/material/TextareaAutosize'\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nexport default function FormDialog(props) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [reason, setReason] = React.useState();\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleSend=(e)=>{\r\n      e.preventDefault()\r\n      props.setReasonVal(reason)\r\n      props.setReason(true)\r\n      // props.setReasonDialog(false)\r\n      // setOpen(false);\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    props.setReason(false)\r\n    props.setReasonDialog(false)\r\n  };\r\n\r\n  React.useEffect(()=>{\r\n\r\n   if(props.reasonDialog){\r\n       setOpen(true)\r\n   }else(\r\n       setOpen(false)\r\n   )\r\n  },[props.reasonDialog])\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n        \r\n      </Button> */}\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Reason</DialogTitle>\r\n        <DialogContent>\r\n\r\n          {/* <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Reason\"\r\n            type=\"text\"\r\n            fullWidth\r\n            variant=\"outlined\"\r\n          /> */}\r\n          {/* <select onChange={(e)=>setReason(e)>\r\n            <option>You misbehaved with our agent. </option>\r\n            <option>You misbehaved with our agent. </option>\r\n          </select> */}\r\n        <TextareaAutosize\r\n        aria-label=\"minimum height\"\r\n        placeholder=\"Write the reason!\"\r\n        minRows={3}\r\n        style={{ width: 200 }}\r\n        onChange={(e)=>setReason(e)}\r\n        />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={handleSend}>Send</Button><span >{props.visibleCircularbar && <CircularProgress style={{height:\"25px\",width:\"25px\"}} /> }</span>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\SessionList.jsx",["435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./session.css\";\r\nimport moment from \"moment\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Menu from \"@mui/material/Menu\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport Badge from \"@mui/material/Badge\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Rating from \"@mui/material/Rating\";\r\nimport Box from \"@mui/material/Box\";\r\nimport StarIcon from \"@mui/icons-material/Star\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport Fab from \"@mui/material/Fab\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport base64 from \"base-64\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport NotificationsIcon from \"@mui/icons-material/Notifications\";\r\nimport ArrowRightAltIcon from \"@mui/icons-material/ArrowRightAlt\";\r\nimport { sendtemplateMsgUrl } from \"../../serviceUrls/Message-Services\";\r\n\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\n\r\nimport Pagination from \"@mui/material/Pagination\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\n\r\nimport StarPurple500SharpIcon from \"@mui/icons-material/StarPurple500Sharp\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport NotifiedTutors from \"./NotifiedTutors\";\r\nimport PendingIcon from \"@mui/icons-material/Pending\";\r\nimport NativeSelect from \"@mui/material/NativeSelect\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport NotificationsActiveIcon from \"@mui/icons-material/NotificationsActive\";\r\nimport CircleNotificationsIcon from \"@mui/icons-material/CircleNotifications\";\r\nimport ExpandMoreIcon from \"@mui/icons-material/ExpandMore\";\r\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\r\nimport DoNotDisturbIcon from \"@mui/icons-material/DoNotDisturb\";\r\nimport BorderColorIcon from \"@mui/icons-material/BorderColor\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport DoneOutlineRoundedIcon from \"@mui/icons-material/DoneOutlineRounded\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport AutorenewRoundedIcon from \"@mui/icons-material/AutorenewRounded\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport MarkEmailReadOutlinedIcon from \"@mui/icons-material/MarkEmailReadOutlined\";\r\nimport WhatsappOutlinedIcon from \"@mui/icons-material/WhatsappOutlined\";\r\nimport PriorityHighOutlinedIcon from \"@mui/icons-material/PriorityHighOutlined\";\r\nimport SettingsBackupRestoreIcon from \"@mui/icons-material/SettingsBackupRestore\";\r\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\r\nimport { NAME_SPACE, WAID } from \"../../utils/variables\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst HtmlTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: \"rgba(80, 80, 80, 0.92)\",\r\n    color: \"#ffff\",\r\n    fontWeight: \"500\",\r\n    maxWidth: 350,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid rgba(80, 80, 80, 0.92)\",\r\n  },\r\n}));\r\n\r\nconst SessionList = ({\r\n  conversation,\r\n  tutorList,\r\n  setTutorList,\r\n  searchTutor,\r\n  tutorCount,\r\n  setAssignedTutor,\r\n  interestedTutors,\r\n  clientPayment,\r\n  tutorPayout,\r\n  updated,\r\n  setUpdated,\r\n  reload,\r\n  setReload,\r\n  handleSearchTutors,\r\n}) => {\r\n  const [msg, setMsg] = useState([]);\r\n  const [alertText, setAlertText] = useState([]);\r\n  const [alertMessage, setAlertMessage] = useState([]);\r\n  // const [hide, setHide] = useState(false);\r\n  const [msgCount, setMsgCount] = useState();\r\n  const [value, setValue] = useState(2);\r\n  const [hover, setHover] = useState(-1);\r\n  const [showMenu, setShowMenu] = useState(false);\r\n  const [tagValue, setTagValue] = useState();\r\n  const [ratingVal, setRatingVal] = useState();\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [scroll, setScroll] = useState(\"paper\");\r\n  const descriptionElementRef = useRef(null);\r\n\r\n  const [tutorPage, setTutorPage] = useState(1);\r\n  const [tutorListLoading, setTutorListLoading] = useState(false);\r\n  const [sendingText, setSendingText] = useState(false);\r\n\r\n  const [color, setColor] = useState(false);\r\n  const [removedNum, setRemovedNum] = useState();\r\n  const [check, setCheck] = useState([]);\r\n  const [checked, setChecked] = useState(false);\r\n\r\n  const [showSessionDetails, setShowSessionDetails] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const [editTutorAmt, setEditTutorAmt] = useState(false);\r\n  const [taskStatus, setTaskStatus] = useState(\"\");\r\n\r\n  const [selectClientAmount, setSelectClientAmount] = useState();\r\n  const [selectCurrency, setSelectCurrency] = useState(\"USD\");\r\n  const [agentComment, setAgentComment] = useState();\r\n  const [tutorDealtAmount, setTutorDealtAmount] = useState();\r\n  const [openRefundWin, setOpenRefundWin] = useState(false);\r\n  const [virtualAccPayments, setVirtualAccPayments] = useState();\r\n  const [clientInfo, setClientInfo] = useState();\r\n  const [checkPaypal, setCheckPaypal] = useState(conversation?.show_paypal_url);\r\n  const [paypalOption, setPaypalOption] = useState(false);\r\n  const [isEditClientAmt, setIsEditClientAmt] = useState(false);\r\n  const [disableUpdate, setDisableUpdate] = useState(false);\r\n  const [disableUpdateTutor, setDisableUpdateTutor] = useState(false);\r\n  const [showSendTemplate, setShowSendTemplate] = useState(true);\r\n  const [sessionPayment, setSessionPayment] = useState(\r\n    conversation?.payment_status == \"paid\" ? true : false\r\n  );\r\n  const [refundAmount, setRefundAmount] = useState();\r\n  const [tutorDeadline, setTutorDeadline] = useState(\r\n    conversation?.tutor_deadline ? conversation?.tutor_deadline : \"\"\r\n  );\r\n  const [tutorDuration, setTutorDuration] = useState(\r\n    conversation?.tutor_duration ? conversation?.tutor_duration : \"\"\r\n  );\r\n\r\n  const [lastIndex, setLastIndex] = useState(1);\r\n  const [paymentStatusCheck,setPaymentStatusCheck] = useState(\"\");\r\n  let deviceNo = localStorage.getItem(\"device\");\r\n\r\n  const linkBaseURL = `https://client-response.tutorpoint.in/d${deviceNo}/live-session-form`;\r\n\r\n  // razorpay header\r\n  const payHeaders = {\r\n    username: \"rzp_live_Jk4vwq7tyL9Aeg\",\r\n    password: \"qUjOJWotN6x47WSDExJ4NURs\",\r\n  };\r\n\r\n  // paypal header\r\n  const paypalHeaders = {\r\n    username:\r\n      \"AfPpkQlf6R1TvJWkD-5_vq7DC0wnAk-xIVbDVAZb_Kw5y3mDvr1ujmggArTagrn8WALUZU4Y4esITtYS\",\r\n    password:\r\n      \"EMFMuTLku9sIqiY26uLHfhcYKsAoV77xaqanpDAZNsIiBJ0p6RrFk-1TdBaxknoGxbkDucu6UQZBhBro\",\r\n  };\r\n\r\n  // const socket = useRef();\r\n  // const alertIcon = useRef();\r\n  // const PF = process.env.REACT_APP_PUBLIC_FOLDER;\r\n  // const headerKey = {\r\n  //   Accept: 'application/json',\r\n  //   Authorization:\r\n  //     'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxMTYyMWZkZi0wYjJjLTQxYzAtOWZmMS1iZDk5NWZmYTQ2ZTUiLCJ1bmlxdWVfbmFtZSI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwibmFtZWlkIjoib2ZmaWNlQHR1dG9ycG9pbnQuaW4iLCJlbWFpbCI6Im9mZmljZUB0dXRvcnBvaW50LmluIiwiYXV0aF90aW1lIjoiMDgvMDQvMjAyMSAwODoxMTowMSIsImh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd3MvMjAwOC8wNi9pZGVudGl0eS9jbGFpbXMvcm9sZSI6IkFETUlOSVNUUkFUT1IiLCJleHAiOjI1MzQwMjMwMDgwMCwiaXNzIjoiQ2xhcmVfQUkiLCJhdWQiOiJDbGFyZV9BSSJ9.lSSh1EL29ksj23Y_rTSrLhYVwhOFyddK1c6bKU-_HB4',\r\n  // };\r\n\r\n  //   const [anchorEl, setAnchorEl] = useState(null);\r\n  //   const open = Boolean(anchorEl);\r\n  //   const handleClick = () => {\r\n  //     setShowMenu(!showMenu);\r\n  //   };\r\n  //   const handleClose = () => {\r\n  //     setAnchorEl(null);\r\n  //   };\r\n  //   console.log(msg);\r\n\r\n  // useEffect(() => {\r\n  //   const friendId = conversation.id;\r\n\r\n  //   const getUser = async () => {\r\n  //     try {\r\n  //       const res = await axios(getCustomersUrl + `/${friendId}`, {headers: {...headerKey}});\r\n  //       setUser(res.data);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getUser();\r\n  // }, [conversation]);\r\n\r\n  // useEffect(() => {\r\n  //   socket.current = io('ws://localhost:8900');\r\n  //   socket.current.on('getAlert', (msg) => {\r\n  //     // storeFiles(msg); //store incoming files data to excel\r\n  //     setAlertMsg([msg]);\r\n  //   });\r\n  // }, []);\r\n\r\n  // const [play] = useSound(notification);\r\n\r\n  // useEffect(() => {\r\n  //   const getMessages = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(\r\n  //         msgUrl + `/${conversation?.wa_id}?page=0&limit=20`,\r\n  //         {\r\n  //           headers: { ...headerKey },\r\n  //         }\r\n  //       );\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getMessages();\r\n  // }, [newNotification, alertMsg]);\r\n\r\n  // console.log(arrivalMessage.length);\r\n\r\n  // // useEffect(() => {\r\n  // //   play();\r\n  // // }, [arrivalMessage?.length])\r\n\r\n  // useEffect(() => {\r\n  //   const getAlert = async () => {\r\n  //     try {\r\n  //       const res = await axios.get(alertMsgUrl + `/${conversation?.wa_id}`, {\r\n  //         headers: {},\r\n  //       });\r\n  //       console.log(res.data);\r\n  //       // setMessages(() =>\r\n  //       //   res?.data?.messages?.items\r\n  //       //     .filter((f) => f.eventType === 'message')\r\n  //       //     .reverse()\r\n  //       // );\r\n  //       setMsg([...res?.data]);\r\n  //       setMsgCount(() => res?.data?.filter((i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id).length);\r\n  //       setHide(false);\r\n  //     } catch (err) {\r\n  //       console.log(err);\r\n  //     }\r\n  //   };\r\n  //   getAlert();\r\n  // }, [alertMsg, newNotification]);\r\n\r\n  // console.log(alertMessage);\r\n\r\n  // useEffect(() => {\r\n  //   setMsgCount(\r\n  //     () =>\r\n  //       alertMessage?.filter(\r\n  //         (i) => i.status === 'newMsg' && i.wa_id == conversation?.wa_id\r\n  //       ).length\r\n  //   );\r\n  // }, [alertMessage, alertMsg, newNotification]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleClick = () => {\r\n    setShowMenu(!showMenu);\r\n  };\r\n\r\n  const handleClickOpen = (scrollType) => () => {\r\n    setOpen(true);\r\n    setScroll(scrollType);\r\n    setTutorDeadline(conversation?.tutor_deadline);\r\n    setTutorDuration(conversation?.tutor_duration);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setCheck([]);\r\n    setChecked(false);\r\n  };\r\n\r\n  const handleOpenRefundWindow = () => {\r\n    setOpenRefundWin(true);\r\n  };\r\n\r\n  const handleCloseRefundWindow = () => {\r\n    setOpenRefundWin(false);\r\n  };\r\n\r\n  const handlePlinkupdate = async () => {\r\n    try{\r\n    const resPlink = await axios.get(\r\n      `${localStorage.getItem('api')}/api/payments/getPaymentLink/${conversation.plink_id}`,\r\n      {\r\n        headers: {\r\n          ...payHeaders,\r\n        },\r\n      }\r\n    );\r\n    if(resPlink){\r\n      setPaymentStatusCheck(\"\")\r\n    }else{\r\n      setPaymentStatusCheck(\"Error getting plink\");\r\n    }\r\n    \r\n\r\n    const resValink = await axios.get(\r\n      `${localStorage.getItem('api')}/api/payments/virtual_accounts/${conversation.va_id}/payments`,\r\n      {\r\n        headers: {\r\n          ...payHeaders,\r\n        },\r\n      }\r\n    );\r\n\r\n      if(resValink){\r\n        setPaymentStatusCheck(\"\")\r\n      }else{\r\n        setPaymentStatusCheck(\"Error in getting Va\");\r\n      }\r\n\r\n    let paymLinkAr = [];\r\n    resPlink?.data?.payments?.map(async (el) => {\r\n      paymLinkAr.push({payment_id: el?.payment_id, type:\"plink\"});\r\n    });\r\n    \r\n    resValink?.data?.items?.map(async (el) => {\r\n      paymLinkAr.push({payment_id: el?.id, type:\"vpa\"});\r\n    });\r\n    \r\n\r\n    const savePaymentInfo = await axios.post(\r\n      `${localStorage.getItem(\"api\")}/api/sessions/refreshPaymentInfo`,\r\n      {\r\n        session_id: conversation.session_id,\r\n        plink_id: conversation.plink_id,\r\n        paymentIdAr: paymLinkAr,\r\n        payment_status: resPlink?.data?.status,\r\n      },\r\n      {\r\n        headers: {\r\n          ...payHeaders,\r\n        },\r\n      }\r\n    );\r\n    console.log({ resPlink });\r\n    if(savePaymentInfo){\r\n      setPaymentStatusCheck(\"success\");\r\n      setUpdated(!updated);\r\n      toast.success(`Updated payment informations successfully!`, {\r\n        position: \"top-right\",\r\n        autoClose: 3000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n      });\r\n    }else{\r\n      setPaymentStatusCheck(\"Error in updating\");\r\n    }\r\n  }catch(err){\r\n    toast.error(`Something went wrong while updating payment informations!`, {\r\n      position: \"top-right\",\r\n      autoClose: 3000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n  };\r\nconsole.log({paymentStatusCheck})\r\n  // const handleVaUpdate = async () => {\r\n  //   const resVa = await axios.get(\r\n  //     `https://annular-arena-331607.el.r.appspot.com/api/payments/virtual_accounts/${conversation.va_id}`,\r\n  //     {\r\n  //       headers: {\r\n  //         ...payHeaders,\r\n  //       },\r\n  //     }\r\n  //   );\r\n  //  console.log({resVa:resVa.data})\r\n  //   // let paymLinkAr = [];\r\n  //   // resPlink?.data?.payments?.map(async (el) => {\r\n  //   //   paymLinkAr.push(el?.payment_id);\r\n  //   // });\r\n\r\n  //   // const savePaymentInfo = await axios.post(\r\n  //   //   \"http://localhost:8800/api/sessions/refreshPaymentInfo\",\r\n  //   //   {\r\n  //   //     session_id: conversation.session_id,\r\n  //   //     plink_id: conversation.plink_id,\r\n  //   //     paymentIdAr: paymLinkAr,\r\n  //   //     payment_status: resPlink?.data?.status,\r\n  //   //   },\r\n  //   //   {\r\n  //   //     headers: {\r\n  //   //       ...payHeaders,\r\n  //   //     },\r\n  //   //   }\r\n  //   // );\r\n  //   // console.log({ resPlink });\r\n  // };\r\n\r\n  // const handleVaUpdate =()=>{\r\n  //   createVirtualAcc()\r\n\r\n  // }\r\n\r\n  useEffect(() => {\r\n    if (open) {\r\n      const { current: descriptionElement } = descriptionElementRef;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [open]);\r\n\r\n  //fetch virtual account's all payment details\r\n  useEffect(() => {\r\n    // const getVirtualAccount = async () => {\r\n    //   const res = await axios.get(\r\n    //     `https://annular-arena-331607.el.r.appspot.com/api/payments/virtual_accounts/${conversation?.va_id}/payments`,\r\n    //     {\r\n    //       headers: { ...payHeaders },\r\n    //     }\r\n    //   );\r\n    //   setVirtualAccPayments(res?.data?.items);\r\n    // };\r\n    const getClient = async () => {\r\n      const res = await axios.get(\r\n        `${localStorage.getItem(\"api\")}/api/sessions/getclientinfo/${\r\n          conversation?.client_id\r\n        }`\r\n      );\r\n      setClientInfo(res?.data);\r\n    };\r\n\r\n    //saving tutorpayment status\r\n    const updateTutorPaymentStatus = async (status) => {\r\n      const payload = {\r\n        tutor_payment_status: status,\r\n      };\r\n      try {\r\n        const res = await axios.put(\r\n          `${localStorage.getItem(\r\n            \"api\"\r\n          )}/api/sessions/updateTutorPaymentStatus/${conversation?.session_id}`,\r\n          payload\r\n        );\r\n        console.log(res);\r\n        // setUpdated(!updated);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    // if(conversation?.va_id) {\r\n    //   getVirtualAccount();\r\n    // }\r\n    getClient();\r\n    if (\r\n      conversation?.tutor_payment_status != \"paid\" &&\r\n      conversation?.assigned_tutors &&\r\n      conversation?.assigned_tutors?.filter(\r\n        (e) => e?.tutor_unassigned == \"assigned\"\r\n      )?.length > 0 &&\r\n      conversation?.assigned_tutors?.filter(\r\n        (e) => e?.tutor_unassigned == \"assigned\"\r\n      )?.length ==\r\n        conversation?.assigned_tutors\r\n          ?.filter((e) => e?.tutor_unassigned == \"assigned\")\r\n          ?.filter(\r\n            (f) =>\r\n              f?.pout_info?.filter((f) => f.status == \"processed\").length > 0\r\n          ).length\r\n    ) {\r\n      updateTutorPaymentStatus(\"paid\");\r\n    }\r\n  }, []);\r\n\r\n  // payment methods generation for client\r\n  // razorpay link\r\n  const getnewPaymentLink = async () => {\r\n    try {\r\n      const payload = {\r\n        reference_id: \"ssn_ref\" + Math.floor(new Date().getTime() / 1000.0),\r\n        session_id: conversation?.session_id,\r\n        amount: selectClientAmount * 100,\r\n        currency: selectCurrency,\r\n        show_default_blocks: paypalOption,\r\n      };\r\n      const res = await axios.post(\r\n        `${localStorage.getItem('api')}/api/sessions/new-payment-link`,\r\n        payload,\r\n        {\r\n          headers: {\r\n            ...payHeaders,\r\n          },\r\n        }\r\n      );\r\n      const paymentPayload = {\r\n        name: \"\",\r\n        from: \"\",\r\n        wa_id: conversation?.client_waId,\r\n        templateName: `clientprice_setting_${WAID}`,\r\n        templateText:\r\n          \"Hi *{{1}}*, This is Tutorpoint\\n\\nWe have set the price for the session with Session ID - {{2}}\\nThe price is {{3}} {{4}}.\\nPlease click on the button below to get back to the details and pay the required amount\",\r\n        template: {\r\n          namespace: NAME_SPACE,\r\n          language: \"en\",\r\n        },\r\n        param1: \"Price Quoted for Session \" + conversation?.session_id,\r\n        param2: conversation?.client_name,\r\n        param3: conversation?.session_id,\r\n        param4: selectClientAmount,\r\n        param5: selectCurrency,\r\n        param6: `d${deviceNo}/live-session-form/${conversation?.session_id}/${conversation?.client_id}`,\r\n        button: \"\",\r\n        timestamp: \"\",\r\n        operatorName: \"\",\r\n        isOwner: true,\r\n        status: \"\",\r\n        ticketId: \"\",\r\n        eventType: \"template\",\r\n      };\r\n      const sendNewPaymentMsg = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/messages/new-payment-notification`,\r\n        paymentPayload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      // setPaymentLink(res?.data?.result);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  // vpa details\r\n  const createVirtualAcc = async () => {\r\n    try {\r\n      const payload = {\r\n        session_id: conversation?.session_id,\r\n        receivers: {\r\n          types: [\"bank_account\", \"vpa\"],\r\n        },\r\n        description: \"Virtual Account created for tutorpoint\",\r\n        close_by: 1681615838,\r\n        notes: {\r\n          project_name: \"Banking Software\",\r\n        },\r\n      };\r\n      const res = await axios.post(\r\n        `${localStorage.getItem('api')}/api/payments/virtual_accounts`,\r\n        payload,\r\n        {\r\n          headers: {\r\n            ...payHeaders,\r\n          },\r\n        }\r\n      );\r\n      console.log(res);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  // paypal link\r\n  // const createPaypalLink = async () => {\r\n  //   try {\r\n  //     const payload = {\r\n  //       session_id: conversation?.session_id,\r\n  //       invoice_number: `#${conversation?.session_id}`,\r\n  //       reference: `ED${conversation?.client_id}`,\r\n  //       invoice_date: new Date().toISOString().slice(0, 10),\r\n  //       // payment_due_date: new Date(moment(new Date()).add(10, 'days').calendar()).toISOString().slice(0, 10),\r\n  //       client_name: clientInfo?.client_name,\r\n  //       client_email: clientInfo?.email,\r\n  //       item_name: `${conversation?.subject.toUpperCase()} ${conversation?.type}`,\r\n  //       amount: (conversation?.client_amount/100).toString(),\r\n  //       currency: conversation?.currency\r\n  //     };\r\n  //     const res = await axios.post(`${localStorage.getItem('api')}/api/payments/paypal/invoicing`, payload, {\r\n  //       headers: {\r\n  //         ...paypalHeaders,\r\n  //       },\r\n  //     });\r\n  //     console.log(res);\r\n  //     const payload_ = {\r\n  //       session_id: conversation?.session_id,\r\n  //       href: res?.data?.href\r\n  //     };\r\n  //     const paypal_link = await axios.post(`${localStorage.getItem('api')}/api/payments/paypal/send-invoice`, payload_, {\r\n  //       headers: {\r\n  //         ...paypalHeaders,\r\n  //       },\r\n  //     });\r\n  //     console.log(paypal_link);\r\n  //   } catch (err) {\r\n  //     console.log(err);\r\n  //   }\r\n  // };\r\n\r\n  // paypal link activation/inactivation\r\n  // const handleChangePaypalStatus = async (event) => {\r\n  //   setCheckPaypal(event.target.checked);\r\n  //   if(!conversation?.paypal_url) {\r\n  //     await createPaypalLink();\r\n  //   }\r\n  //   const payload = {\r\n  //     show_paypal_url: !checkPaypal,\r\n  //   };\r\n  //   await axios.put(\r\n  //     `${localStorage.getItem('api')}/api/sessions/active-inactive-paypal_link/${conversation?.session_id}`,\r\n  //     payload\r\n  //   );\r\n  // };\r\n\r\n  const clientAmtHandler = async () => {\r\n    if (selectClientAmount) {\r\n      setDisableUpdate(true);\r\n      await getnewPaymentLink();\r\n      await createVirtualAcc();\r\n      setIsEditClientAmt(false);\r\n      setDisableUpdate(false);\r\n      setUpdated(!updated);\r\n    }\r\n  };\r\n\r\n  const handleCheckPayPal = (event) => {\r\n    setPaypalOption(event.target.checked);\r\n  };\r\n  const tutorAmtHandler = async () => {\r\n    setDisableUpdateTutor(true);\r\n    const payload = {\r\n      session_id: conversation?.session_id,\r\n      tutor_dealt_amount: tutorDealtAmount * 100,\r\n    };\r\n    try {\r\n      const response = await axios.put(\r\n        `${localStorage.getItem(\"api\")}/api/sessions/update-tutor-amount`,\r\n        payload\r\n      );\r\n      setDisableUpdateTutor(false);\r\n      setEditTutorAmt(false);\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setDisableUpdateTutor(false);\r\n    }\r\n  };\r\n\r\n  const handleTutorList = async (event, value) => {\r\n    if (searchTutor) {\r\n      setTutorListLoading(true);\r\n      setTutorPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors/${searchTutor}`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: \"\",\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setTutorList(res.data.result);\r\n        setTutorListLoading(false);\r\n        setChecked(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else {\r\n      setTutorListLoading(true);\r\n      setTutorPage(value);\r\n      try {\r\n        const res = await axios.get(\r\n          `${localStorage.getItem('api')}/api/tutor/getTutors`,\r\n          {\r\n            params: {\r\n              page: value,\r\n              limit: 20,\r\n            },\r\n          },\r\n          {\r\n            headers: \"\",\r\n          }\r\n        );\r\n        console.log(res.data);\r\n        setTutorList(res.data.result);\r\n        setTutorListLoading(false);\r\n        setChecked(false);\r\n        // setLoadingMsg(false);\r\n        // setPage(page + 1);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCheck = (tutor) => {\r\n    if (check?.find((element) => element.wa_id == tutor.wa_id)) {\r\n      let index = check?.findIndex((element) => {\r\n        if (element.wa_id === tutor.wa_id) {\r\n          return true;\r\n        }\r\n      });\r\n      console.log(index);\r\n      // let index = check.indexOf(val);\r\n      let removedNo = check.splice(index, 1);\r\n      console.log(check);\r\n      setCheck(check);\r\n      console.log(removedNo);\r\n      setRemovedNum(removedNo[0].wa_id);\r\n      setColor(false);\r\n    } else {\r\n      setCheck([...check, tutor]);\r\n      setColor(true);\r\n    }\r\n  };\r\n  console.log(check);\r\n\r\n  const shortText = (text) => {\r\n    if (text.length > 16) {\r\n      return `${text.slice(0, 16)}..`;\r\n    } else if (text.length <= 16) {\r\n      return text;\r\n    }\r\n  };\r\n\r\n  const notify = (msg) =>\r\n    toast.error(`Failed to send WhatsApp notification to ${msg}`, {\r\n      position: \"top-right\",\r\n      autoClose: 10000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n\r\n  // send template message\r\n  const sendTemplateAlert = async () => {\r\n    setShowSendTemplate(false);\r\n    // setTutorListLoading(true);\r\n    setSendingText(true);\r\n    try {\r\n      const payload1 = {\r\n        sessionId: conversation?.session_id,\r\n        tutor_deadline: tutorDeadline,\r\n        tutor_duration: tutorDuration,\r\n      };\r\n      const res = await axios.put(\r\n        `${localStorage.getItem(\"api\")}/api/sessions/set-tutor-deadline`,\r\n        payload1\r\n      );\r\n      for (let i = 0; i < check.length; i++) {\r\n        const payload = {\r\n          name: check[i].name,\r\n          from: \"\",\r\n          wa_id: check[i].wa_id,\r\n          templateName:\r\n            conversation.type == \"Live Session\"\r\n              ? `live_session_tutor_notify_${WAID}`\r\n              : conversation.type == \"Assignment\" || conversation.type == 'Project'\r\n              ? `assign_session_tutor_notify_${WAID}`\r\n              : \"\",\r\n          templateText: `Hey ! We have a session for you. \\n\\nSession ID : ${conversation?.session_id}\\nSubject/Topic name is *{{2}}* \\nDate and Time is *{{3}}* \\nDuration is *{{4}}*  \\nWe will pay you *{{5}}* \\n\\nPlease check the study materials by pressing the button below. Are you confident in this subject? Can you perform very well in this session? If yes, then press on the below button to show your interest. \\n\\nPlease wait after you show your interest. We will get back to you shortly to get your confirmation for this session. \\nDisclaimer:  \\n*1.Never take these sessions casually. They impact your ratings.*  \\n*2. Showing interest doesn't mean that we have assigned the session to you.*  \\n\\nTo stop receiving Whatsapp notifications from us, send an official email to us.`,\r\n          template: {\r\n            namespace: NAME_SPACE,\r\n            language: \"en\",\r\n          },\r\n          param1: \"New \" + conversation?.type + \" Available\",\r\n          param2:\r\n            conversation?.type.slice(0, 4).toUpperCase() +\r\n            conversation?.session_id,\r\n          param3: conversation?.subject.toUpperCase(),\r\n          param4: new Date(\r\n            tutorDeadline ? tutorDeadline : conversation?.deadline\r\n          ).toLocaleString(),\r\n          param5:\r\n            (tutorDuration ? tutorDuration : conversation?.duration) +\r\n            \" (hh : mm)\",\r\n          param6: `${conversation?.tutor_dealt_amount / 100} INR`,\r\n          param7: `d${deviceNo}/tutorForm/${conversation?.session_id}/${check[i].tutor_id}`,\r\n          button: \"\",\r\n          timestamp: \"\",\r\n          operatorName: \"\",\r\n          isOwner: true,\r\n          status: \"\",\r\n          ticketId: \"\",\r\n          eventType: \"template\",\r\n        };\r\n        try {\r\n        await axios\r\n          .post(\r\n            `${localStorage.getItem(\"api\")}/api/messages/tutorTemplate`,\r\n            payload,\r\n            {\r\n              headers: \"\",\r\n            }\r\n          )\r\n          .then(\r\n            async (res) => {\r\n              console.log(res);\r\n              // email notification\r\n              if (check[i].email) {\r\n                /* whatsapp and email both */\r\n                const payload2 = {\r\n                  name: check[i].name,\r\n                  email: check[i].email,\r\n                  tutorId: check[i].tutor_id,\r\n                  sessionId: conversation?.session_id,\r\n                  wa_id: check[i].wa_id,\r\n                  templateName:\r\n                    conversation.type == \"Live Session\"\r\n                      ? `live_session_tutor_notify_${WAID}`\r\n                      : conversation.type == \"Assignment\"  || conversation.type == 'Project'\r\n                      ? `assign_session_tutor_notify_${WAID}`\r\n                      : \"\",\r\n                  param1: \"New \" + conversation?.type + \" Available\",\r\n                  param2:\r\n                    conversation?.type.slice(0, 4).toUpperCase() +\r\n                    conversation?.session_id,\r\n                  param3: conversation?.subject.toUpperCase(),\r\n                  param4: new Date(\r\n                    tutorDeadline ? tutorDeadline : conversation?.deadline\r\n                  ).toLocaleString(),\r\n                  param5:\r\n                    (tutorDuration ? tutorDuration : conversation?.duration) +\r\n                    \" (hh : mm)\",\r\n                  param6: `${conversation?.tutor_dealt_amount / 100} INR`,\r\n                  param7: `d${deviceNo}/tutorForm/${conversation?.session_id}/${check[i].tutor_id}`,\r\n                };\r\n                await axios.post(\r\n                  `${localStorage.getItem(\r\n                    \"api\"\r\n                  )}/api/sessions/tutorEmailNotification`,\r\n                  payload2,\r\n                  {\r\n                    headers: \"\",\r\n                  }\r\n                );\r\n\r\n                const paydata = {\r\n                  session_id: conversation.session_id,\r\n                  notified_tutors: { name: check[i]?.name, wa_id: check[i]?.wa_id, tutor_id: check[i]?.tutor_id, timestamp: Math.floor(Date.now() / 1000), medium: 'wa-mail'}\r\n                };\r\n                const res2 = await axios.post(\r\n                  `${localStorage.getItem(\r\n                    \"api\"\r\n                  )}/api/sessions/updateNotifiedTutors`,\r\n                  paydata,\r\n                  {\r\n                    headers: \"\",\r\n                  }\r\n                );\r\n                console.log(res2);\r\n              } else {\r\n                /* only whatsapp */\r\n                const paydata = {\r\n                  session_id: conversation.session_id,\r\n                  notified_tutors: { name: check[i]?.name, wa_id: check[i]?.wa_id, tutor_id: check[i]?.tutor_id, timestamp: Math.floor(Date.now() / 1000), medium: 'wa'}\r\n                };\r\n                const res2 = await axios.post(\r\n                  `${localStorage.getItem(\r\n                    \"api\"\r\n                  )}/api/sessions/updateNotifiedTutors`,\r\n                  paydata,\r\n                  {\r\n                    headers: \"\",\r\n                  }\r\n                );\r\n                console.log(res2);\r\n              }\r\n            },\r\n            async (error) => {\r\n              console.log(error);\r\n              notify(check[i].name);\r\n              /* only email */\r\n              const payload2 = {\r\n                name: check[i].name,\r\n                email: check[i].email,\r\n                tutorId: check[i].tutor_id,\r\n                sessionId: conversation?.session_id,\r\n                wa_id: check[i].wa_id,\r\n                templateName:\r\n                  conversation.type == \"Live Session\"\r\n                    ? `live_session_tutor_notify_${WAID}`\r\n                    : conversation.type == \"Assignment\"  || conversation.type == 'Project'\r\n                    ? `assign_session_tutor_notify_${WAID}`\r\n                    : \"\",\r\n                param1: \"New \" + conversation?.type + \" Available\",\r\n                param2:\r\n                  conversation?.type.slice(0, 4).toUpperCase() +\r\n                  conversation?.session_id,\r\n                param3: conversation?.subject.toUpperCase(),\r\n                param4: new Date(\r\n                  tutorDeadline ? tutorDeadline : conversation?.deadline\r\n                ).toLocaleString(),\r\n                param5:\r\n                  (tutorDuration ? tutorDuration : conversation?.duration) +\r\n                  \" (hh : mm)\",\r\n                param6: `${conversation?.tutor_dealt_amount / 100} INR`,\r\n                param7: `d${deviceNo}/tutorForm/${conversation?.session_id}/${check[i].tutor_id}`,\r\n                medium: \"mail\",\r\n                notified_tutors: { name: check[i]?.name, wa_id: check[i]?.wa_id, tutor_id: check[i]?.tutor_id, timestamp: Math.floor(Date.now() / 1000), medium: 'mail'}\r\n              };\r\n              await axios.post(\r\n                `${localStorage.getItem(\r\n                  \"api\"\r\n                )}/api/sessions/tutorEmailNotification`,\r\n                payload2,\r\n                {\r\n                  headers: \"\",\r\n                }\r\n              );\r\n\r\n              // setShowSendTemplate(true);\r\n              // setTutorListLoading(false);\r\n            }\r\n          );\r\n\r\n        //send push notification to app\r\n        let payloadTutor = {\r\n          tutor_id: check[i].tutor_id,\r\n        }\r\n        if(check[i]?.device_type === 'tp') { \r\n          await axios.post(`https://device6chatapi.el.r.appspot.com/api/tutor/increaseNotificationCount`, payloadTutor, {\r\n          headers: '',\r\n          });\r\n        }\r\n\r\n        // setTimeout(() => {\r\n        //   console.log('This will run after 0.1 second!');\r\n        //   setSent(!sent);\r\n        // }, 100);\r\n        // setShowTemplateMsg(false);\r\n\r\n        } catch (err) {\r\n          console.log(err);\r\n          setShowSendTemplate(true);\r\n          // alert('Failed to send template message!');\r\n        }\r\n      }\r\n      const workStatusPayload = {\r\n        status: \"Tutors Notified\",\r\n      };\r\n      const res3 = await axios.put(\r\n        `${localStorage.getItem(\"api\")}/api/sessions/updateSessionStatus/${\r\n          conversation?.session_id\r\n        }`,\r\n        workStatusPayload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setOpen(false);\r\n      setCheck([]);\r\n      setChecked(false);\r\n      setShowSendTemplate(true);\r\n      setUpdated(!updated);\r\n      // setTutorListLoading(false);\r\n      setSendingText(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setShowSendTemplate(true);\r\n      // setTutorListLoading(false);\r\n      setSendingText(false);\r\n      alert(\"Failed to send notification!\");\r\n    }\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    if (check.length >= 0 && checked === false) {\r\n      let arr = [];\r\n      tutorList?.filter((f) => f?.tutor_status == \"active\").forEach((e) => {\r\n        // let obj = {\r\n        //   wa_id: e.wa_id,\r\n        //   tutor_id: e.tutor_id,\r\n        //   name: e.name,\r\n        //   rating: e.rating,\r\n        // };\r\n        if (!check.find((f) => f.wa_id == e.wa_id)) {\r\n          arr.push(e);\r\n        }\r\n      });\r\n      setCheck([...check, ...arr]);\r\n      setChecked(true);\r\n    } else if (checked) {\r\n      setCheck([]);\r\n      setChecked(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseSessionDetails = () => {\r\n    setShowSessionDetails(false);\r\n    setEdit(false);\r\n    setReload(!reload);\r\n  };\r\n  const handleOpenSessionDetails = () => {\r\n    setReload(!reload);\r\n    setShowSessionDetails(true);\r\n  };\r\n\r\n  const handleChangeStatus = async (event) => {\r\n    setTaskStatus(event.target.value);\r\n    console.log(event.target.value);\r\n    if (event.target.value) {\r\n      const payload = {\r\n        status: event.target.value,\r\n      };\r\n      let payload1;\r\n      if (event.target.value === \"Completed\") {\r\n        payload1 = {\r\n          clientId: conversation?.client_id,\r\n          sessionId: conversation?.session_id,\r\n          sessionStatus: \"completed\",\r\n        };\r\n      } else {\r\n        payload1 = {\r\n          clientId: conversation?.client_id,\r\n          sessionId: conversation?.session_id,\r\n          sessionStatus: event.target.value,\r\n        };\r\n      }\r\n      try {\r\n        const res = await axios.put(\r\n          `${localStorage.getItem(\"api\")}/api/sessions/updateSessionStatus/${\r\n            conversation.session_id\r\n          }`,\r\n          payload\r\n        );\r\n        const resSolnFolderAccess = await axios.post(\r\n          `${localStorage.getItem(\"api\")}/api/sessions/solutionFolderAccess`,\r\n          payload1\r\n        );\r\n        if (resSolnFolderAccess) {\r\n          console.log({\r\n            resultSolutionAccess: resSolnFolderAccess.data.driveType,\r\n          });\r\n        } else {\r\n          console.log(\"drive permission doesnot change\");\r\n        }\r\n        // cancel tutors after session is completed\r\n        if (\r\n          event.target.value === \"Solution Sent\" &&\r\n          conversation?.notified_tutors.length > 0\r\n        ) {\r\n          try {\r\n            //   for(let i = 0; i < conversation?.notified_tutors.length; i++) {\r\n            //   const _payload_ = {\r\n            //     status: true,\r\n            //   }\r\n            //   const res = await axios.put(`https://annular-arena-331607.el.r.appspot.com/api/sessions/cancelNotifiedTutor/${conversation?.session_id}/${conversation?.notified_tutors[i].tutor_id}`, _payload_, {\r\n            //     headers: ''\r\n            //   });\r\n            // }\r\n            let payload2 = {\r\n              name: conversation?.client_name,\r\n              from: \"\",\r\n              wa_id: conversation?.client_waId,\r\n              templateName: \"session_done\",\r\n              templateText: `Hi ${conversation?.client_name}, The session with Session ID- ${conversation?.session_id} is completed now. You can view the solution by clicking the Solution button below.`,\r\n              template: {\r\n                namespace: NAME_SPACE,\r\n                language: \"en\",\r\n              },\r\n              param1: conversation?.session_id,\r\n              param2: conversation?.client_name,\r\n              param3: conversation?.session_id,\r\n              param4: conversation?.folderlink.replace(\r\n                \"https://drive.google.com/\",\r\n                \"\"\r\n              ),\r\n              button: \"\",\r\n              timestamp: \"\",\r\n              operatorName: \"\",\r\n              isOwner: true,\r\n              status: \"\",\r\n              ticketId: \"\",\r\n              eventType: \"template\",\r\n            };\r\n            await axios.post(\r\n              `${localStorage.getItem(\r\n                \"api\"\r\n              )}/api/messages/sessionCompleteTemplate`,\r\n              payload2,\r\n              {\r\n                headers: \"\",\r\n              }\r\n            );\r\n            setUpdated(!updated);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        }\r\n        setTaskStatus(event.target.value);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n  const descriptionElementRef_ = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (showSessionDetails) {\r\n      const { current: descriptionElement } = descriptionElementRef_;\r\n      if (descriptionElement !== null) {\r\n        descriptionElement.focus();\r\n      }\r\n    }\r\n  }, [showSessionDetails]);\r\n\r\n  const agentCommentHandler = async (event) => {\r\n    event.preventDefault();\r\n    if (agentComment) {\r\n      const payload = {\r\n        session_id: conversation.session_id,\r\n        agent_comments: {\r\n          agent_comment: agentComment,\r\n          timestamp: new Date().toISOString(),\r\n        },\r\n      };\r\n      try {\r\n        const res = await axios.put(\r\n          `${localStorage.getItem(\"api\")}/api/sessions/saveAgentComment`,\r\n          payload\r\n        );\r\n        console.log(res);\r\n        setAgentComment(\"\");\r\n        setUpdated(!updated);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleInitiateRefund = async (payId) => {\r\n    try {\r\n      const payload = {\r\n        amount: +refundAmount * 100,\r\n      };\r\n\r\n      const resp1 = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/payments/initiate-refund/${payId}`,\r\n        payload,\r\n        {\r\n          headers: {\r\n            ...payHeaders,\r\n          },\r\n        }\r\n      );\r\n\r\n      const payload2 = {\r\n        refundInfo: resp1.data,\r\n      };\r\n      const resp = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/payments/refund/${\r\n          conversation?.session_id\r\n        }/${payId}`,\r\n        payload2,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  console.log(clientPayment);\r\n\r\n  // change session payment status manually\r\n  const handleSessionPaymentStatus = async (event) => {\r\n    // console.log(event.target.checked);\r\n    // setSessionPayment(event.target.checked);\r\n    try {\r\n      const payload = {\r\n        sessionId: conversation?.session_id,\r\n        payment_status: event.target.checked ? \"paid\" : \"not_paid\",\r\n      };\r\n      const res = await axios.put(\r\n        `${localStorage.getItem(\r\n          \"api\"\r\n        )}/api/sessions/update-session-payment-status`,\r\n        payload\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const snackBarPos = {\r\n    vertical: \"top\",\r\n    horizontal: \"center\",\r\n  };\r\n  const { vertical, horizontal } = snackBarPos;\r\n\r\n  const [alertText_, setAlertText_] = useState(\"\");\r\n  const [openSnackBar, setOpenSnackBar] = useState(false);\r\n\r\n  const handleCloseSnackBar = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenSnackBar(false);\r\n  };\r\n\r\n  // validate contact\r\n  const handleContactValidate = async (waId) => {\r\n    let payload = {\r\n      wa_id: `+${waId}`,\r\n    };\r\n    try {\r\n      const res = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/conversations/contactValidation`,\r\n        payload\r\n      );\r\n      setOpenSnackBar(true);\r\n      setAlertText_(res.data.contacts[0].status + \" contact\");\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleTutorDeadline = (e) => {\r\n    if (new Date(e.target.value) < new Date(conversation?.deadline)) {\r\n      setTutorDeadline(e.target.value);\r\n    } else {\r\n      alert(\"Tutor deadline must be before the session deadline!\");\r\n    }\r\n  };\r\n\r\n  const today = new Date();\r\n  let after2days = new Date();\r\n  after2days.setDate(today.getDate() + 2);\r\n\r\n  // console.log(conversation?.assigned_tutors?.map(i => i?.pout_info?.amount).filter((e) => { return e !== undefined }).reduce((a, b) => a + b, 0))\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          conversation.type == \"Live Session\"\r\n            ? \"sessionlist live\"\r\n            : conversation.type == \"Assignment\"\r\n            ? \"sessionlist\"\r\n            : conversation.type == \"Project\"\r\n            ? \"sessionlist project\"\r\n            : \"sessionlist notFilled\"\r\n        }\r\n        // onClick={() => {\r\n        //   updateAlert(conversation?.wa_id);\r\n        // }}\r\n      >\r\n        <div style={{ marginBottom: \"-4px\" }} className=\"userTab_\">\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"38%\" }}>\r\n            <div style={{ height: \"22px\", fontSize: \"13px\" }}>SI:</div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n                fontWeight: \"bolder\",\r\n              }}\r\n            >\r\n              &nbsp;{conversation?.session_id}\r\n              <HtmlTooltip\r\n                placement=\"right\"\r\n                title={\r\n                  <>\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                      Subject:{\" \"}\r\n                      <span style={{ fontSize: \"12px\", fontWeight: \"normal\" }}>\r\n                        {conversation?.subject}\r\n                      </span>\r\n                    </Typography>\r\n                    {conversation?.client_comments && (\r\n                      <Typography\r\n                        color=\"inherit\"\r\n                        style={{\r\n                          fontSize: \"13.5px\",\r\n                          fontWeight: \"600\",\r\n                          marginBottom: \"5px\",\r\n                        }}\r\n                      >\r\n                        Work Details:{\" \"}\r\n                        <span\r\n                          style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                        >\r\n                          {conversation?.client_comments}\r\n                        </span>\r\n                      </Typography>\r\n                    )}\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                      Created At:{\" \"}\r\n                      <span style={{ fontSize: \"12px\", fontWeight: \"normal\" }}>\r\n                        {new Date(conversation?.createdAt).toLocaleDateString(\r\n                          \"en-IN\"\r\n                        ) + moment(conversation?.createdAt).format(\", h:mm a\")}\r\n                      </span>\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                      Updated At:{\" \"}\r\n                      <span style={{ fontSize: \"12px\", fontWeight: \"normal\" }}>\r\n                        {new Date(conversation?.updatedAt).toLocaleDateString(\r\n                          \"en-IN\"\r\n                        ) + moment(conversation?.updatedAt).format(\", h:mm a\")}\r\n                      </span>\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                      Tutor Deadline:{\" \"}\r\n                      <span style={{ fontSize: \"12px\", fontWeight: \"normal\" }}>\r\n                        {new Date(\r\n                          conversation?.tutor_deadline\r\n                        ).toLocaleDateString(\"en-IN\") +\r\n                          moment(conversation?.tutor_deadline).format(\r\n                            \", h:mm a\"\r\n                          )}\r\n                      </span>\r\n                    </Typography>\r\n                    <Typography\r\n                      color=\"inherit\"\r\n                      style={{\r\n                        fontSize: \"13.5px\",\r\n                        fontWeight: \"600\",\r\n                        marginBottom: \"5px\",\r\n                      }}\r\n                    >\r\n                      Form Creator:{\" \"}\r\n                      <span style={{ fontSize: \"12px\", fontWeight: \"normal\" }}>\r\n                        {conversation?.opExecutive ? conversation?.opExecutive : 'N/A'}\r\n                      </span>\r\n                    </Typography>\r\n                  </>\r\n                }\r\n              >\r\n                <InfoIcon\r\n                  fontSize=\"small\"\r\n                  style={{\r\n                    fontSize: \"12px\",\r\n                    cursor: \"pointer\",\r\n                    marginLeft: \"1px\",\r\n                  }}\r\n                />\r\n              </HtmlTooltip>\r\n            </div>\r\n          </div>\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"24%\" }}>\r\n            <div style={{ height: \"22px\", fontSize: \"13px\" }}>CI:</div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n                fontWeight: \"bolder\",\r\n              }}\r\n            >\r\n              &nbsp;{conversation.client_id}\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: \"38%\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"end\",\r\n              fontSize: \"14px\",\r\n              fontWeight: \"800\",\r\n              maxWidth: \"100px\",\r\n              textAlign: \"center\",\r\n              // marginTop: '15px',\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignSelf: \"center\",\r\n                cursor: \"pointer\",\r\n                marginRight: \"4px\",\r\n              }}\r\n            >\r\n              {interestedTutors &&\r\n                interestedTutors?.find(\r\n                  (i) => i.session_id == conversation.session_id\r\n                ) && <div className=\"circle red\"></div>}\r\n            </div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignSelf: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={handleClickOpen(\"paper\")}\r\n            >\r\n              {/* {interestedTutors && interestedTutors.find(i => i.session_id == conversation.session_id) ? <NotificationsActiveIcon /> : <NotificationsIcon />} */}\r\n              {conversation.notified_tutors &&\r\n              conversation.tutor_interested &&\r\n              conversation.notified_tutors.length > 0 &&\r\n              conversation.tutor_interested.length > 0 ? (\r\n                <CircleNotificationsIcon fontSize=\"small\" />\r\n              ) : conversation.notified_tutors &&\r\n                conversation.notified_tutors.length > 0 ? (\r\n                <NotificationsActiveIcon fontSize=\"small\" />\r\n              ) : (\r\n                <NotificationsIcon fontSize=\"small\" />\r\n              )}\r\n              {conversation?.assigned_tutors &&\r\n              conversation.assigned_tutors.length > 0 &&\r\n              conversation?.assigned_tutors[0].acceptance_status ==\r\n                \"accepted\" ? (\r\n                <AssignmentTurnedInIcon\r\n                  fontSize=\"small\"\r\n                  color=\"success\"\r\n                  style={{ marginLeft: \"1px\" }}\r\n                />\r\n              ) : (\r\n                conversation.assigned_tutors &&\r\n                conversation.assigned_tutors.length > 0 && (\r\n                  <AssignmentTurnedInIcon\r\n                    fontSize=\"small\"\r\n                    style={{ marginLeft: \"1px\" }}\r\n                  />\r\n                )\r\n              )}\r\n            </div>\r\n            <Dialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              scroll={scroll}\r\n              aria-labelledby=\"scroll-dialog-title\"\r\n              aria-describedby=\"scroll-dialog-description\"\r\n            >\r\n              <DialogTitle\r\n                style={{\r\n                  fontSize: \"16px\",\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                  padding: \"16px 10px 10px 24px\",\r\n                }}\r\n                id=\"scroll-dialog-title\"\r\n              >\r\n                TUTOR LIST\r\n                {/* <Checkbox size='medium' color='success' /> */}\r\n                <input\r\n                  type=\"datetime-local\"\r\n                  style={{\r\n                    width: \"130px\",\r\n                    outline: \"none\",\r\n                    borderRadius: \"3px\",\r\n                    border: \"1px solid gray\",\r\n                    fontFamily: \"inherit\",\r\n                  }}\r\n                  value={tutorDeadline}\r\n                  onChange={handleTutorDeadline}\r\n                />\r\n                {conversation?.type == \"Live Session\" && (\r\n                  <NumberFormat\r\n                    style={{\r\n                      width: \"60px\",\r\n                      outline: \"none\",\r\n                      borderRadius: \"3px\",\r\n                      border: \"1px solid gray\",\r\n                    }}\r\n                    format=\"## : ##\"\r\n                    placeholder=\"Duration\"\r\n                    value={tutorDuration}\r\n                    onChange={(e) => setTutorDuration(e.target.value)}\r\n                    autoComplete=\"off\"\r\n                  />\r\n                )}\r\n                <FormControlLabel\r\n                  label=\"SELECT ALL\"\r\n                  control={\r\n                    <Checkbox\r\n                      size=\"medium\"\r\n                      color=\"success\"\r\n                      checked={checked}\r\n                      // indeterminate={checked[0] !== checked[1]}\r\n                      onChange={handleSelectAll}\r\n                    />\r\n                  }\r\n                />\r\n              </DialogTitle>\r\n              <DialogTitle\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  alignItems: \"center\",\r\n                  padding: \"0px 7px 15px 24px\",\r\n                }}\r\n              >\r\n                <input\r\n                  placeholder=\"Search for tutors\"\r\n                  className=\"chatMenuInput\"\r\n                  // onChange={(e) => handleSearchTutors(e)}\r\n                  onKeyPress={handleSearchTutors}\r\n                />\r\n              </DialogTitle>\r\n              <DialogContent\r\n                dividers={scroll === \"paper\"}\r\n                style={{ padding: \"16px 0px\" }}\r\n              >\r\n                {tutorListLoading ? (\r\n                  <div\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      alignItems: \"center\",\r\n                      justifyContent: \"center\",\r\n                      padding: \"255px 210px\",\r\n                    }}\r\n                  >\r\n                    <CircularProgress />\r\n                  </div>\r\n                ) : (\r\n                  <DialogContentText\r\n                    id=\"scroll-dialog-description\"\r\n                    ref={descriptionElementRef}\r\n                    tabIndex={-1}\r\n                  >\r\n                    <>\r\n                      {tutorList\r\n                        ?.filter((f) => f?.tutor_status == \"active\")\r\n                        ?.map((tutor, index) => {\r\n                          return (\r\n                            <div\r\n                              className={\r\n                                check?.find(\r\n                                  (element) => element.wa_id == tutor.wa_id\r\n                                )\r\n                                  ? \"selected_card\"\r\n                                  : removedNum == tutor.wa_id\r\n                                  ? \"card\"\r\n                                  : conversation?.notified_tutors &&\r\n                                    conversation?.notified_tutors.find(\r\n                                      (el) => el.tutor_id == tutor.tutor_id\r\n                                    )\r\n                                  ? \"success_card\"\r\n                                  : \"card\"\r\n                              }\r\n                              onClick={() => handleCheck(tutor)}\r\n                            >\r\n                              <div style={{ display: \"flex\" }}>\r\n                                {check?.find(\r\n                                  (element) => element.wa_id == tutor.wa_id\r\n                                ) && (\r\n                                  <CheckCircleIcon\r\n                                    fontSize=\"small\"\r\n                                    style={{ color: \"rgb(11 145 102)\" }}\r\n                                  />\r\n                                )}\r\n                                <label\r\n                                  for={tutor.tutor_id}\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    marginLeft: \"10px\",\r\n                                    cursor: \"pointer\",\r\n                                    fontSize: \"15px\",\r\n                                  }}\r\n                                >\r\n                                  {conversation?.notified_tutors &&\r\n                                    conversation?.notified_tutors.find(\r\n                                      (el) => el.tutor_id == tutor.tutor_id\r\n                                    ) && (\r\n                                      <DoneOutlineRoundedIcon\r\n                                        fontSize=\"small\"\r\n                                        color=\"success\"\r\n                                        style={{ marginRight: \"5px\" }}\r\n                                      />\r\n                                    )}\r\n                                  {conversation?.notified_tutors &&\r\n                                    conversation?.notified_tutors.find(\r\n                                      (el) =>\r\n                                        el.tutor_id == tutor.tutor_id &&\r\n                                        el.medium == \"mail\"\r\n                                    ) && (\r\n                                      <MarkEmailReadOutlinedIcon\r\n                                        fontSize=\"small\"\r\n                                        color=\"success\"\r\n                                        style={{ marginRight: \"5px\" }}\r\n                                      />\r\n                                    )}\r\n                                  {conversation?.notified_tutors &&\r\n                                    conversation?.notified_tutors.find(\r\n                                      (el) =>\r\n                                        el.tutor_id == tutor.tutor_id &&\r\n                                        el.medium == \"wa\"\r\n                                    ) && (\r\n                                      <WhatsappOutlinedIcon\r\n                                        fontSize=\"small\"\r\n                                        color=\"success\"\r\n                                        style={{ marginRight: \"5px\" }}\r\n                                      />\r\n                                    )}\r\n                                  {conversation?.notified_tutors &&\r\n                                    conversation?.notified_tutors.find(\r\n                                      (el) =>\r\n                                        el.tutor_id == tutor.tutor_id &&\r\n                                        el.medium == \"wa-mail\"\r\n                                    ) && (\r\n                                      <>\r\n                                        <WhatsappOutlinedIcon\r\n                                          fontSize=\"small\"\r\n                                          color=\"success\"\r\n                                          style={{ marginRight: \"5px\" }}\r\n                                        />{\" \"}\r\n                                        <MarkEmailReadOutlinedIcon\r\n                                          fontSize=\"small\"\r\n                                          color=\"success\"\r\n                                          style={{ marginRight: \"5px\" }}\r\n                                        />\r\n                                      </>\r\n                                    )}\r\n                                  <span\r\n                                    style={{\r\n                                      fontWeight: \"600\",\r\n                                      marginRight: \"5px\",\r\n                                    }}\r\n                                  >\r\n                                    {shortText(tutor.name)}\r\n                                  </span>{\" \"}\r\n                                  {tutor.tutor_id}\r\n                                  &nbsp;\r\n                                  <span>\r\n                                    <HtmlTooltip\r\n                                      placement=\"top\"\r\n                                      title={\r\n                                        <>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            Highest Degree:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.highest_degree}\r\n                                            </span>\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            Department:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.dept}\r\n                                            </span>\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            College/s:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.academic_info &&\r\n                                                tutor?.academic_info[0]?.college.toString()}\r\n                                            </span>\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            WhatsApp:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.wa_id}\r\n                                            </span>\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            Subjects known:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.subjects &&\r\n                                                tutor?.subjects.toString()}\r\n                                            </span>\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            Tags:{\" \"}\r\n                                            <span\r\n                                              style={{\r\n                                                fontSize: \"12px\",\r\n                                                fontWeight: \"normal\",\r\n                                              }}\r\n                                            >\r\n                                              {tutor?.tags &&\r\n                                                tutor?.tags.toString()}\r\n                                            </span>\r\n                                          </Typography>\r\n                                        </>\r\n                                      }\r\n                                    >\r\n                                      <InfoIcon\r\n                                        fontSize=\"small\"\r\n                                        style={{ fontSize: \"16px\" }}\r\n                                      />\r\n                                    </HtmlTooltip>\r\n                                  </span>\r\n                                  {tutor?.writer && (\r\n                                    <span style={{ marginLeft: \"5px\" }}>\r\n                                      <BorderColorIcon\r\n                                        fontSize=\"small\"\r\n                                        style={{ fontSize: \"14px\" }}\r\n                                      />\r\n                                    </span>\r\n                                  )}\r\n                                  <span>\r\n                                    <AutorenewRoundedIcon\r\n                                      fontSize=\"small\"\r\n                                      style={{ fontSize: \"18px\" }}\r\n                                      onClick={() =>\r\n                                        handleContactValidate(tutor?.wa_id)\r\n                                      }\r\n                                    />\r\n                                  </span>\r\n                                  <span\r\n                                    style={{\r\n                                      fontSize: \"12px\",\r\n                                      color: \"green\",\r\n                                      marginLeft: \"5px\",\r\n                                    }}\r\n                                  >\r\n                                    {tutor?.highlights &&\r\n                                      tutor?.highlights.map((i) => (\r\n                                        <span>\r\n                                          {i?.path?.slice(0, 1)}\r\n                                          {\": \"}\r\n                                          {i?.texts?.map((j) => (\r\n                                            <span>{j.value}&nbsp;</span>\r\n                                          ))}\r\n                                        </span>\r\n                                      ))}\r\n                                  </span>\r\n                                </label>\r\n                              </div>\r\n                              <div style={{ display: \"flex\" }}>\r\n                                {tutor?.sessions_assigned &&\r\n                                  tutor?.sessions_assigned?.filter(\r\n                                    (f) =>\r\n                                      new Date(f.deadline) >= today &&\r\n                                      new Date(f.deadline) <= after2days\r\n                                  ) &&\r\n                                  tutor?.sessions_assigned?.filter(\r\n                                    (f) =>\r\n                                      new Date(f.deadline) >= today &&\r\n                                      new Date(f.deadline) <= after2days\r\n                                  ).length >= 2 && (\r\n                                    <HtmlTooltip\r\n                                      placement=\"top\"\r\n                                      title={\r\n                                        <>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            WARNING!!!\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            This tutor is already assigned for 2\r\n                                            or more than 2 sessions in next 2\r\n                                            days..\r\n                                          </Typography>\r\n                                          <Typography\r\n                                            color=\"inherit\"\r\n                                            style={{\r\n                                              fontSize: \"13.5px\",\r\n                                              fontWeight: \"600\",\r\n                                              marginBottom: \"5px\",\r\n                                            }}\r\n                                          >\r\n                                            Sessions Assigned:\r\n                                          </Typography>\r\n                                          {tutor?.sessions_assigned\r\n                                            ?.filter(\r\n                                              (f) =>\r\n                                                new Date(f.deadline) > today &&\r\n                                                new Date(f.deadline) <\r\n                                                  after2days\r\n                                            )\r\n                                            .map((i) => (\r\n                                              <Typography\r\n                                                color=\"inherit\"\r\n                                                style={{\r\n                                                  fontSize: \"13.5px\",\r\n                                                  fontWeight: \"600\",\r\n                                                  marginBottom: \"5px\",\r\n                                                }}\r\n                                              >\r\n                                                <span\r\n                                                  style={{\r\n                                                    fontSize: \"12px\",\r\n                                                    fontWeight: \"normal\",\r\n                                                  }}\r\n                                                >\r\n                                                  ID: {i?.session_id}\r\n                                                </span>\r\n                                                <span\r\n                                                  style={{\r\n                                                    fontSize: \"12px\",\r\n                                                    fontWeight: \"normal\",\r\n                                                  }}\r\n                                                >\r\n                                                  &nbsp; | &nbsp;Type: {i?.type}\r\n                                                </span>\r\n                                              </Typography>\r\n                                            ))}\r\n                                        </>\r\n                                      }\r\n                                    >\r\n                                      <PriorityHighOutlinedIcon\r\n                                        fontSize=\"small\"\r\n                                        style={{ fontSize: \"21px\" }}\r\n                                        color=\"error\"\r\n                                      />\r\n                                    </HtmlTooltip>\r\n                                  )}\r\n                              </div>\r\n                              <Box\r\n                                sx={{\r\n                                  width: 150,\r\n                                  display: \"flex\",\r\n                                  alignItems: \"center\",\r\n                                  justifyContent: \"flex-end\",\r\n                                }}\r\n                              >\r\n                                <Chip\r\n                                  size=\"small\"\r\n                                  // onClick={handleClick}\r\n                                  // onDelete={handleDelete}\r\n                                  icon={\r\n                                    <StarPurple500SharpIcon\r\n                                      style={{\r\n                                        color: \"#ffff\",\r\n                                        fontSize: \"14px\",\r\n                                      }}\r\n                                    />\r\n                                  }\r\n                                  label={(\"\" + tutor?.rating / 2)?.slice(0, 4)}\r\n                                  color=\"success\"\r\n                                />\r\n                                {/* <span style={{ paddingLeft: '5px' }}>\r\n                              {showMenu ? (\r\n                                <KeyboardArrowUpIcon\r\n                                  fontSize='medium'\r\n                                  color='action'\r\n                                  onClick={handleClick}\r\n                                />\r\n                              ) : (\r\n                                <KeyboardArrowDownIcon\r\n                                  fontSize='medium'\r\n                                  color='action'\r\n                                  onClick={handleClick}\r\n                                />\r\n                              )}\r\n                            </span> */}\r\n                              </Box>\r\n                              {/* {showMenu && (\r\n        <div className='conversationDetails'>\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n              margin: '7px',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                fontSize: '14px',\r\n                fontWeight: '500',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              Highest Degree: <span>{tutor?.highest_degree}</span>\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: '15px 7px 7px 7px' }}>\r\n            <span\r\n              style={{\r\n                fontSize: '14px',\r\n                fontWeight: '500',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              College:{' '}\r\n              <span>\r\n                {tutor?.academic_info &&\r\n                  tutor?.academic_info[0]?.college}\r\n              </span>\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: '23px 7px 7px 7px' }}>\r\n            <span\r\n              style={{\r\n                fontSize: '14px',\r\n                fontWeight: '500',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              Email: <span>{tutor?.email}</span>\r\n            </span>\r\n          </div>\r\n          <div style={{ margin: '15px 7px 7px 7px' }}>\r\n            <span\r\n              style={{\r\n                fontSize: '14px',\r\n                fontWeight: '500',\r\n                marginRight: '5px',\r\n              }}\r\n            >\r\n              Subjects known:\r\n            </span>\r\n            {tutor?.subjects &&\r\n              tutor?.subjects.map((i) => (\r\n                <Chip style={{ margin: '6px' }} label={i} />\r\n              ))}\r\n          </div>\r\n   \r\n        </div>\r\n      )} */}\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      <Pagination\r\n                        style={{\r\n                          display: \"flex\",\r\n                          justifyContent: \"center\",\r\n                          padding: \"20px 45px 20px 30px\",\r\n                        }}\r\n                        count={Math.ceil(tutorCount / 20)}\r\n                        page={tutorPage}\r\n                        onChange={handleTutorList}\r\n                      />\r\n                    </>\r\n                  </DialogContentText>\r\n                )}\r\n              </DialogContent>\r\n              {sendingText && <LinearProgress />}\r\n              <DialogActions>\r\n                <Button onClick={handleClose}>Close</Button>\r\n                {(conversation?.type == 'Live Session' && showSendTemplate && check.length > 0 && tutorDeadline && tutorDuration) || (conversation?.type == 'Assignment' || conversation?.type == 'Project' && showSendTemplate && check.length > 0 && tutorDeadline) ? <Button onClick={sendTemplateAlert}>Send</Button>\r\n                : <Button disabled>Send</Button>}\r\n              </DialogActions>\r\n            </Dialog>\r\n            <div>\r\n              <Snackbar\r\n                open={openSnackBar}\r\n                autoHideDuration={2000}\r\n                onClose={handleCloseSnackBar}\r\n                anchorOrigin={{ vertical, horizontal }}\r\n                key={vertical + horizontal}\r\n              >\r\n                <Alert\r\n                  onClose={handleCloseSnackBar}\r\n                  severity=\"info\"\r\n                  sx={{ width: \"100%\" }}\r\n                >\r\n                  {alertText_}\r\n                </Alert>\r\n              </Snackbar>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style={{ marginBottom: \"-4px\" }} className=\"userTab_\">\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"38%\" }}>\r\n            <div style={{ height: \"22px\", fontSize: \"13px\" }}>CA:&nbsp;</div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n              }}\r\n            >\r\n              {conversation.client_amount\r\n                ? conversation.client_amount / 100 + \" \" + conversation.currency\r\n                : \"---\"}\r\n              {(clientPayment &&\r\n                clientPayment?.find(\r\n                  (f) =>\r\n                    f.payload.payment_link &&\r\n                    f.payload.payment_link.entity.id == conversation.plink_id &&\r\n                    f.payload.payment_link.entity.status == \"paid\"\r\n                )) ||\r\n              conversation.payment_status == \"paid\" ? (\r\n                <span>\r\n                  <HtmlTooltip\r\n                    placement=\"top\"\r\n                    title={\r\n                      <>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          Amount Paid:{\" \"}\r\n                        </Typography>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            {conversation?.payment_info?.length > 0\r\n                              ? conversation?.payment_info\r\n                                  ?.filter((f) => f.type == \"plink\")\r\n                                  ?.map((i) => i.amount)\r\n                                  .reduce((pv, cv) => {\r\n                                    return pv + cv;\r\n                                  }, 0) /\r\n                                  100 +\r\n                                \" \" +\r\n                                conversation?.currency +\r\n                                \" (via payment link)\"\r\n                              : \"---\"}\r\n                          </span>\r\n                        </Typography>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            {conversation?.payment_info?.filter(\r\n                              (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                            ) &&\r\n                              conversation?.payment_info?.filter(\r\n                                (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                              ).length > 0 &&\r\n                              conversation?.payment_info\r\n                                ?.filter(\r\n                                  (i) =>\r\n                                    i.type == \"vpa\" && i.status == \"captured\"\r\n                                )\r\n                                ?.map((k) => k?.amount)\r\n                                .reduce((x, z) => {\r\n                                  return x + z;\r\n                                }, 0) /\r\n                                100 +\r\n                                \" INR (to vpa)\"}\r\n                          </span>\r\n                        </Typography>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <CheckCircleIcon\r\n                      fontSize=\"x-small\"\r\n                      style={{\r\n                        marginLeft: \"3px\",\r\n                        marginTop: \"1px\",\r\n                        fontSize: \"15px\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  </HtmlTooltip>\r\n                </span>\r\n              ) : (clientPayment &&\r\n                  clientPayment?.find(\r\n                    (f) =>\r\n                      f.payload.payment_link &&\r\n                      f.payload.payment_link.entity.id ==\r\n                        conversation.plink_id &&\r\n                      f.payload.payment_link.entity.status == \"partially_paid\"\r\n                  )) ||\r\n                conversation.payment_status == \"partially_paid\" ? (\r\n                <span>\r\n                  <HtmlTooltip\r\n                    placement=\"top\"\r\n                    title={\r\n                      <>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          Amount Paid:{\" \"}\r\n                        </Typography>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            {conversation?.payment_info?.length > 0\r\n                              ? conversation?.payment_info\r\n                                  ?.filter((f) => f.type == \"plink\")\r\n                                  ?.map((i) => i.amount)\r\n                                  .reduce((pv, cv) => {\r\n                                    return pv + cv;\r\n                                  }, 0) /\r\n                                  100 +\r\n                                \" \" +\r\n                                conversation?.currency +\r\n                                \" (via payment link)\"\r\n                              : \"---\"}\r\n                          </span>\r\n                        </Typography>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            {conversation?.payment_info?.filter(\r\n                              (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                            ) &&\r\n                              conversation?.payment_info?.filter(\r\n                                (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                              ).length > 0 &&\r\n                              conversation?.payment_info\r\n                                ?.filter(\r\n                                  (i) =>\r\n                                    i.type == \"vpa\" && i.status == \"captured\"\r\n                                )\r\n                                ?.map((k) => k?.amount)\r\n                                .reduce((x, z) => {\r\n                                  return x + z;\r\n                                }, 0) /\r\n                                100 +\r\n                                \" INR (to vpa)\"}\r\n                          </span>\r\n                        </Typography>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <PendingIcon\r\n                      fontSize=\"x-small\"\r\n                      style={{\r\n                        marginLeft: \"3px\",\r\n                        marginTop: \"1px\",\r\n                        cursor: \"pointer\",\r\n                        fontSize: \"15px\",\r\n                      }}\r\n                    />\r\n                  </HtmlTooltip>\r\n                </span>\r\n              ) : null}\r\n              {conversation?.refund_status == \"refunded\" && (\r\n                <span>\r\n                  <HtmlTooltip\r\n                    placement=\"top\"\r\n                    title={\r\n                      <>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          Amount Refunded:{\" \"}\r\n                        </Typography>\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            {conversation?.payment_info?.map(\r\n                              (payment) =>\r\n                                payment?.refund_info &&\r\n                                payment?.refund_info\r\n                                  ?.filter((f) => f.status == \"processed\")\r\n                                  .map((i) => (\r\n                                    <div style={{ display: \"flex\" }}>\r\n                                      {i?.amount / 100} {i?.currency}\r\n                                      {\" [ID: \"}\r\n                                      {i?.id}\r\n                                      {\"]\"}\r\n                                    </div>\r\n                                  ))\r\n                            )}\r\n                          </span>\r\n                        </Typography>\r\n                      </>\r\n                    }\r\n                  >\r\n                    <SettingsBackupRestoreIcon\r\n                      fontSize=\"small\"\r\n                      color=\"error\"\r\n                      style={{\r\n                        marginLeft: \"3px\",\r\n                        cursor: \"pointer\",\r\n                        fontSize: \"17px\",\r\n                      }}\r\n                    />\r\n                  </HtmlTooltip>\r\n                </span>\r\n              )}\r\n            </div>\r\n            <div style={{ fontSize: \"13px\", marginLeft: \"3px\" }}></div>\r\n            {/* <div style={{fontSize: '13px', marginLeft:'3px'}}>{virtualAccPayments && virtualAccPayments?.length > 0 && virtualAccPayments?.map((i) => i?.amount).reduce((a, b) => { return (a + b)}, 0)/100 + ' ' + virtualAccPayments[0]?.currency + ' (vpa)'}</div> */}\r\n          </div>\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"24%\" }}>\r\n            <div style={{ height: \"22px\", fontSize: \"13px\" }}>TA:&nbsp;</div>\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n              }}\r\n            >\r\n              {conversation?.assigned_tutors &&\r\n              conversation?.assigned_tutors?.length > 0\r\n                ? conversation?.assigned_tutors\r\n                    ?.filter((e) => e?.pout_info?.length > 0)\r\n                    ?.map(\r\n                      (i) =>\r\n                        i?.pout_info\r\n                          ?.filter((f) => f.status == \"processed\")\r\n                          .map((k) => k?.amount)\r\n                          .reduce((x, z) => {\r\n                            return x + z;\r\n                          }, 0) / 100\r\n                    )\r\n                    .reduce((x, z) => {\r\n                      return x + z;\r\n                    }, 0) + \" INR\"\r\n                : \"---\"}\r\n              {conversation?.assigned_tutors &&\r\n                conversation?.assigned_tutors?.filter(\r\n                  (e) => e?.tutor_unassigned == \"assigned\"\r\n                )?.length > 0 &&\r\n                conversation?.assigned_tutors?.filter(\r\n                  (e) => e?.tutor_unassigned == \"assigned\"\r\n                )?.length ==\r\n                  conversation?.assigned_tutors\r\n                    ?.filter((e) => e?.tutor_unassigned == \"assigned\")\r\n                    ?.filter(\r\n                      (f) =>\r\n                        f?.pout_info?.filter((f) => f.status == \"processed\")\r\n                          .length > 0\r\n                    ).length && (\r\n                  <span>\r\n                    <CheckCircleIcon\r\n                      fontSize=\"x-small\"\r\n                      style={{\r\n                        marginLeft: \"3px\",\r\n                        marginTop: \"1px\",\r\n                        fontSize: \"15px\",\r\n                      }}\r\n                    />\r\n                  </span>\r\n                )}\r\n\r\n              <span>\r\n                <HtmlTooltip\r\n                  placement=\"top\"\r\n                  title={\r\n                    <>\r\n                      {/* <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Interested Tutors: </Typography>\r\n                      {conversation?.tutor_interested && conversation?.tutor_interested.length > 0 ? conversation?.tutor_interested?.map((i) => <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}><span style={{fontSize: '12px', fontWeight: 'normal'}}>{i.name}&nbsp;{i.tutor_id}</span></Typography>) : <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}><span style={{fontSize: '12px', fontWeight: 'normal'}}>No one has shown interest for this session</span></Typography>} */}\r\n                      <Typography\r\n                        color=\"inherit\"\r\n                        style={{\r\n                          fontSize: \"13.5px\",\r\n                          fontWeight: \"600\",\r\n                          marginBottom: \"5px\",\r\n                        }}\r\n                      >\r\n                        Assigned Tutors:{\" \"}\r\n                      </Typography>\r\n                      {conversation?.assigned_tutors &&\r\n                      conversation?.assigned_tutors.length > 0 ? (\r\n                        conversation?.assigned_tutors?.map((i) => (\r\n                          <Typography\r\n                            color=\"inherit\"\r\n                            style={{\r\n                              fontSize: \"13.5px\",\r\n                              fontWeight: \"600\",\r\n                              marginBottom: \"5px\",\r\n                            }}\r\n                          >\r\n                            <span\r\n                              style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                            >\r\n                              {i.name}&nbsp;|&nbsp;{i.tutor_id}&nbsp;|&nbsp;\r\n                              <span>\r\n                                {i?.pout_info\r\n                                  ? i?.pout_info\r\n                                      ?.filter((f) => f.status == \"processed\")\r\n                                      ?.map((k) => k?.amount)\r\n                                      ?.reduce((x, z) => {\r\n                                        return x + z;\r\n                                      }, 0) /\r\n                                      100 +\r\n                                    \" INR\"\r\n                                  : \"---\"}\r\n                              </span>\r\n                            </span>\r\n                          </Typography>\r\n                        ))\r\n                      ) : (\r\n                        <Typography\r\n                          color=\"inherit\"\r\n                          style={{\r\n                            fontSize: \"13.5px\",\r\n                            fontWeight: \"600\",\r\n                            marginBottom: \"5px\",\r\n                          }}\r\n                        >\r\n                          <span\r\n                            style={{ fontSize: \"12px\", fontWeight: \"normal\" }}\r\n                          >\r\n                            No Tutors Assigned\r\n                          </span>\r\n                        </Typography>\r\n                      )}\r\n                    </>\r\n                  }\r\n                >\r\n                  <InfoIcon\r\n                    fontSize=\"small\"\r\n                    style={{\r\n                      fontSize: \"12px\",\r\n                      cursor: \"pointer\",\r\n                      marginLeft: \"1px\",\r\n                    }}\r\n                  />\r\n                </HtmlTooltip>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: \"38%\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"end\",\r\n              fontSize: \"11px\",\r\n              fontWeight: \"800\",\r\n              maxWidth: \"100px\",\r\n              textAlign: \"center\",\r\n            }}\r\n          >\r\n            {/* <div style={{height: '22px', fontSize: '13px'}} >Work status:</div> */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignSelf: \"center\",\r\n                textTransform: \"capitalize\",\r\n              }}\r\n            >\r\n              {conversation.work_status &&\r\n              conversation.work_status !== \"New Task\" ? (\r\n                <span\r\n                  className={\r\n                    conversation?.work_status == \"Client Cancelled\" ||\r\n                    conversation?.work_status == \"Agent Cancelled\"\r\n                      ? \"color_red\"\r\n                      : conversation?.work_status == \"Tutors Notified\"\r\n                      ? \"color_blue\"\r\n                      : conversation?.work_status == \"Tutors Assigned\"\r\n                      ? \"color_pink\"\r\n                      : conversation?.work_status == \"Completed\"\r\n                      ? \"color_green\"\r\n                      : \"black\"\r\n                  }\r\n                >\r\n                  {conversation.work_status}\r\n                </span>\r\n              ) : (\r\n                <span style={{ fontSize: \"12px\", color: \"#fd3dca\" }}>\r\n                  New Task\r\n                </span>\r\n              )}\r\n            </div>\r\n            {/* {filteredAlert.length > 0 ? (\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  justifyContent: 'flex-end',\r\n                  padding: '0px 10px 0px 0px',\r\n                }}\r\n                ref={alertIcon}\r\n              >\r\n                <NotificationsIcon style={{ color: '#03D755' }} />\r\n              </div>\r\n            ) : null} */}\r\n          </div>\r\n        </div>\r\n        <div className=\"userTab_\">\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"38%\" }}>\r\n            {/* <div\r\n              style={{ height: '22px', fontSize: '13px' }}\r\n              \r\n            >\r\n              Deadline:\r\n            </div> */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n                fontWeight: \"bolder\",\r\n                width: \"145px\",\r\n              }}\r\n            >\r\n              {conversation?.deadline\r\n                ? new Date(conversation?.deadline).toLocaleDateString(\"en-IN\") +\r\n                  moment(conversation?.deadline).format(\", h:mm a\")\r\n                : \"---\"}\r\n            </div>\r\n          </div>\r\n          <div style={{ display: \"flex\", flexDirection: \"row\", flex: \"24%\" }}>\r\n            {/* <div\r\n              style={{ height: '22px', fontSize: '13px' }}\r\n              \r\n            >\r\n              Duration:\r\n            </div> */}\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                fontSize: \"13px\",\r\n                fontWeight: \"bolder\",\r\n              }}\r\n            >\r\n              {conversation?.duration\r\n                ? `${conversation?.duration?.slice(\r\n                    0,\r\n                    2\r\n                  )}h ${conversation?.duration?.slice(4, 7)}m`\r\n                : \"---\"}\r\n            </div>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              flex: \"38%\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"end\",\r\n              fontSize: \"12px\",\r\n              fontWeight: \"800\",\r\n              maxWidth: \"100px\",\r\n              textAlign: \"end\",\r\n              // lineHeight: '2.1',\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                alignSelf: \"flex-end\",\r\n              }}\r\n            >\r\n              {/* {conversation.type ? conversation.type : '---'} */}\r\n              {conversation?.session_agent && conversation?.session_agent}\r\n            </div>\r\n            <div style={{ marginBottom: \"-7px\", cursor: \"pointer\" }}>\r\n              <ArrowRightAltIcon\r\n                fontSize=\"small\"\r\n                onClick={handleOpenSessionDetails}\r\n              />\r\n              <Dialog\r\n                open={showSessionDetails}\r\n                onClose={handleCloseSessionDetails}\r\n                scroll=\"paper\"\r\n                aria-labelledby=\"scroll-dialog-title\"\r\n                aria-describedby=\"scroll-dialog-description\"\r\n              >\r\n                <DialogTitle\r\n                  id=\"scroll-dialog-title\"\r\n                  style={{ width: \"525px\" }}\r\n                >\r\n                  {conversation?.type} Details\r\n                  {/* <span style={{float: 'right', cursor: 'pointer'}}>\r\n                  <DoNotDisturbIcon />\r\n                  </span> */}\r\n                </DialogTitle>\r\n                <DialogContent\r\n                  dividers={false}\r\n                  style={{ padding: \"0px 32px 20px 32px\" }}\r\n                >\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Session ID:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.session_id}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Client ID:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.client_id}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Work Details:</div>\r\n                      <div\r\n                        style={{\r\n                          fontWeight: \"800\",\r\n                          paddingRight: \"45px\",\r\n                          maxWidth: \"300px\",\r\n                        }}\r\n                      >\r\n                        {conversation?.client_comments\r\n                          ? conversation?.client_comments\r\n                          : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Deadline:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.deadline\r\n                          ? moment(conversation?.deadline).format(\r\n                              \"MMM Do YY, h:mm a\"\r\n                            )\r\n                          : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Duration:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.duration\r\n                          ? conversation?.duration\r\n                          : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Client Amount:</div>\r\n                      {conversation?.client_amount && !isEditClientAmt ? (\r\n                        <div style={{ fontWeight: \"800\" }}>\r\n                          {conversation?.client_amount ? (\r\n                            <span style={{ display: \"flex\" }}>\r\n                              {conversation?.client_amount / 100 +\r\n                                \" \" +\r\n                                conversation.currency}\r\n                              {!conversation?.payment_info ||\r\n                                (conversation.payment_info.length == 0 && (\r\n                                  <span\r\n                                    style={{\r\n                                      cursor: \"pointer\",\r\n                                      marginLeft: \"5px\",\r\n                                    }}\r\n                                  >\r\n                                    <EditIcon\r\n                                      fontSize=\"x-small\"\r\n                                      style={{ fontSize: \"15px\" }}\r\n                                      onClick={() => {\r\n                                        window.confirm(\r\n                                          \"Warning!!! If you update the client amount field you will lost the old payment informations for this session. Would you like to continue?\"\r\n                                        ) && setIsEditClientAmt(true);\r\n                                      }}\r\n                                    />\r\n                                  </span>\r\n                                ))}\r\n                              {/* <div style={{display: 'flex', marginRight: '60px'}}>\r\n                              <img\r\n                                src='/assets/paypal.png'\r\n                                style={{width: '30px'}}\r\n                                alt='paypal'\r\n                              />\r\n                              <Checkbox\r\n                                size=\"small\"\r\n                                checked={checked}\r\n                                onChange={handleChange}\r\n                                inputProps={{ 'aria-label': 'controlled' }}\r\n                              />\r\n                              </div> */}\r\n                            </span>\r\n                          ) : (\r\n                            \"---\"\r\n                          )}\r\n                        </div>\r\n                      ) : !conversation?.client_amount || isEditClientAmt ? (\r\n                        <span style={{ fontWeight: \"800\" }}>\r\n                          <select\r\n                            name=\"type\"\r\n                            id=\"type\"\r\n                            className=\"arrow\"\r\n                            style={{\r\n                              width: \"22%\",\r\n                              height: \"23px\",\r\n                              padding: \"0px\",\r\n                              borderBottom: \"1px solid gray\",\r\n                              borderRadius: \"0px\",\r\n                            }}\r\n                            value={selectCurrency}\r\n                            onChange={(event) =>\r\n                              setSelectCurrency(event.target.value)\r\n                            }\r\n                            required\r\n                          >\r\n                            <option selected value=\"USD\">\r\n                              USD\r\n                            </option>\r\n                            <option value=\"EUR\">EUR</option>\r\n                            <option value=\"BHD\">BHD</option>\r\n                            <option value=\"INR\">INR</option>\r\n                            <option value=\"CAD\">CAD</option>\r\n                            <option value=\"AUD\">AUD</option>\r\n                            <option value=\"GBP\">GBP</option>\r\n                            <option value=\"AED\">AED</option>\r\n                          </select>\r\n                          <input\r\n                            type=\"number\"\r\n                            style={{\r\n                              width: \"30%\",\r\n                              height: \"20px\",\r\n                              marginLeft: \"5px\",\r\n                              outline: \"none\",\r\n                              border: \"none\",\r\n                              borderBottom: \"1px solid gray\",\r\n                              borderRadius: \"0px\",\r\n                            }}\r\n                            min=\"1\"\r\n                            max=\"10\"\r\n                            value={selectClientAmount}\r\n                            onChange={(e) =>\r\n                              setSelectClientAmount(e.target.value)\r\n                            }\r\n                          />\r\n                          <Checkbox\r\n                            size=\"small\"\r\n                            checked={paypalOption}\r\n                            onChange={handleCheckPayPal}\r\n                            inputProps={{ \"aria-label\": \"controlled\" }}\r\n                          />\r\n                          <span style={{ cursor: \"pointer\" }}>PayPal</span>{\" \"}\r\n                          &nbsp;\r\n                          {!disableUpdate ? (\r\n                            <button\r\n                              style={{\r\n                                backgroundColor: \"#1876D1\",\r\n                                color: \"#ffff\",\r\n                                border: \"none\",\r\n                                borderRadius: \"2px\",\r\n                                height: \"25px\",\r\n                                cursor: \"pointer\",\r\n                              }}\r\n                              onClick={clientAmtHandler}\r\n                            >\r\n                              Update\r\n                            </button>\r\n                          ) : (\r\n                            <button\r\n                              style={{\r\n                                border: \"1px solid #e3e0e0\",\r\n                                borderRadius: \"2px\",\r\n                                height: \"25px\",\r\n                              }}\r\n                              disabled\r\n                            >\r\n                              <CircularProgress\r\n                                fontSize=\"small\"\r\n                                style={{ width: \"15px\", height: \"15px\" }}\r\n                              />{\" \"}\r\n                              Update\r\n                            </button>\r\n                          )}\r\n                        </span>\r\n                      ) : null}\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Client Amount Paid:\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          size=\"small\"\r\n                          color=\"error\"\r\n                          style={{\r\n                            fontSize: \"10px\",\r\n                            lineHeight: \"1.6\",\r\n                            minWidth: \"57px\",\r\n                            marginLeft: \"15px\",\r\n                          }}\r\n                          onClick={handleOpenRefundWindow}\r\n                        >\r\n                          Refund\r\n                        </Button>\r\n                        <Dialog\r\n                          open={openRefundWin}\r\n                          onClose={handleCloseRefundWindow}\r\n                          aria-labelledby=\"alert-dialog-title\"\r\n                          aria-describedby=\"alert-dialog-description\"\r\n                        >\r\n                          <DialogTitle id=\"alert-dialog-title\">\r\n                            {\"Initiate Refunds to Client\"}\r\n                          </DialogTitle>\r\n                          <DialogContent\r\n                            style={{\r\n                              paddingLeft: \"0px\",\r\n                              paddingRight: \"0px\",\r\n                              width: \"500px\",\r\n                            }}\r\n                          >\r\n                            <DialogContentText id=\"alert-dialog-description\">\r\n                              {conversation?.payment_info?.map(\r\n                                (payment, index) => (\r\n                                  <>\r\n                                    <div\r\n                                      key={index}\r\n                                      style={{\r\n                                        padding: \"18px 26px 18px 26px\",\r\n                                        borderBottom: \"1px solid lightgray\",\r\n                                      }}\r\n                                    >\r\n                                      <div\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          fontWeight: \"800\",\r\n                                        }}\r\n                                      >\r\n                                        {payment.currency}{\" \"}\r\n                                        {payment.amount / 100}{\" \"}\r\n                                        <span\r\n                                          style={{\r\n                                            fontSize: \"14px\",\r\n                                            fontWeight: \"500\",\r\n                                            marginLeft: \"5px\",\r\n                                          }}\r\n                                        >\r\n                                          on{\" \"}\r\n                                          {moment(\r\n                                            new Date(\r\n                                              payment?.created_at * 1000\r\n                                            ).toISOString()\r\n                                          ).format(\"MMM Do YYYY, h:mm a\")}\r\n                                        </span>\r\n                                        <span\r\n                                          style={{\r\n                                            display: \"flex\",\r\n                                            flex: \"10%\",\r\n                                            justifyContent: \"flex-end\",\r\n                                          }}\r\n                                        >\r\n                                          {payment?.refund_info &&\r\n                                          payment?.refund_info\r\n                                            ?.filter(\r\n                                              (f) => f.status == \"processed\"\r\n                                            )\r\n                                            .map((k) => k?.amount)\r\n                                            .reduce((x, z) => {\r\n                                              return x + z;\r\n                                            }, 0) == payment.amount ? (\r\n                                            <Button\r\n                                              variant=\"contained\"\r\n                                              size=\"small\"\r\n                                              color=\"error\"\r\n                                              style={{\r\n                                                fontSize: \"9px\",\r\n                                                lineHeight: \"1.6\",\r\n                                                minWidth: \"57px\",\r\n                                                marginLeft: \"15px\",\r\n                                              }}\r\n                                              disabled\r\n                                            >\r\n                                              Refund\r\n                                            </Button>\r\n                                          ) : (\r\n                                            <>\r\n                                              <input\r\n                                                style={{\r\n                                                  width: \"75px\",\r\n                                                  height: \"18px\",\r\n                                                  borderRadius: \"4px\",\r\n                                                  border: \"1px solid lightgray\",\r\n                                                  outline: \"none\",\r\n                                                }}\r\n                                                type=\"number\"\r\n                                                placeholder=\"Amount\"\r\n                                                onChange={(e) =>\r\n                                                  setRefundAmount(\r\n                                                    e.target.value\r\n                                                  )\r\n                                                }\r\n                                              />\r\n                                              <Button\r\n                                                variant=\"contained\"\r\n                                                size=\"small\"\r\n                                                color=\"error\"\r\n                                                style={{\r\n                                                  fontSize: \"9px\",\r\n                                                  lineHeight: \"1.6\",\r\n                                                  minWidth: \"57px\",\r\n                                                  marginLeft: \"15px\",\r\n                                                }}\r\n                                                onClick={() =>\r\n                                                  handleInitiateRefund(\r\n                                                    payment.id\r\n                                                  )\r\n                                                }\r\n                                              >\r\n                                                Refund\r\n                                              </Button>\r\n                                            </>\r\n                                          )}\r\n                                        </span>\r\n                                      </div>\r\n                                      <div\r\n                                        style={{\r\n                                          display: \"flex\",\r\n                                          justifyContent: \"space-between\",\r\n                                          fontSize: \"11px\",\r\n                                          marginTop: \"8px\",\r\n                                        }}\r\n                                      >\r\n                                        Payment ID:{\" \"}\r\n                                        {payment?.id?.replace(\"pay_\", \"\")}\r\n                                        {\" (\" + payment.method + \")\"}\r\n                                        <div\r\n                                          style={{\r\n                                            display: \"flex\",\r\n                                            flexDirection: \"column\",\r\n                                            alignItems: \"flex-end\",\r\n                                          }}\r\n                                        >\r\n                                          {payment?.refund_info && (\r\n                                            <span\r\n                                              style={{\r\n                                                fontStyle: \"italic\",\r\n                                                textDecoration: \"underline\",\r\n                                              }}\r\n                                            >\r\n                                              Refund ID/s:\r\n                                            </span>\r\n                                          )}\r\n                                          {payment?.refund_info &&\r\n                                            payment?.refund_info\r\n                                              ?.filter(\r\n                                                (f) => f.status == \"processed\"\r\n                                              )\r\n                                              .map((i) => (\r\n                                                <div\r\n                                                  style={{ display: \"flex\" }}\r\n                                                >\r\n                                                  {i?.id?.replace(\"rfnd_\", \"\")}\r\n                                                  {\" (\"}\r\n                                                  {i?.amount / 100}{\" \"}\r\n                                                  {i?.currency}\r\n                                                  {\")\"}\r\n                                                </div>\r\n                                              ))}\r\n                                        </div>\r\n                                      </div>\r\n                                    </div>\r\n                                  </>\r\n                                )\r\n                              )}\r\n                            </DialogContentText>\r\n                          </DialogContent>\r\n                          <DialogActions>\r\n                            <Button onClick={handleCloseRefundWindow}>\r\n                              Close\r\n                            </Button>\r\n                          </DialogActions>\r\n                        </Dialog>\r\n                      </div>\r\n                      <div style={{ fontWeight: \"800\", display: 'flex', flexDirection: 'column' }}>\r\n                        {conversation?.payment_info?.length > 0 ? (\r\n                          <div style={{display: 'flex'}}>\r\n                            {conversation?.payment_info\r\n                              ?.filter((f) => f.type == \"plink\")\r\n                              ?.map((i) => i.amount)\r\n                              .reduce((pv, cv) => {\r\n                                return pv + cv;\r\n                              }, 0) /\r\n                              100 +\r\n                              \" \" +\r\n                              conversation?.currency}\r\n\r\n                            <span\r\n                              style={{\r\n                                display: 'flex',\r\n                                alignSelf: 'center',\r\n                                marginLeft: '5px',\r\n                                cursor: \"pointer\",\r\n                                color: paymentStatusCheck==\"\" ? \"orange\" : paymentStatusCheck===\"success\"? \"green\" :\"red\",\r\n                              }}\r\n                              onClick={handlePlinkupdate}\r\n                            >\r\n                              <RefreshIcon fontSize=\"small\" />\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                       \r\n                          <div>\r\n                          ---\r\n                          <span\r\n                              style={{\r\n                                cursor: \"pointer\",\r\n                                color: paymentStatusCheck==\"\" ? \"orange\" : paymentStatusCheck===\"success\"? \"green\" :\"red\",\r\n                              }}\r\n                              onClick={handlePlinkupdate}\r\n                            >\r\n                              <RefreshIcon fontSize=\"small\" />\r\n                          </span>\r\n                          </div>\r\n                        )}\r\n\r\n                        {/* end shivanshu */}\r\n\r\n                        {/* <div>{virtualAccPayments && virtualAccPayments?.length > 0 && virtualAccPayments?.map((i) => i?.amount).reduce((a, b) => { return (a + b)}, 0)/100 + ' ' + virtualAccPayments[0]?.currency + ' (paid to vpa)'}</div> */}\r\n                        <div>\r\n                          {conversation?.payment_info?.filter(\r\n                            (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                          ) &&\r\n                            conversation?.payment_info?.filter(\r\n                              (i) => i.type == \"vpa\" && i.status == \"captured\"\r\n                            ).length > 0 && (\r\n                              <>\r\n                                {conversation?.payment_info\r\n                                  ?.filter(\r\n                                    (i) =>\r\n                                      i.type == \"vpa\" && i.status == \"captured\"\r\n                                  )\r\n                                  ?.map((k) => k?.amount)\r\n                                  .reduce((x, z) => {\r\n                                    return x + z;\r\n                                  }, 0) /\r\n                                  100 +\r\n                                  \" INR (paid to vpa)\"}\r\n                                \r\n                                {/* <div\r\n                                  style={{\r\n                                    cursor: \"pointer\",\r\n                                    float: \"left\",\r\n                                    color: \"orange\",\r\n                                  }}\r\n                                  onClick={handleVaUpdate}\r\n                                >\r\n                                  <RefreshIcon fontSize=\"medium\" />\r\n                                </div> */}\r\n                              </>\r\n                            )}\r\n                        </div>\r\n                      </div>\r\n                      <div>\r\n                        <FormControlLabel\r\n                          control={\r\n                            <Checkbox\r\n                              checked={\r\n                                conversation?.payment_status == \"paid\"\r\n                                  ? true\r\n                                  : false\r\n                              }\r\n                              onChange={handleSessionPaymentStatus}\r\n                              size=\"small\"\r\n                              name=\"payment\"\r\n                            />\r\n                          }\r\n                          label=\"Fully Paid\"\r\n                        />\r\n                        <div style={{ fontSize: \"12px\", marginTop: \"-7px\" }}>\r\n                          (Use it only in case of bank transfer)\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Total Amount Paid to Tutors:\r\n                      </div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.assigned_tutors &&\r\n                        conversation?.assigned_tutors?.length > 0\r\n                          ? conversation?.assigned_tutors\r\n                              ?.filter((e) => e?.pout_info?.length > 0)\r\n                              ?.map(\r\n                                (i) =>\r\n                                  i?.pout_info\r\n                                    ?.filter((f) => f.status == \"processed\")\r\n                                    .map((k) => k?.amount)\r\n                                    .reduce((x, z) => {\r\n                                      return x + z;\r\n                                    }, 0) / 100\r\n                              )\r\n                              .reduce((x, z) => {\r\n                                return x + z;\r\n                              }, 0) + \" INR\"\r\n                          : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Subject:</div>\r\n                      <div\r\n                        style={{\r\n                          fontWeight: \"800\",\r\n                          maxWidth: \"300px\",\r\n                          paddingRight: \"45px\",\r\n                        }}\r\n                      >\r\n                        {conversation?.subject\r\n                          ? conversation?.subject.toUpperCase()\r\n                          : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Tutor Dealt Amount:\r\n                      </div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.tutor_dealt_amount && !editTutorAmt ? (\r\n                          <div style={{ fontWeight: \"800\" }}>\r\n                            <>\r\n                              <span>\r\n                                {conversation?.tutor_dealt_amount / 100 +\r\n                                  \" INR\"}\r\n                              </span>\r\n                              &nbsp;\r\n                              <span style={{ cursor: \"pointer\" }}>\r\n                                <EditIcon\r\n                                  fontSize=\"x-small\"\r\n                                  style={{ fontSize: \"15px\" }}\r\n                                  onClick={() => setEditTutorAmt(true)}\r\n                                />\r\n                              </span>\r\n                            </>\r\n                          </div>\r\n                        ) : (\r\n                          <span style={{ fontWeight: \"800\" }}>\r\n                            <input\r\n                              type=\"number\"\r\n                              style={{\r\n                                width: \"30%\",\r\n                                height: \"20px\",\r\n                                marginLeft: \"5px\",\r\n                                marginTop: \"5px\",\r\n                                outline: \"none\",\r\n                                border: \"none\",\r\n                                borderBottom: \"1px solid gray\",\r\n                                borderRadius: \"0px\",\r\n                              }}\r\n                              value={tutorDealtAmount}\r\n                              onChange={(e) =>\r\n                                setTutorDealtAmount(e.target.value)\r\n                              }\r\n                              autoFocus\r\n                            />{\" \"}\r\n                            &nbsp;\r\n                            {!disableUpdateTutor ? (\r\n                              <button\r\n                                style={{\r\n                                  backgroundColor: \"#1876D1\",\r\n                                  color: \"#ffff\",\r\n                                  border: \"none\",\r\n                                  borderRadius: \"2px\",\r\n                                  height: \"25px\",\r\n                                  cursor: \"pointer\",\r\n                                }}\r\n                                onClick={tutorAmtHandler}\r\n                              >\r\n                                Update\r\n                              </button>\r\n                            ) : (\r\n                              <button\r\n                                style={{\r\n                                  border: \"1px solid #e3e0e0\",\r\n                                  borderRadius: \"2px\",\r\n                                  height: \"25px\",\r\n                                }}\r\n                                disabled\r\n                              >\r\n                                <CircularProgress\r\n                                  fontSize=\"small\"\r\n                                  style={{ width: \"15px\", height: \"15px\" }}\r\n                                />{\" \"}\r\n                                Update\r\n                              </button>\r\n                            )}\r\n                          </span>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Type:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {conversation?.type ? conversation.type : \"---\"}\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Work Status:</div>\r\n                      <div style={{ fontWeight: \"800\" }}>\r\n                        {!edit ? (\r\n                          <>\r\n                            <span>\r\n                              {conversation?.work_status\r\n                                ? conversation?.work_status\r\n                                : \"New Task\"}\r\n                            </span>\r\n                            &nbsp;\r\n                            <span style={{ cursor: \"pointer\" }}>\r\n                              <EditIcon\r\n                                fontSize=\"x-small\"\r\n                                style={{ fontSize: \"15px\" }}\r\n                                onClick={() => setEdit(true)}\r\n                              />\r\n                            </span>\r\n                          </>\r\n                        ) : (\r\n                          <NativeSelect\r\n                            defaultValue={conversation?.work_status}\r\n                            inputProps={{\r\n                              name: \"age\",\r\n                              id: \"uncontrolled-native\",\r\n                            }}\r\n                            style={{ padding: \"5px\" }}\r\n                            onChange={handleChangeStatus}\r\n                          >\r\n                            <option value=\"\">-select-</option>\r\n                            <option value=\"New Task\">New Task</option>\r\n                            <option value=\"Not Confirmed\">Not Confirmed</option>\r\n                            <option value=\"Tutors Notified\">\r\n                              Tutors Notified\r\n                            </option>\r\n                            <option value=\"Tutors Assigned\">\r\n                              Tutors Assigned\r\n                            </option>\r\n                            <option value=\"Pending\">Pending</option>\r\n                            <option value=\"In Progress\">In Progress</option>\r\n                            <option value=\"Follow Up\">Follow Up</option>\r\n                            <option value=\"Client Cancelled\">\r\n                              Client Cancelled\r\n                            </option>\r\n                            <option value=\"Agent Cancelled\">\r\n                              Agent Cancelled\r\n                            </option>\r\n                            <option value=\"Completed\">Completed</option>\r\n                            <option value=\"Solution Sent\">Send Solution</option>\r\n                          </NativeSelect>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"row\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Agent Name & Comment:\r\n                      </div>\r\n                      <div style={{ fontWeight: \"800\", marginTop: \"5px\" }}>\r\n                        <textarea\r\n                          id=\"agentComment\"\r\n                          name=\"agentComment\"\r\n                          value={agentComment}\r\n                          onChange={(e) => setAgentComment(e.target.value)}\r\n                          style={{\r\n                            width: \"80%\",\r\n                            borderRadius: \"5px\",\r\n                            padding: \"5px 10px\",\r\n                            border: \"1px solid #d1d1d1\",\r\n                            resize: \"none\",\r\n                            outline: \"none\",\r\n                            fontFamily: \"sans-serif\",\r\n                          }}\r\n                          rows=\"4\"\r\n                          cols=\"50\"\r\n                          placeholder=\"e.g. Sachin: *Your comments*\"\r\n                        />\r\n                        <button\r\n                          style={{\r\n                            backgroundColor: \"#1876D1\",\r\n                            color: \"#ffff\",\r\n                            border: \"none\",\r\n                            borderRadius: \"5px\",\r\n                            height: \"25px\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          onClick={agentCommentHandler}\r\n                        >\r\n                          Update\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"45%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Agent Comments:\r\n                        {conversation?.agent_comments &&\r\n                          conversation?.agent_comments?.length > 0 && (\r\n                            <span>\r\n                              <HtmlTooltip\r\n                                placement=\"top\"\r\n                                title={\r\n                                  <>\r\n                                    <Typography\r\n                                      color=\"inherit\"\r\n                                      style={{\r\n                                        fontSize: \"13.5px\",\r\n                                        fontWeight: \"600\",\r\n                                        marginBottom: \"5px\",\r\n                                      }}\r\n                                    >\r\n                                      Old Comments:{\" \"}\r\n                                    </Typography>\r\n                                    <Typography\r\n                                      color=\"inherit\"\r\n                                      style={{\r\n                                        fontSize: \"13.5px\",\r\n                                        fontWeight: \"600\",\r\n                                        marginBottom: \"5px\",\r\n                                      }}\r\n                                    >\r\n                                      {conversation?.agent_comments?.map(\r\n                                        (i) => (\r\n                                          <div\r\n                                            style={{\r\n                                              fontSize: \"12px\",\r\n                                              fontWeight: \"normal\",\r\n                                            }}\r\n                                          >\r\n                                            {i}\r\n                                          </div>\r\n                                        )\r\n                                      )}\r\n                                    </Typography>\r\n                                  </>\r\n                                }\r\n                              >\r\n                                <InfoIcon\r\n                                  fontSize=\"small\"\r\n                                  style={{\r\n                                    fontSize: \"12px\",\r\n                                    cursor: \"pointer\",\r\n                                    marginLeft: \"1px\",\r\n                                  }}\r\n                                />\r\n                              </HtmlTooltip>\r\n                            </span>\r\n                          )}\r\n                      </div>\r\n                      <div\r\n                        style={{\r\n                          fontWeight: \"800\",\r\n                          fontSize: \"14px\",\r\n                          maxWidth: \"270px\",\r\n                        }}\r\n                      >\r\n                        {conversation?.agent_comments_new &&\r\n                        conversation?.agent_comments_new.length > 0\r\n                          ? conversation?.agent_comments_new\r\n                              ?.slice(0, lastIndex)\r\n                              .map((i) => (\r\n                                <div>\r\n                                  [\r\n                                  {moment(i.timestamp).format(\r\n                                    \"MMM Do YY, h:mm a\"\r\n                                  )}\r\n                                  ] {i.agent_comment}\r\n                                </div>\r\n                              ))\r\n                          : \"---\"}\r\n                        {conversation?.agent_comments_new &&\r\n                        conversation?.agent_comments_new.length > 1 &&\r\n                        lastIndex == 1 ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"flex-start\",\r\n                              color: \"#5555ff\",\r\n                              cursor: \"pointer\",\r\n                              fontSize: \"12px\",\r\n                            }}\r\n                            onClick={() =>\r\n                              setLastIndex(\r\n                                conversation?.agent_comments_new.length\r\n                              )\r\n                            }\r\n                          >\r\n                            Show More <ExpandMoreIcon fontSize=\"small\" />\r\n                          </div>\r\n                        ) : conversation?.agent_comments_new &&\r\n                          conversation?.agent_comments_new.length > 1 &&\r\n                          lastIndex > 1 ? (\r\n                          <div\r\n                            style={{\r\n                              display: \"flex\",\r\n                              justifyContent: \"flex-start\",\r\n                              color: \"#5555ff\",\r\n                              cursor: \"pointer\",\r\n                              fontSize: \"12px\",\r\n                            }}\r\n                            onClick={() => setLastIndex(1)}\r\n                          >\r\n                            Show Less <KeyboardArrowUpIcon fontSize=\"small\" />\r\n                          </div>\r\n                        ) : (\r\n                          \"\"\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n                  </DialogContentText>\r\n                  <DialogContentText\r\n                    id=\"scroll-dialog-description\"\r\n                    ref={descriptionElementRef_}\r\n                    tabIndex={-1}\r\n                    style={{\r\n                      display: \"flex\",\r\n                      flexDirection: \"column\",\r\n                      padding: \"10px 0px 20px 0px\",\r\n                    }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                        marginBottom: \"20px\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Folder G-Drive Link:\r\n                      </div>\r\n                      {/* {conversation?.filelink\r\n                        ? conversation?.filelink.map((i, j) => (\r\n                            <a\r\n                              style={{ width: 'max-content' }}\r\n                              href={i}\r\n                              target='_blank'\r\n                            >\r\n                              File {j + 1}\r\n                            </a>\r\n                          ))\r\n                        : '---'} */}\r\n                      {conversation?.folderlink ? (\r\n                        <a\r\n                          style={{ width: \"max-content\" }}\r\n                          href={conversation?.folderlink}\r\n                          target=\"_blank\"\r\n                        >\r\n                          Click here\r\n                        </a>\r\n                      ) : (\r\n                        \"---\"\r\n                      )}\r\n                    </div>\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                        marginBottom: \"20px\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>Form Link:</div>\r\n                      <a\r\n                        style={{ width: \"max-content\" }}\r\n                        href={`${linkBaseURL}/${conversation.session_id}/${conversation.client_id}?agent=success&key=poc_y6d_ui9`}\r\n                        target=\"_blank\"\r\n                      >\r\n                        Form Link\r\n                      </a>\r\n                    </div>\r\n                    {/* <div\r\n                      style={{\r\n                        display: 'flex',\r\n                        flex: '55%',\r\n                        flexDirection: 'column',\r\n                        marginBottom: '20px',\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: '14px' }}>Tutor Deadline:</div>\r\n                      <input type='datetime-local' style={{width: '130px', outline: 'none', borderRadius: '3px', border: '1px solid gray', fontFamily: 'inherit'}} onChange={(e) => setTutorDeadline(e.target.value)} />\r\n                    </div> */}\r\n                    {/* <div\r\n                      style={{\r\n                        display: 'flex',\r\n                        flex: '55%',\r\n                        flexDirection: 'column',\r\n                        marginBottom: '20px',\r\n                      }}\r\n                    >\r\n                    {conversation?.type == 'Live Session' &&\r\n                    <>\r\n                    <div style={{ fontSize: '14px' }}>Tutor Deadline:</div>\r\n                    <NumberFormat\r\n                      style={{width: \"60px\", outline: \"none\", borderRadius: \"3px\", border: \"1px solid gray\"}}\r\n                      format=\"## : ##\"\r\n                      placeholder=\"00 : 00\"\r\n                      onChange={(e) => setTutorDuration(e.target.value)}\r\n                      autoComplete=\"off\"\r\n                    />\r\n                    </>}\r\n                    </div> */}\r\n                    <div\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flex: \"55%\",\r\n                        flexDirection: \"column\",\r\n                      }}\r\n                    >\r\n                      <div style={{ fontSize: \"14px\" }}>\r\n                        Tutors for this {conversation?.type}:\r\n                      </div>\r\n                      {conversation?.notified_tutors &&\r\n                      conversation?.notified_tutors?.length > 0 ? (\r\n                        <NotifiedTutors\r\n                          notified_tutors={conversation?.notified_tutors}\r\n                          assigned_tutors={conversation?.assigned_tutors}\r\n                          tutor_interested={conversation?.tutor_interested}\r\n                          sessionId={conversation?.session_id}\r\n                          setAssignedTutor={setAssignedTutor}\r\n                          tutorPayout={tutorPayout}\r\n                          subject={conversation?.subject}\r\n                          deadline={conversation?.deadline}\r\n                          duration={conversation?.duration}\r\n                          updated={updated}\r\n                          setUpdated={setUpdated}\r\n                          sessionType={conversation.type}\r\n                          // tutor_dealt_amount={conversation?.tutor_dealt_amount}\r\n                        />\r\n                      ) : (\r\n                        \"---\"\r\n                      )}\r\n                    </div>\r\n                  </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                  <Button onClick={handleCloseSessionDetails}>Close</Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <ToastContainer\r\n          position=\"top-right\"\r\n          autoClose={10000}\r\n          hideProgressBar={false}\r\n          newestOnTop={false}\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnFocusLoss\r\n          draggable\r\n          pauseOnHover\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SessionList;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\sessionTab\\NotifiedTutors.jsx",["581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639"],"import React, { useState, useEffect } from \"react\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Tab from \"@mui/material/Tab\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport TabContext from \"@mui/lab/TabContext\";\r\nimport TabList from \"@mui/lab/TabList\";\r\nimport moment from 'moment';\r\nimport TabPanel from \"@mui/lab/TabPanel\";\r\nimport AssignmentTurnedInOutlinedIcon from \"@mui/icons-material/AssignmentTurnedInOutlined\";\r\nimport AssignmentTurnedInIcon from \"@mui/icons-material/AssignmentTurnedIn\";\r\nimport Chip from \"@mui/material/Chip\";\r\nimport StarPurple500SharpIcon from \"@mui/icons-material/StarPurple500Sharp\";\r\nimport Button from \"@mui/material/Button\";\r\nimport axios from \"axios\";\r\n\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\n\r\nimport Radio from \"@mui/material/Radio\";\r\nimport RadioGroup from \"@mui/material/RadioGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport NativeSelect from \"@mui/material/NativeSelect\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport RecommendIcon from \"@mui/icons-material/Recommend\";\r\nimport DoNotDisturbIcon from \"@mui/icons-material/DoNotDisturb\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport InfoIcon from \"@mui/icons-material/Info\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport WhatsappOutlinedIcon from \"@mui/icons-material/WhatsappOutlined\";\r\nimport MarkEmailReadOutlinedIcon from \"@mui/icons-material/MarkEmailReadOutlined\";\r\nimport cancelPic1 from \"../../assets/cancelledPic3.png\";\r\nimport TutorRatingAndReviews from \"../dialogs/TutorRating&Reviews\";\r\nimport RefreshIcon from '@mui/icons-material/Refresh';\r\nimport { NAME_SPACE, WAID } from \"../../utils/variables\";\r\n\r\nconst HtmlTooltip = styled(({ className, ...props }) => (\r\n  <Tooltip {...props} classes={{ popper: className }} />\r\n))(({ theme }) => ({\r\n  [`& .${tooltipClasses.tooltip}`]: {\r\n    backgroundColor: \"rgba(80, 80, 80, 0.92)\",\r\n    color: \"#ffff\",\r\n    fontWeight: \"500\",\r\n    maxWidth: 350,\r\n    fontSize: theme.typography.pxToRem(12),\r\n    border: \"1px solid rgba(80, 80, 80, 0.92)\",\r\n  },\r\n}));\r\n\r\nconst NotifiedTutors = ({\r\n  notified_tutors,\r\n  assigned_tutors,\r\n  tutor_interested,\r\n  tutor_dealt_amount,\r\n  sessionId,\r\n  setAssignedTutor,\r\n  tutorPayout,\r\n  subject,\r\n  deadline,\r\n  duration,\r\n  updated,\r\n  setUpdated,\r\n  sessionType,\r\n}) => {\r\n  const [value, setValue] = useState(\"1\");\r\n  const [openPayment, setOpenPayment] = useState(false);\r\n  const [tutorAmt, setTutorAmt] = useState();\r\n  let [tutorName, setTutorName] = useState();\r\n  let [accNo, setAccNo] = useState();\r\n  let [ifsc, setIfsc] = useState();\r\n  let [upiId, setUpiId] = useState();\r\n  const [tutorData, setTutorData] = useState();\r\n  const [payOption, setPayOption] = useState();\r\n  const [payMode, setPayMode] = useState(\"IMPS\");\r\n  const [paymentLoading, setPaymentLoading] = useState(false);\r\n  const [paymentSuccess, setPaymentSuccess] = useState(false);\r\n  const [rpayPout, setRpayPout] = useState();\r\n  const [assgnTutorRating, setAssgnTutorRating] = useState(0);\r\n  const [disableRateBtn, setDisableRateBtn] = useState(false);\r\n  const [checked, setChecked] = useState(false);\r\n  let deviceNo = localStorage.getItem(\"device\");\r\n  const [tutorDuration, setTutorDuration] = useState(\"\");\r\n  const [showTutorRatingBox, setShowTutorRatingBox] = useState(false);\r\n  const [storeTutorRating, setStoreTutorRating] = useState();\r\n  const [assgnTutorId, setAssgnTutorId] = useState();\r\n  const [editTutorAmt, setEditTutorAmt] = useState(false);\r\n  const [tutorDealtAmount, setTutorDealtAmount] = useState();\r\n  const [tutorDetails, setTutorDetails] = useState();\r\n\r\n  console.log(tutorPayout);\r\n\r\n  const editTutorAmtFunc=(e,tutorId,ind)=>{\r\n    e.preventDefault()\r\n    console.log({tutorId,ind})\r\n    setAssgnTutorId(tutorId)\r\n    setEditTutorAmt(true)\r\n    assigned_tutors.map(el=>{\r\n      if(el.tutor_id===tutorId){\r\n      setTutorDealtAmount((+el.tutor_dealt_amount/100)+\"\")\r\n    }\r\n  })\r\n  \r\n  };\r\n\r\n// set tutor dealt amount\r\n  const tutorAmtHandler = async (tutorId) => {\r\n    // setDisableUpdateTutor(true);\r\n    const payload = {\r\n      session_id: sessionId,\r\n      tutor_id:tutorId,\r\n      tutor_dealt_amount: tutorDealtAmount * 100,\r\n    };\r\n    try {\r\n      const response = await axios.put(\r\n        `${localStorage.getItem(\"api\")}/api/sessions/assignedTutorUpdateAmount`,\r\n        payload\r\n      );\r\n     \r\n      setEditTutorAmt(false);\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log({err});\r\n      \r\n    }\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangePayMode = (event) => {\r\n    setPayMode(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  // handleTutorRating\r\n  const handleTutorRating = async (ratingAndReview, _id) => {\r\n    // e.preventDefault()\r\n    await getTutorDetails(_id);\r\n    tutorDetails?.rating_and_reviews &&\r\n    tutorDetails?.rating_and_reviews.map((el) => {\r\n        if (el.sessionId === sessionId) setAssgnTutorRating(el);\r\n      });\r\n    setAssgnTutorId(_id);\r\n    setShowTutorRatingBox(true);\r\n  };\r\n\r\n  // assign tutors fro interested tutor list\r\n  const handleAssignTutor = async (tutor) => {\r\n    if (!assigned_tutors.find((el) => el.tutor_id == tutor.tutor_id)) {\r\n      let tutor_dur = {\r\n        tutor_duration: tutorDuration ? tutorDuration : duration,\r\n      };\r\n      // const payload = {\r\n      //   session_id: sessionId,\r\n      //   assigned_tutor: {...tutor, ...tutor_dur}\r\n      // };\r\n      let payloadTutor = {\r\n        tutorId: tutor.tutor_id,\r\n        sessions_assigned: {\r\n          session_id: sessionId,\r\n          deadline: deadline,\r\n          duration: duration,\r\n          type: sessionType,\r\n        },\r\n      };\r\n      try {\r\n        // const response = await axios.post(\r\n        //   `${localStorage.getItem('api')}/api/sessions/asignTutor`,\r\n        //   payload,\r\n        //   {\r\n        //     headers: {\r\n        //       'Content-Type': 'application/json',\r\n        //     },\r\n        //   }\r\n        //);\r\n        // tutor notification\r\n        if (tutor.wa_id && tutor.email) {\r\n          // mail and whatsapp\r\n          const payload = {\r\n            session_id: sessionId,\r\n            assigned_tutor: { ...tutor, ...tutor_dur, medium: \"wa-mail\" },\r\n          };\r\n          const response = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/sessions/asignTutor`,\r\n            payload,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          await handleSendTemplateToAssignTutor(\r\n            tutor.wa_id,\r\n            tutor.name,\r\n            tutor.tutor_id\r\n          );\r\n          await handleSendMailToAssignTutor(\r\n            tutor.email,\r\n            tutor.name,\r\n            tutor.tutor_id\r\n          );\r\n          await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/tutor/setTutorAssignedSession`,\r\n            payloadTutor,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          setAssignedTutor(response?.data?.result?.assigned_tutors.length);\r\n        } else if (tutor.wa_id && !tutor.email) {\r\n          // only whatsapp\r\n          const payload = {\r\n            session_id: sessionId,\r\n            assigned_tutor: { ...tutor, ...tutor_dur, medium: \"wa\" },\r\n          };\r\n          const response = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/sessions/asignTutor`,\r\n            payload,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          await handleSendTemplateToAssignTutor(\r\n            tutor.wa_id,\r\n            tutor.name,\r\n            tutor.tutor_id\r\n          );\r\n          await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/tutor/setTutorAssignedSession`,\r\n            payloadTutor,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          setAssignedTutor(response?.data?.result?.assigned_tutors.length);\r\n        } else if (!tutor.wa_id && tutor.email) {\r\n          //only email\r\n          const payload = {\r\n            session_id: sessionId,\r\n            assigned_tutor: { ...tutor, ...tutor_dur, medium: \"mail\" },\r\n          };\r\n          const response = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/sessions/asignTutor`,\r\n            payload,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          await handleSendMailToAssignTutor(\r\n            tutor.email,\r\n            tutor.name,\r\n            tutor.tutor_id\r\n          );\r\n          await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/tutor/setTutorAssignedSession`,\r\n            payloadTutor,\r\n            {\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n          setAssignedTutor(response?.data?.result?.assigned_tutors.length);\r\n        }\r\n\r\n        // await axios.post('http://localhost:8600/api/tutor/setTutorAssignedSession',\r\n        //   payloadTutor,\r\n        //   {\r\n        //     headers: {\r\n        //       'Content-Type': 'application/json'\r\n        //     }\r\n        //   }\r\n        // );\r\n        // setAssignedTutor(response?.data?.result?.assigned_tutors.length);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  // cancel assigned tutor\r\n  const handleCancelAssignedTutor = async (tutorName, tutorWaId, tutorId) => {\r\n    // setChecked(event.target.checked);\r\n    try {\r\n      // const payload = {\r\n      //   status: \"cancelled\",\r\n      // };\r\n      // await axios.put(\r\n      //   `${localStorage.getItem('api')}/api/sessions/cancel-tutor/${sessionId}/${tutorId}`,\r\n      //   payload\r\n      // );\r\n      // sending template for tutor active or inactive\r\n      // if(conversation?.wa_id){\r\n      const payloadCancelAssignedTutor = {\r\n        name: tutorName,\r\n        from: \"\",\r\n        wa_id: tutorWaId,\r\n        templateName: \"cancelassigned_tutors\",\r\n        templateText: `Hi ${tutorName}, You are cancelled for the ${\r\n          sessionType === \"Live Session\" ? \"Live session\" : \"General session\"\r\n        } with session id ${sessionId} `,\r\n        template: {\r\n          namespace: NAME_SPACE,\r\n          language: \"en\",\r\n        },\r\n        param1: `${\r\n          sessionType === \"Live Session\" ? \"LIVE SESSION\" : \"GENERAL SESSION\"\r\n        } UNASSIGNED`,\r\n        param2: tutorName,\r\n        param3:\r\n          sessionType === \"Live Session\" ? \"Live session\" : \"General session\",\r\n        param4: sessionId,\r\n        button: \"\",\r\n        timestamp: \"\",\r\n        operatorName: \"\",\r\n        isOwner: true,\r\n        status: \"\",\r\n        ticketId: \"\",\r\n        eventType: \"template\",\r\n      };\r\n\r\n      await axios\r\n        .post(\r\n          `${localStorage.getItem(\r\n            \"api\"\r\n          )}/api/messages/tutorActiveInactiveTemplate`,\r\n          payloadCancelAssignedTutor,\r\n          {\r\n            headers: \"\",\r\n          }\r\n        )\r\n        .then(\r\n          async (res) => {\r\n            const payload = {\r\n              status: \"cancelled\",\r\n            };\r\n            await axios.put(\r\n              `${localStorage.getItem(\r\n                \"api\"\r\n              )}/api/sessions/cancel-tutor/${sessionId}/${tutorId}`,\r\n              payload\r\n            );\r\n            console.log(res);\r\n          },\r\n          (error) => {\r\n            console.log(error);\r\n          }\r\n        );\r\n\r\n      // setChecked(status_);\r\n      // setUpdated(!updated);\r\n      // setCancelAssigned(true)\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleOpenTutorPayment = async(index, tutor) => {\r\n    console.log(index);\r\n    // if(assigned_tutors[index].tutor_id == tutorId)\r\n    setTutorName(assigned_tutors[index]?.name);\r\n\r\n    try {\r\n      const tutorDet = await axios.get(`${localStorage.getItem('api')}/api/tutor/getTutorDetail/${assigned_tutors[index]?.tutor_id}`);\r\n      setAccNo(tutorDet?.data?.Bank?.acc_no);\r\n      setIfsc(tutorDet?.data?.Bank?.ifsc_code);\r\n      setUpiId(tutorDet?.data?.Bank?.upi_id);\r\n      setTutorData(tutorDet?.data);\r\n    } catch(err) {\r\n      console.log(err)\r\n    }\r\n    setOpenPayment(true);\r\n  };\r\n\r\n  const handleCloseTutorPayment = () => {\r\n    setOpenPayment(false);\r\n    setTutorData(null);\r\n    setPayOption(null);\r\n  };\r\n\r\n  const handleChangeTutorAmt = (event) => {\r\n    console.log(event.target.value);\r\n    setTutorAmt(event.target.value);\r\n  };\r\n\r\n  const handlePayMode = (event) => {\r\n    setPayOption(event.target.value);\r\n  };\r\n\r\n  useEffect(async () => {\r\n    if (\r\n      tutorPayout?.payload?.payout?.entity?.id == rpayPout &&\r\n      tutorPayout?.payload?.payout?.entity?.status == \"processed\"\r\n    ) {\r\n      // tutor payment status update\r\n      const statusPayload = tutorPayout?.payload?.payout?.entity;\r\n      const statusUpdate = await axios.put(\r\n        `${localStorage.getItem(\r\n          'api'\r\n        )}/api/sessions/update-tutor-payment-status/${sessionId}/${tutorData.wa_id}/${rpayPout}`,\r\n        statusPayload\r\n      );\r\n      setPaymentSuccess(true);\r\n\r\n      //sent template for payment confirmation\r\n      const payload = {\r\n        name: tutorData.name,\r\n        from: \"\",\r\n        wa_id: tutorData.wa_id,\r\n        templateName: \"paytutor_send_notify\",\r\n        templateText:\r\n          \"Hi *{{1}}*. This is Tutorpoint. An amount of *Rs {{2}}* has been sent to your bank account registered with us. Following are the details :   \\n\\n1. Session ID : *{{3}}*\\n2. Tutor ID : *{{4}}*\\n2. Session Subject and Topic : *{{5}}*\\n3. Date and Time : *{{6}}*\\n4. UTR No. : *{{7}}*\\n5. TDS Deducted : *{{8}}*\",\r\n        template: {\r\n          namespace: NAME_SPACE,\r\n          language: \"en\",\r\n        },\r\n        param1: `Payout Received (Your rating for this session ${\r\n          tutorData?.session_rating && tutorData?.session_rating.slice(0, 4)\r\n        })`,\r\n        param2: tutorData.name,\r\n        param3: `${\r\n          // tutorData?.pan ? tutorAmt - tutorAmt * 0.1 : tutorAmt - tutorAmt * 0.2\r\n          tutorPayout?.payload?.payout?.entity?.amount / 100\r\n        } INR`,\r\n        param4: sessionId,\r\n        param5: `${tutorData?.tutor_id} (Profile rating: ${\r\n          tutorData?.session_rating && tutorData?.rating\r\n            ? (\r\n                \"\" +\r\n                (+tutorData?.rating + +tutorData?.session_rating) / 4\r\n              )?.slice(0, 4)\r\n            : tutorData?.session_rating && !tutorData?.rating\r\n            ? (\"\" + tutorData?.session_rating / 2)?.slice(0, 4)\r\n            : \"0\"\r\n        })`,\r\n        param6: subject,\r\n        param7: new Date(deadline).toLocaleString(),\r\n        param8: tutorPayout?.payload?.payout?.entity?.utr,\r\n        param9:\r\n          !checked && tutorData?.pan\r\n            ? (tutorAmt * 0.1).toString()\r\n            : !checked && !tutorData?.pan\r\n            ? (tutorAmt * 0.2).toString()\r\n            : (tutorAmt * 0).toString(),\r\n        button: \"\",\r\n        timestamp: \"\",\r\n        operatorName: \"\",\r\n        isOwner: true,\r\n        status: \"\",\r\n        ticketId: \"\",\r\n        eventType: \"template\",\r\n      };\r\n      const paymentAlert = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/messages/tutorPaymentTemplate`,\r\n        payload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n    } else if (\r\n      tutorPayout?.payload?.payout?.entity?.id == rpayPout &&\r\n      tutorPayout?.payload?.payout?.entity?.status == \"reversed\"\r\n    ) {\r\n      // setPaymentLoading(false);\r\n      const statusPayload_ = tutorPayout?.payload?.payout?.entity;\r\n      const statusUpdate = await axios.put(\r\n        `${localStorage.getItem(\r\n          \"api\"\r\n        )}/api/sessions/update-tutor-payment-status/${sessionId}/${\r\n          tutorData.wa_id\r\n        }/${rpayPout}`,\r\n        statusPayload_\r\n      );\r\n      setPaymentSuccess(true);\r\n    } else if (\r\n      tutorPayout?.payload?.payout?.entity?.id == rpayPout &&\r\n      tutorPayout?.payload?.payout?.entity?.status == 'cancelled'\r\n    ) {\r\n      // setPaymentLoading(false);\r\n      const statusPayload_ = tutorPayout?.payload?.payout?.entity;\r\n      const statusUpdate = await axios.put(\r\n        `${localStorage.getItem(\r\n          'api'\r\n        )}/api/sessions/update-tutor-payment-status/${sessionId}/${\r\n          tutorData.wa_id\r\n        }/${rpayPout}`,\r\n        statusPayload_\r\n      );\r\n      setPaymentSuccess(true);\r\n    }\r\n  }, [tutorPayout]);\r\n\r\n  const payHeaders = {\r\n    username: \"rzp_live_Jk4vwq7tyL9Aeg\",\r\n    password: \"qUjOJWotN6x47WSDExJ4NURs\",\r\n  };\r\n\r\n  const payTutor = async () => {\r\n    if (payOption == \"upi\") {\r\n      setPaymentLoading(true);\r\n      const payload = {\r\n        name: tutorData.name,\r\n        email: tutorData.email,\r\n        contact: tutorData.wa_id,\r\n        type: \"vendor\",\r\n        reference_id: tutorData.tutor_id,\r\n        // notes: {\r\n        //   random_key_1: 'tutor\\'s new contact id creation',\r\n        //   random_key_2: 'vendon contact id',\r\n        // },\r\n      };\r\n      try {\r\n        if (!tutorData.contact_id) {\r\n          // create contact id\r\n          const response = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/payments/contacts`,\r\n            payload,\r\n            {\r\n              headers: {\r\n                ...payHeaders,\r\n              },\r\n            }\r\n          );\r\n          console.log(response?.data?.result);\r\n\r\n          // create fund account - bank\r\n          if (payOption == \"bank\") {\r\n            const payloadBank = {\r\n              contact_id: response?.data?.contact_id,\r\n              account_type: \"bank_account\",\r\n              bank_account: {\r\n                name: tutorData.name,\r\n                ifsc: tutorData?.Bank?.ifsc_code,\r\n                account_number: tutorData?.Bank?.acc_no,\r\n              },\r\n            };\r\n            const response2 = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/fund_accounts_bank/${\r\n                tutorData.wa_id\r\n              }`,\r\n              payloadBank,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            // create payout\r\n            const payloadPayout_ = {\r\n              account_number: \"3434949239801329\",\r\n              fund_account_id: response2?.data?.fund_bank_id,\r\n              amount:\r\n                !checked && tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 10\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 20\r\n                  : tutorAmt * 100,\r\n              currency: \"INR\",\r\n              mode: payMode,\r\n              purpose: \"vendor bill\",\r\n              // queue_if_low_balance: true,\r\n              reference_id: response2?.data?.tutor_id,\r\n              narration: \"Tutor Fund Transfer\",\r\n              notes: {\r\n                TDS:\r\n                  !checked && tutorData.pan\r\n                    ? tutorAmt * 0.1\r\n                    : !checked && !tutorData?.pan\r\n                    ? tutorAmt * 0.2\r\n                    : tutorAmt * 0,\r\n                PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n                EMAIL: tutorData.email,\r\n                SESSION: sessionId,\r\n              },\r\n            };\r\n            const payoutRes_ = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n                tutorData.wa_id\r\n              }/${sessionId}`,\r\n              payloadPayout_,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(payoutRes_?.data);\r\n            setRpayPout(payoutRes_?.data?.rpay?.id);\r\n            // setOpenPayment(false);\r\n            console.log(response2?.data?.result);\r\n          }\r\n          // create fund account - upi\r\n          else if (payOption == \"upi\") {\r\n            const payloadUpi = {\r\n              contact_id: response?.data?.contact_id,\r\n              account_type: \"vpa\",\r\n              vpa: {\r\n                address: tutorData?.Bank?.upi_id,\r\n              },\r\n            };\r\n            const response2 = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/fund_accounts_upi/${\r\n                tutorData.wa_id\r\n              }`,\r\n              payloadUpi,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(response2?.data);\r\n\r\n            // create payout\r\n            const payloadPayout_ = {\r\n              account_number: \"3434949239801329\",\r\n              fund_account_id: response2?.data?.fund_upi_id,\r\n              amount:\r\n                !checked && tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 10\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 20\r\n                  : tutorAmt * 100,\r\n              currency: \"INR\",\r\n              mode: \"UPI\",\r\n              purpose: \"vendor bill\",\r\n              // queue_if_low_balance: true,\r\n              reference_id: response2?.data?.tutor_id,\r\n              narration: \"Tutor Fund Transfer\",\r\n              notes: {\r\n                TDS:\r\n                  !checked && tutorData.pan\r\n                    ? tutorAmt * 0.1\r\n                    : !checked && !tutorData?.pan\r\n                    ? tutorAmt * 0.2\r\n                    : tutorAmt * 0,\r\n                PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n                EMAIL: tutorData.email,\r\n                SESSION: sessionId,\r\n              },\r\n            };\r\n            const payoutRes_ = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n                tutorData.wa_id\r\n              }/${sessionId}`,\r\n              payloadPayout_,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(payoutRes_?.data);\r\n            setRpayPout(payoutRes_?.data?.rpay?.id);\r\n            // setOpenPayment(false);\r\n          }\r\n        } else if (\r\n          tutorData.contact_id &&\r\n          tutorData.fund_upi_id &&\r\n          tutorData.fund_bank_id\r\n        ) {\r\n          console.log(\"already created\");\r\n          const payloadPayout = {\r\n            account_number: \"3434949239801329\",\r\n            fund_account_id:\r\n              payOption == \"bank\"\r\n                ? tutorData.fund_bank_id\r\n                : payOption == \"upi\"\r\n                ? tutorData.fund_upi_id\r\n                : \"\",\r\n            amount:\r\n              !checked && tutorData?.pan\r\n                ? tutorAmt * 100 - tutorAmt * 10\r\n                : !checked && !tutorData?.pan\r\n                ? tutorAmt * 100 - tutorAmt * 20\r\n                : tutorAmt * 100,\r\n            currency: \"INR\",\r\n            mode:\r\n              payOption == \"bank\" ? payMode : payOption == \"upi\" ? \"UPI\" : \"\",\r\n            purpose: \"vendor bill\",\r\n            // queue_if_low_balance: true,\r\n            reference_id: tutorData.tutor_id,\r\n            narration: \"Tutor Fund Transfer\",\r\n            notes: {\r\n              TDS:\r\n                !checked && tutorData.pan\r\n                  ? tutorAmt * 0.1\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 0.2\r\n                  : tutorAmt * 0,\r\n              PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n              EMAIL: tutorData.email,\r\n              SESSION: sessionId,\r\n            },\r\n          };\r\n          const payoutRes = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n              tutorData.wa_id\r\n            }/${sessionId}`,\r\n            payloadPayout,\r\n            {\r\n              headers: {\r\n                ...payHeaders,\r\n              },\r\n            }\r\n          );\r\n          setRpayPout(payoutRes?.data?.rpay?.id);\r\n          setUpdated(!updated);\r\n          console.log(payoutRes?.data);\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    } else if (payOption == \"bank\") {\r\n      setPaymentLoading(true);\r\n      const payload = {\r\n        name: tutorData.name,\r\n        email: tutorData.email,\r\n        contact: tutorData.wa_id,\r\n        type: \"vendor\",\r\n        reference_id: tutorData.tutor_id,\r\n        // notes: {\r\n        //   random_key_1: 'tutor\\'s new contact id creation',\r\n        //   random_key_2: 'vendon contact id',\r\n        // },\r\n      };\r\n      try {\r\n        if (!tutorData.contact_id) {\r\n          // create contact id\r\n          const response = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/payments/contacts`,\r\n            payload,\r\n            {\r\n              headers: {\r\n                ...payHeaders,\r\n              },\r\n            }\r\n          );\r\n          console.log(response?.data?.result);\r\n\r\n          // create fund account - bank\r\n          if (payOption == \"bank\") {\r\n            const payloadBank = {\r\n              contact_id: response?.data?.contact_id,\r\n              account_type: \"bank_account\",\r\n              bank_account: {\r\n                name: tutorData.name,\r\n                ifsc: tutorData?.Bank?.ifsc_code,\r\n                account_number: tutorData?.Bank?.acc_no,\r\n              },\r\n            };\r\n            const response2 = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/fund_accounts_bank/${\r\n                tutorData.wa_id\r\n              }`,\r\n              payloadBank,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            // create payout\r\n            const payloadPayout_ = {\r\n              account_number: \"3434949239801329\",\r\n              fund_account_id: response2?.data?.fund_bank_id,\r\n              amount:\r\n                !checked && tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 10\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 20\r\n                  : tutorAmt * 100,\r\n              currency: \"INR\",\r\n              mode: payMode,\r\n              purpose: \"vendor bill\",\r\n              // queue_if_low_balance: true,\r\n              reference_id: response2?.data?.tutor_id,\r\n              narration: \"Tutor Fund Transfer\",\r\n              notes: {\r\n                TDS:\r\n                  !checked && tutorData.pan\r\n                    ? tutorAmt * 0.1\r\n                    : !checked && !tutorData?.pan\r\n                    ? tutorAmt * 0.2\r\n                    : tutorAmt * 0,\r\n                PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n                EMAIL: tutorData.email,\r\n                SESSION: sessionId,\r\n              },\r\n            };\r\n            const payoutRes_ = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n                tutorData.wa_id\r\n              }/${sessionId}`,\r\n              payloadPayout_,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(payoutRes_?.data);\r\n            setRpayPout(payoutRes_?.data?.rpay?.id);\r\n            // setOpenPayment(false);\r\n            console.log(response2?.data?.result);\r\n          }\r\n          // create fund account - upi\r\n          else if (payOption == \"upi\") {\r\n            const payloadUpi = {\r\n              contact_id: response?.data?.contact_id,\r\n              account_type: \"vpa\",\r\n              vpa: {\r\n                address: tutorData?.Bank?.upi_id,\r\n              },\r\n            };\r\n            const response2 = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/fund_accounts_upi/${\r\n                tutorData.wa_id\r\n              }`,\r\n              payloadUpi,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(response2?.data);\r\n\r\n            // create payout\r\n            const payloadPayout_ = {\r\n              account_number: \"3434949239801329\",\r\n              fund_account_id: response2?.data?.fund_upi_id,\r\n              amount:\r\n                !checked && tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 10\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 100 - tutorAmt * 20\r\n                  : tutorAmt * 100,\r\n              currency: \"INR\",\r\n              mode: \"UPI\",\r\n              purpose: \"vendor bill\",\r\n              // queue_if_low_balance: true,\r\n              reference_id: response2?.data?.tutor_id,\r\n              narration: \"Tutor Fund Transfer\",\r\n              notes: {\r\n                TDS:\r\n                  !checked && tutorData.pan\r\n                    ? tutorAmt * 0.1\r\n                    : !checked && !tutorData?.pan\r\n                    ? tutorAmt * 0.2\r\n                    : tutorAmt * 0,\r\n                PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n                EMAIL: tutorData.email,\r\n                SESSION: sessionId,\r\n              },\r\n            };\r\n            const payoutRes_ = await axios.post(\r\n              `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n                tutorData.wa_id\r\n              }/${sessionId}`,\r\n              payloadPayout_,\r\n              {\r\n                headers: {\r\n                  ...payHeaders,\r\n                },\r\n              }\r\n            );\r\n            console.log(payoutRes_?.data);\r\n            setRpayPout(payoutRes_?.data?.rpay?.id);\r\n            // setOpenPayment(false);\r\n          }\r\n        } else if (tutorData.contact_id && tutorData.fund_bank_id) {\r\n          console.log(\"already created\");\r\n          const payloadPayout = {\r\n            account_number: \"3434949239801329\",\r\n            fund_account_id:\r\n              payOption == \"bank\"\r\n                ? tutorData.fund_bank_id\r\n                : payOption == \"upi\"\r\n                ? tutorData.fund_upi_id\r\n                : \"\",\r\n            amount:\r\n              !checked && tutorData?.pan\r\n                ? tutorAmt * 100 - tutorAmt * 10\r\n                : !checked && !tutorData?.pan\r\n                ? tutorAmt * 100 - tutorAmt * 20\r\n                : tutorAmt * 100,\r\n            currency: \"INR\",\r\n            mode:\r\n              payOption == \"bank\" ? payMode : payOption == \"upi\" ? \"UPI\" : \"\",\r\n            purpose: \"vendor bill\",\r\n            // queue_if_low_balance: true,\r\n            reference_id: tutorData.tutor_id,\r\n            narration: \"Tutor Fund Transfer\",\r\n            notes: {\r\n              TDS:\r\n                !checked && tutorData.pan\r\n                  ? tutorAmt * 0.1\r\n                  : !checked && !tutorData?.pan\r\n                  ? tutorAmt * 0.2\r\n                  : tutorAmt * 0,\r\n              PAN: tutorData.pan ? tutorData?.pan : \"\",\r\n              EMAIL: tutorData.email,\r\n              SESSION: sessionId,\r\n            },\r\n          };\r\n          const payoutRes = await axios.post(\r\n            `${localStorage.getItem(\"api\")}/api/payments/payouts/${\r\n              tutorData.wa_id\r\n            }/${sessionId}`,\r\n            payloadPayout,\r\n            {\r\n              headers: {\r\n                ...payHeaders,\r\n              },\r\n            }\r\n          );\r\n          setRpayPout(payoutRes?.data?.rpay?.id);\r\n          setUpdated(!updated);\r\n          console.log(payoutRes?.data);\r\n        } else {\r\n          alert(\r\n            \"Something is wrong with the user's bank details! Please try another payment method.\"\r\n          );\r\n        }\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleClosePayWindow = () => {\r\n    setPaymentLoading(false);\r\n    setPaymentSuccess(false);\r\n  };\r\n\r\n  // get tutor details from id\r\n  const getTutorDetails = async (id) => {\r\n    try {\r\n      const response = await axios.get(`${localStorage.getItem('api')}/api/tutor/getTutorDetail/${id}`);\r\n      console.log(response.data);\r\n      setTutorDetails(response.data);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // sending ratings in database\r\n  const handleAssignTutorRating = async (tutorId) => {\r\n    if (storeTutorRating) {\r\n      setDisableRateBtn(true);\r\n      const payload = {\r\n        rating: storeTutorRating?.rating,\r\n        speed: storeTutorRating?.speed,\r\n        accuracy: storeTutorRating?.accuracy,\r\n        legitimacy: storeTutorRating?.legitimacy,\r\n        reviews: storeTutorRating?.reviews,\r\n        session_done: sessionId,\r\n        session_rating: storeTutorRating?.rating,\r\n      };\r\n      try {\r\n        const res = await axios.put(\r\n          `${localStorage.getItem('api')}/api/tutor/setTutorRating/${tutorId}`,\r\n          payload\r\n        );\r\n        const res_ = await axios.put(\r\n          `${localStorage.getItem(\r\n            \"api\"\r\n          )}/api/sessions/tutor-session-rating/${tutorId}/${sessionId}`,\r\n          payload\r\n        );\r\n\r\n        setUpdated(!updated);\r\n        setDisableRateBtn(false);\r\n\r\n        setShowTutorRatingBox(false);\r\n      } catch (err) {\r\n        console.log(err.Error);\r\n        setDisableRateBtn(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(async () => {\r\n    await handleAssignTutorRating(assgnTutorId);\r\n  }, [storeTutorRating]);\r\n\r\n  const handleUnAssignTutor = async (tutorId, status_) => {\r\n    try {\r\n      const payload = {\r\n        status: status_,\r\n      };\r\n      const res = await axios.put(\r\n        `${localStorage.getItem(\r\n          \"api\"\r\n        )}/api/sessions/unassign-tutor/${sessionId}/${tutorId}`,\r\n        payload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  //   const [tutorRating, setTutorRating] = useState();\r\n  //   let response_;\r\n  //   useEffect(() => {\r\n  //   let fetchTutorRating = (tutor_id) => {\r\n  //     response_ = axios.get(\r\n  //         `${localStorage.getItem('api')}/api/tutor/getTutorDetails/${tutor_id}`\r\n  //       );\r\n  //     return (response_?.data?.rating);\r\n  //   };\r\n  //   setTutorRating(() => fetchTutorRating());\r\n  // }, [response_]);\r\n\r\n  const handleSendTemplateToAssignTutor = async (waId, tutorName, tutorId) => {\r\n    const payload = {\r\n      name: \"\",\r\n      from: \"\",\r\n      wa_id: waId,\r\n      templateName:\r\n        sessionType == \"Live Session\"\r\n          ? `sessionassigned_notify_${WAID}`\r\n          : sessionType == \"Assignment\" || sessionType == \"Project\"\r\n          ? `generalsession_assigned_notify_${WAID}`\r\n          : \"\",\r\n      templateText: `Hi *{{1}}*, This is Tutorpoint\\n\\nWe have assigned a ${sessionType} with Session Id ${sessionId} to you. You had shown interest for this session. So Please click on the button below to accept it. \\n\\n*Accepting a Live session means you take responsibility to solve all the problems according to instructions given to you. You will provide clean and suitable answers to questions and submit the required files on time before deadline*\\n\\n*Poor performance in General Sessions will impact your ratings. Maintain high ratings to receive more work from us*`,\r\n      template: {\r\n        namespace: NAME_SPACE,\r\n        language: \"en\",\r\n      },\r\n      param1: sessionType + \" Assigned\",\r\n      param2: tutorName,\r\n      param3: sessionId,\r\n      param4: `d${deviceNo}/tutorForm/${sessionId}/${tutorId}?accept_task=success`,\r\n      button: \"\",\r\n      timestamp: \"\",\r\n      operatorName: \"\",\r\n      isOwner: true,\r\n      status: \"\",\r\n      ticketId: \"\",\r\n      eventType: \"template\",\r\n    };\r\n    try {\r\n      const res = await axios.post(\r\n        `${localStorage.getItem(\"api\")}/api/messages/tutorAssignTemplate`,\r\n        payload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const handleSendMailToAssignTutor = async (email, tutorName, tutorId) => {\r\n    const payload = {\r\n      name: tutorName,\r\n      email: email,\r\n      from: \"\",\r\n      templateName:\r\n        sessionType == \"Live Session\"\r\n          ? `sessionassigned_notify_${WAID}`\r\n          : sessionType == \"Assignment\" || sessionType == 'Project'\r\n          ? `generalsession_assigned_notify_${WAID}`\r\n          : \"\",\r\n      param1: sessionType + \" Assigned\",\r\n      param2: tutorName,\r\n      param3: sessionId,\r\n      param4: `d${deviceNo}/tutorForm/${sessionId}/${tutorId}?accept_task=success`,\r\n    };\r\n    try {\r\n      const res = await axios.post(\r\n        `${localStorage.getItem(\r\n          \"api\"\r\n        )}/api/sessions/tutorAssignMailNotification`,\r\n        payload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // select TDS\r\n  const handleTDS = (e) => {\r\n    setChecked(e.target.checked);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if(tutorPayout?.payload?.transaction?.entity?.source?.status == 'processed') {\r\n  //     //sent template for payment confirmation\r\n  //     const payload = {\r\n  //       name: tutorData.name,\r\n  //       from: '',\r\n  //       wa_id: tutorData.wa_id,\r\n  //       templateName: 'pay_tutor_send_notify',\r\n  //       templateText: \"Hi *{{1}}*. This is Tutorpoint. An amount of *Rs {{2}}* has been sent to your bank account registered with us. Following are the details :   \\n\\n1. Session ID : *{{3}}*\\n2. Tutor ID : *{{4}}*\\n2. Session Subject and Topic : *{{5}}*\\n3. Date and Time : *{{6}}*\\n4. UTR No. : *{{7}}*\\n5. TDS Deducted : *{{8}}*\",\r\n  //       template: {\r\n  //         namespace: NAME_SPACE,\r\n  //         language: 'en',\r\n  //       },\r\n  //       param1: 'Payment Notification Tutorpoint',\r\n  //       param2: tutorData.name,\r\n  //       param3: `${tutorAmt} INR`,\r\n  //       param4: sessionId,\r\n  //       param5: tutorData.tutor_id,\r\n  //       param6: subject,\r\n  //       param7: deadline,\r\n  //       param8: tutorPayout?.payload?.transaction?.entity?.source?.utr,\r\n  //       param9: tutorData.pan ? tutorAmt/9 : tutorAmt/8,\r\n  //       button: '',\r\n  //       timestamp: '',\r\n  //       operatorName: '',\r\n  //       isOwner: true,\r\n  //       status: '',\r\n  //       ticketId: '',\r\n  //       eventType: 'template',\r\n  //     };\r\n  //     const paymentAlert = await axios.post('${localStorage.getItem('api')}/api/messages3/tutorPaymentTemplate', payload, {\r\n  //       headers: ''\r\n  //     });\r\n  //   }\r\n  // }, [tutorPayout])\r\n\r\n  const handleCancelTutor = async (tutorId, sessionId) => {\r\n    try {\r\n      const payload = {\r\n        status: true,\r\n      };\r\n      const res = await axios.put(\r\n        `${localStorage.getItem(\r\n          \"api\"\r\n        )}/api/sessions/cancelNotifiedTutor/${sessionId}/${tutorId}`,\r\n        payload,\r\n        {\r\n          headers: \"\",\r\n        }\r\n      );\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const tutorPayoutStatus = async (wa_id, pout_info) => {\r\n    try {\r\n      for(let i = 0; i < pout_info.length; i++) {\r\n        const payload = {\r\n          sessionId: sessionId,\r\n          waId: wa_id\r\n        };\r\n        const res = await axios.post(\r\n          `${localStorage.getItem('api')}/api/payments/payout-update/${pout_info[i].id}`,\r\n          payload,\r\n          {\r\n            headers: {\r\n              ...payHeaders,\r\n            }\r\n          }\r\n        );\r\n      }\r\n      setUpdated(!updated);\r\n    } catch (err) {\r\n      console.log(err)\r\n    }\r\n  }\r\n\r\n  function filterArr(data, key) {\r\n    return [...new Map(data.map((x) => [key(x), x])).values()];\r\n  }\r\n\r\n  const shortText = (text) => {\r\n    if (text?.length > 12) {\r\n      return `${text?.slice(0, 12)}..`;\r\n    } else if (text?.length <= 12) {\r\n      return text;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TabContext value={value}>\r\n        <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n          <TabList\r\n            onChange={handleChange}\r\n            aria-label=\"lab API tabs example\"\r\n            centered\r\n          >\r\n            <Tab label=\"Interested Tutors\" value=\"1\" />\r\n            <Tab label=\"Notified Tutors\" value=\"2\" />\r\n            <Tab label=\"Assigned Tutors\" value=\"3\" />\r\n          </TabList>\r\n        </Box>\r\n        <TabPanel value=\"1\" style={{ padding: \"15px\" }}>\r\n          <div>\r\n            {tutor_interested?.map((tutor, index) => (\r\n              <>\r\n                <div key={index} style={{ padding: \"10px 0px\" }}>\r\n                  <span style={{ fontWeight: \"800\" }}>\r\n                    {shortText(tutor.name)}\r\n                  </span>\r\n                  <span>&nbsp;{tutor.tutor_id}</span>\r\n                  &nbsp;\r\n                  <span>\r\n                    <HtmlTooltip\r\n                      placement=\"top\"\r\n                      title={\r\n                        <>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Highest Degree: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.highest_degree}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Department: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.dept}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>College/s: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.academic_info && tutorDetails?.academic_info[0]?.college.toString()}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>WhatsApp: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.wa_id}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Subjects known: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.subjects && tutorDetails?.subjects.toString()}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Tags: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.tags && tutorDetails?.tags.toString()}</span></Typography>\r\n                        <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Rating: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.rating && <Chip size=\"small\" icon={ <StarPurple500SharpIcon style={{ color: \"#ffff\", fontSize: \"14px\" }} /> } label={(\"\" + tutorDetails.rating / 2)?.slice(0, 4)} color=\"success\" />}</span></Typography>\r\n                      </>\r\n                      }\r\n                    >\r\n                      <InfoIcon\r\n                        fontSize=\"small\"\r\n                        style={{ fontSize: \"16px\", cursor: \"pointer\" }}\r\n                        onMouseEnter={() => getTutorDetails(tutor.tutor_id)}\r\n                        onMouseLeave={() => setTutorDetails(null)}\r\n                      />\r\n                    </HtmlTooltip>\r\n                  </span>\r\n                  {/* <span>\r\n                    &nbsp; &nbsp;\r\n                    <Chip\r\n                      size='small'\r\n                      // onClick={handleClick}\r\n                      // onDelete={handleDelete}\r\n                      icon={\r\n                        <StarPurple500SharpIcon\r\n                          style={{ color: '#ffff', fontSize: '14px' }}\r\n                        />\r\n                      }\r\n                      label={('' + tutor.rating / 2)?.slice(0, 4)}\r\n                      color='success'\r\n                    />\r\n                  </span> */}\r\n                  &nbsp; &nbsp;\r\n                  <span>\r\n                    <HtmlTooltip\r\n                      placement=\"top\"\r\n                      title={\r\n                        <>\r\n                          <span style={{ marginBottom: \"10px\" }}>\r\n                            Last 5 reviews and rating\r\n                          </span>\r\n                          {tutorDetails?.rating_and_reviews\r\n                            ?.slice(\r\n                              Math.max(tutorDetails?.rating_and_reviews?.length - 5, 0)\r\n                            )\r\n                            ?.map((el, index) => (\r\n                              <Typography\r\n                                color=\"inherit\"\r\n                                style={{\r\n                                  fontSize: \"13.5px\",\r\n                                  fontWeight: \"600\",\r\n                                  marginTop: \"5px\",\r\n                                }}\r\n                              >\r\n                                <span\r\n                                  style={{\r\n                                    fontSize: \"12px\",\r\n                                    fontWeight: \"normal\",\r\n                                  }}\r\n                                >\r\n                                  {el.reviews && `- ${el.reviews}  [${el.rating}☆]`}\r\n                                </span>\r\n                              </Typography>\r\n                            ))}\r\n                        </>\r\n                      }\r\n                    >\r\n                      <span style={{fontSize: '11px', border: '1px solid gray', borderRadius: '20px', padding: '3px'}} onMouseEnter={() => getTutorDetails(tutor.tutor_id)}>Reviews</span>\r\n                    </HtmlTooltip>\r\n                  </span>\r\n                  {/* {!assigned_tutors.find(\r\n                      (el) => el.tutor_id == tutor.tutor_id\r\n                    ) && <span style={{marginLeft: '20px'}}>\r\n                    {sessionType == 'Live Session' &&\r\n                    <NumberFormat\r\n                      style={{width: \"50px\", outline: \"none\", borderRadius: \"3px\", border: \"1px solid gray\"}}\r\n                      format=\"## : ##\"\r\n                      placeholder=\"00 : 00\"\r\n                      onChange={(e) => setTutorDuration(e.target.value)}\r\n                      autoComplete=\"off\"\r\n                    />}\r\n                  </span>} */}\r\n                  <span\r\n                    style={{ float: \"right\", cursor: \"pointer\" }}\r\n                    onClick={() => handleAssignTutor(tutor)}\r\n                  >\r\n                    {assigned_tutors.find(\r\n                      (el) => el.tutor_id == tutor.tutor_id\r\n                    ) ? (\r\n                      <AssignmentTurnedInIcon fontSize=\"medium\" />\r\n                    ) : (\r\n                      <AssignmentTurnedInOutlinedIcon fontSize=\"medium\" />\r\n                    )}\r\n                  </span>\r\n                </div>\r\n                <hr\r\n                  style={{\r\n                    width: \"70%\",\r\n                    marginLeft: \"0px\",\r\n                    marginBottom: \"8px\",\r\n                  }}\r\n                />\r\n              </>\r\n            ))}\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel value=\"2\" style={{ padding: \"15px\" }}>\r\n          <div>\r\n            {notified_tutors?.map((tutor, index) => (\r\n              <>\r\n                <div key={index} style={{ padding: \"10px 0px\" }}>\r\n                  <span style={{ fontWeight: \"800\" }}>\r\n                    {shortText(tutor.name)}\r\n                  </span>\r\n                  <span>&nbsp;{tutor.tutor_id}&nbsp;</span>\r\n                  <span>\r\n                    <HtmlTooltip\r\n                      placement=\"top\"\r\n                      title={\r\n                        <>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Highest Degree: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.highest_degree}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Department: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.dept}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>College/s: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.academic_info && tutorDetails?.academic_info[0]?.college.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>WhatsApp: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.wa_id}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Subjects known: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.subjects && tutorDetails?.subjects.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Tags: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.tags && tutorDetails?.tags.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Notified At: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutor?.timestamp ? moment(new Date(tutor?.timestamp*1000)).format('lll') : '---'}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Rating: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.rating && <Chip size=\"small\" icon={ <StarPurple500SharpIcon style={{ color: \"#ffff\", fontSize: \"14px\" }} /> } label={(\"\" + tutorDetails.rating / 2)?.slice(0, 4)} color=\"success\" />}</span></Typography>\r\n                        </>\r\n                      }\r\n                    >\r\n                      <InfoIcon\r\n                        fontSize=\"small\"\r\n                        style={{ fontSize: \"16px\", cursor: \"pointer\" }}\r\n                        onMouseEnter={() => getTutorDetails(tutor.tutor_id)}\r\n                        onMouseLeave={() => setTutorDetails(null)}\r\n                      />\r\n                    </HtmlTooltip>\r\n                  </span>\r\n                  {tutor.medium == \"wa\" && (\r\n                    <span>\r\n                      <WhatsappOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        color=\"success\"\r\n                        style={{ marginRight: \"5px\", fontSize: \"17px\" }}\r\n                      />\r\n                    </span>\r\n                  )}\r\n                  {tutor.medium == \"mail\" && (\r\n                    <span>\r\n                      <MarkEmailReadOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        color=\"success\"\r\n                        style={{ marginRight: \"5px\", fontSize: \"17px\" }}\r\n                      />\r\n                    </span>\r\n                  )}\r\n                  {tutor.medium == \"wa-mail\" && (\r\n                    <span>\r\n                      <WhatsappOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        color=\"success\"\r\n                        style={{ marginRight: \"5px\", fontSize: \"17px\" }}\r\n                      />{\" \"}\r\n                      <MarkEmailReadOutlinedIcon\r\n                        fontSize=\"small\"\r\n                        color=\"success\"\r\n                        style={{ marginRight: \"5px\", fontSize: \"17px\" }}\r\n                      />\r\n                    </span>\r\n                  )}\r\n                  {/* <span>\r\n                    &nbsp; &nbsp;\r\n                    <Chip\r\n                      size=\"small\"\r\n                      // onClick={handleClick}\r\n                      // onDelete={handleDelete}\r\n                      icon={\r\n                        <StarPurple500SharpIcon\r\n                          style={{ color: \"#ffff\", fontSize: \"14px\" }}\r\n                        />\r\n                      }\r\n                      label={(\"\" + tutor.rating / 2)?.slice(0, 4)}\r\n                      color=\"success\"\r\n                    />\r\n                  </span> */}\r\n                  {/* {!tutor?.cancel_tutor ? (\r\n                    <span\r\n                      style={{ float: 'right', cursor: 'pointer' }}\r\n                      onClick={() =>\r\n                        handleCancelTutor(tutor.tutor_id, sessionId)\r\n                      }\r\n                    >\r\n                      <DoNotDisturbIcon />\r\n                    </span>\r\n                  ) : (\r\n                    <span\r\n                      style={{ float: 'right' }}\r\n                    >\r\n                      <CancelIcon />\r\n                    </span>\r\n                  )} */}\r\n                </div>\r\n                <hr\r\n                  style={{\r\n                    width: \"70%\",\r\n                    marginLeft: \"0px\",\r\n                    marginBottom: \"8px\",\r\n                  }}\r\n                />\r\n              </>\r\n            ))}\r\n          </div>\r\n        </TabPanel>\r\n        <TabPanel value=\"3\" style={{ padding: \"15px\" }}>\r\n          <div>\r\n            {assigned_tutors && assigned_tutors.length > 0 ? (\r\n              assigned_tutors?.map((tutor, index) => (\r\n                <div\r\n                  style={{\r\n                    backgroundImage: `url(${\r\n                      tutor?.tutor_cancelled &&\r\n                      tutor?.tutor_cancelled === \"cancelled\" &&\r\n                      cancelPic1\r\n                    })`,\r\n                    backgroundSize: \"10rem\",\r\n                    backgroundRepeat: \"no-repeat\",\r\n                    backgroundPosition: \"right\",\r\n                  }}\r\n                >\r\n                  <div key={index} style={{ padding: \"10px 0px\" }}>\r\n                    <span style={{ fontWeight: \"800\" }}>\r\n                      {shortText(tutor.name)}\r\n                    </span>\r\n                    <span>&nbsp;{tutor.tutor_id}</span>\r\n                    &nbsp;\r\n                    <span>\r\n                      <HtmlTooltip\r\n                        placement=\"top\"\r\n                        title={\r\n                        <>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Highest Degree: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.highest_degree}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Department: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.dept}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>College/s: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.academic_info && tutorDetails?.academic_info[0]?.college.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>WhatsApp: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.wa_id}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Subjects known: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.subjects && tutorDetails?.subjects.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Tags: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.tags && tutorDetails?.tags.toString()}</span></Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px'}}>Rating: <span style={{fontSize: '12px', fontWeight: 'normal'}}>{tutorDetails?.rating && <Chip size=\"small\" icon={ <StarPurple500SharpIcon style={{ color: \"#ffff\", fontSize: \"14px\" }} /> } label=\r\n                          {\r\n                            tutorDetails?.rating && tutor?.session_rating\r\n                              ? (\r\n                                  \"\" +\r\n                                  (+tutorDetails?.rating + +tutor?.session_rating) / 4\r\n                                )?.slice(0, 4)\r\n                              : tutorDetails?.rating && !tutor?.session_rating\r\n                              ? (\"\" + tutorDetails?.rating / 2)?.slice(0, 4)\r\n                              : !tutorDetails?.rating && tutor?.session_rating\r\n                              ? (\"\" + tutor?.session_rating / 2)?.slice(0, 4)\r\n                              : \"N/A\"\r\n                          } color=\"success\" />}</span>\r\n                          </Typography>\r\n                          <Typography color=\"inherit\" style={{fontSize: '13.5px', fontWeight: '600', marginBottom: '5px', marginTop: '10px', display: 'flex', justifyContent: 'right'}}>\r\n                              {(!tutor?.tutor_cancelled || (tutor?.tutor_cancelled && tutor?.tutor_cancelled!==\"cancelled\")) && <button\r\n                                style={{\r\n                                  backgroundColor: '#ffff',\r\n                                  color: '#FF0000',\r\n                                  border: '0.5px solid #FF0000',\r\n                                  borderRadius: '3px',\r\n                                  height: '23px',\r\n                                  cursor: 'pointer',\r\n                                  fontWeight: '600',\r\n                                }}\r\n                                onClick={() =>\r\n                                  handleCancelAssignedTutor(tutor.name,tutor.wa_id,tutor.tutor_id)\r\n                                }\r\n                              >\r\n                                Cancel Tutor\r\n                              </button>}\r\n                          </Typography>\r\n                        </>\r\n                        }\r\n                      >\r\n                        <InfoIcon\r\n                          fontSize=\"small\"\r\n                          style={{ fontSize: \"16px\", cursor: \"pointer\" }}\r\n                          onMouseEnter={() => getTutorDetails(tutor.tutor_id)}\r\n                          onMouseLeave={() => setTutorDetails(null)}\r\n                        />\r\n                      </HtmlTooltip>\r\n                    </span>\r\n                    {/* <span>\r\n                      &nbsp; &nbsp;\r\n                      <Chip\r\n                        size=\"small\"\r\n                        // onClick={handleClick}\r\n                        // onDelete={handleDelete}\r\n                        icon={\r\n                          <StarPurple500SharpIcon\r\n                            style={{ color: \"#ffff\", fontSize: \"14px\" }}\r\n                          />\r\n                        }\r\n                        label={\r\n                          tutor?.rating && tutor?.session_rating\r\n                            ? (\r\n                                \"\" +\r\n                                (+tutor?.rating + +tutor?.session_rating) / 4\r\n                              )?.slice(0, 4)\r\n                            : tutor?.rating && !tutor?.session_rating\r\n                            ? (\"\" + tutor?.rating / 2)?.slice(0, 4)\r\n                            : !tutor?.rating && tutor?.session_rating\r\n                            ? (\"\" + tutor?.session_rating / 2)?.slice(0, 4)\r\n                            : \"N/A\"\r\n                        }\r\n                        color=\"success\"\r\n                      />\r\n                    </span> */}\r\n                    {tutor?.acceptance_status == \"accepted\" && (\r\n                      <span\r\n                        style={{\r\n                          color: \"green\",\r\n                          fontSize: \"14px\",\r\n                          marginLeft: \"10px\",\r\n                        }}\r\n                      >\r\n                        <Chip size=\"small\" label=\"accepted\" color=\"success\" />\r\n                      </span>\r\n                    )}\r\n                    <span style={{ float: \"right\",width: \"110px\",marginLeft:\"15px\" }}>\r\n                      <span>\r\n                        <div style={{ fontWeight: \"800\",marginBottom:\"5px\"}}>\r\n                          {(tutor.tutor_id===assgnTutorId &&  editTutorAmt) ? (\r\n                            <span style={{ fontWeight: \"800\" }}>\r\n                              <input\r\n                                key={index}\r\n                                type=\"number\"\r\n                                style={{\r\n                                  width: \"30%\",\r\n                                  height: \"20px\",\r\n                                  marginTop: \"5px\",\r\n                                  outline: \"none\",\r\n                                  border: \"none\",\r\n                                  borderBottom: \"1px solid gray\",\r\n                                  borderRadius: \"0px\",\r\n                                }}\r\n                                value={tutorDealtAmount}\r\n                                onChange={(e) =>\r\n                                  setTutorDealtAmount(e.target.value)\r\n                                }\r\n                                autoFocus\r\n                              />{\" \"}\r\n                              &nbsp;\r\n                              {!tutor?.tutor_cancelled ? (\r\n                                <button\r\n                                  style={{\r\n                                    backgroundColor: \"#1876D1\",\r\n                                    color: \"#ffff\",\r\n                                    border: \"none\",\r\n                                    borderRadius: \"2px\",\r\n                                    height: \"25px\",\r\n                                    cursor: \"pointer\",\r\n                                  }}\r\n                                  onClick={()=>tutorAmtHandler(tutor?.tutor_id)}\r\n                                >\r\n                                  Update\r\n                                </button>\r\n                              ) : (\r\n                                <button\r\n                                  style={{\r\n                                    border: \"1px solid #e3e0e0\",\r\n                                    borderRadius: \"2px\",\r\n                                    height: \"25px\",\r\n                                  }}\r\n                                  disabled\r\n                                >\r\n                                  <CircularProgress\r\n                                    fontSize=\"small\"\r\n                                    style={{ width: \"15px\", height: \"15px\" }}\r\n                                  />{\" \"}\r\n                                  Update\r\n                                </button>\r\n                              )}\r\n                            </span>\r\n                          ):\r\n                          (\r\n                            <div style={{ fontWeight: \"800\",marginBottom:\"5px\" }}>\r\n                              <>\r\n                              <span>{tutor?.tutor_dealt_amount ? `${(tutor?.tutor_dealt_amount) / 100} INR` : `--- INR`}</span>\r\n                                &nbsp;\r\n                                <span style={{ cursor: \"pointer\" }}>\r\n                                  <EditIcon\r\n                                    key={index}\r\n                                    fontSize=\"x-small\"\r\n                                    style={{ fontSize: \"15px\" }}\r\n                                    onClick={(e) => editTutorAmtFunc(e,tutor.tutor_id,index)}\r\n                                  />\r\n                                </span>\r\n                              </>\r\n                            </div>\r\n                          ) \r\n                          }\r\n                        </div>\r\n                      </span>\r\n                      {tutor?.session_rating && !tutor?.tutor_cancelled ? (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          size=\"small\"\r\n                          style={{ maxWidth: \"52px\" }}\r\n                          onClick={() => handleOpenTutorPayment(index, tutor)}\r\n                        >\r\n                          Pay\r\n                        </Button>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          size=\"small\"\r\n                          style={{ maxWidth: \"52px\" }}\r\n                          disabled\r\n                        >\r\n                          Pay\r\n                        </Button>\r\n                      )}\r\n                    </span>\r\n                  </div>\r\n                  <div\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      fontWeight: \"500\",\r\n                      marginRight: \"5px\",\r\n                      marginBottom: \"12px\",\r\n                    }}\r\n                  >\r\n                    <span>\r\n                      &nbsp;\r\n                      {!disableRateBtn &&\r\n                      tutor?.tutor_unassigned == \"assigned\" ? (\r\n                        <Chip\r\n                          style={{\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          size=\"small\"\r\n                          label=\"Rating & Reviews\"\r\n                          variant=\"outlined\"\r\n                          onClick={() =>\r\n                            handleTutorRating(\r\n                              tutor.rating_and_reviews,\r\n                              tutor.tutor_id\r\n                            )\r\n                          }\r\n                        />\r\n                      ) : (\r\n                        <Chip\r\n                          style={{ cursor: \"pointer\" }}\r\n                          size=\"small\"\r\n                          label=\"Rating & Reviews\"\r\n                          variant=\"outlined\"\r\n                          disabled\r\n                        />\r\n                      )}\r\n                    </span>\r\n                    &nbsp;\r\n                    <span>\r\n                      <HtmlTooltip\r\n                        placement=\"top\"\r\n                        title={\r\n                          <>\r\n                            <span style={{ marginBottom: \"10px\" }}>\r\n                              Last 5 reviews and rating\r\n                            </span>\r\n                            {tutorDetails?.rating_and_reviews\r\n                              ?.slice(\r\n                                Math.max(tutorDetails?.rating_and_reviews?.length - 5, 0)\r\n                              )\r\n                              ?.map((el, index) => (\r\n                                <Typography\r\n                                  color=\"inherit\"\r\n                                  style={{\r\n                                    fontSize: \"13.5px\",\r\n                                    fontWeight: \"600\",\r\n                                    marginTop: \"5px\",\r\n                                  }}\r\n                                >\r\n                                  <span\r\n                                    style={{\r\n                                      fontSize: \"12px\",\r\n                                      fontWeight: \"normal\",\r\n                                    }}\r\n                                  >\r\n                                    {el.reviews && `- ${el.reviews}  [${el.rating}☆]`}\r\n                                  </span>\r\n                                </Typography>\r\n                              ))}\r\n                          </>\r\n                        }\r\n                      >\r\n                        <InfoIcon\r\n                          fontSize=\"small\"\r\n                          style={{ fontSize: \"16px\" }}\r\n                        />                      \r\n                      </HtmlTooltip>\r\n                    </span>\r\n                    {tutor?.tutor_unassigned == \"assigned\" ? (\r\n                      <span style={{ marginLeft: \"20px\" }}>\r\n                        <Chip\r\n                          style={{ cursor: \"pointer\" }}\r\n                          size=\"small\"\r\n                          label=\"assigned\"\r\n                          onClick={() =>\r\n                            handleUnAssignTutor(tutor.tutor_id, \"unassigned\")\r\n                          }\r\n                        />\r\n                      </span>\r\n                    ) : (\r\n                      <span style={{ marginLeft: \"20px\" }}>\r\n                        <Chip\r\n                          style={{ cursor: \"pointer\" }}\r\n                          size=\"small\"\r\n                          label=\"unassigned\"\r\n                          variant=\"outlined\"\r\n                          onClick={() =>\r\n                            handleUnAssignTutor(tutor.tutor_id, \"assigned\")\r\n                          }\r\n                        />\r\n                      </span>\r\n                    )}\r\n                    {/* {(tutor?.tutor_cancelled && tutor?.tutor_cancelled===\"cancelled\") ? (\r\n                      <span style={{ marginLeft: '20px' }}>\r\n                        <Chip\r\n                          style={{ cursor: 'pointer' }}\r\n                          size='small'\r\n                          label='cancelled'\r\n                          disabled\r\n                        />\r\n                      </span>\r\n                    ) : !tutor?.tutor_cancelled && tutor?.tutor_unassigned == 'assigned' ? (\r\n                      <span style={{ marginLeft: '20px' }}>\r\n                        <Chip\r\n                          style={{ cursor: 'pointer' }}\r\n                          size='small'\r\n                          label='assigned'\r\n                          onClick={() =>\r\n                            handleUnAssignTutor(tutor.tutor_id, 'unassigned')\r\n                          }\r\n                        />\r\n                      </span>\r\n                    ) : (\r\n                      <span style={{ marginLeft: '20px' }}>\r\n                        <Chip\r\n                          style={{ cursor: 'pointer' }}\r\n                          size='small'\r\n                          label='unassigned'\r\n                          variant='outlined'\r\n                          onClick={() =>\r\n                            handleUnAssignTutor(tutor.tutor_id, 'assigned')\r\n                          }\r\n                        />\r\n                      </span>\r\n                    )} */}\r\n                    {/* <span style={{marginLeft:\"47px\"}}>\r\n                      {(!tutor?.tutor_cancelled || (tutor?.tutor_cancelled && tutor?.tutor_cancelled!==\"cancelled\") ) &&  (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          style={{\r\n                            border:\"none\",\r\n                            borderRadius: '5px',\r\n                            height: '25px',\r\n                            borderRadius:\"5px\",\r\n                            backgroundColor:\"#df0303\",\r\n                            color:\"#ffff\",\r\n                            width:\"70px\"\r\n\r\n                          }}\r\n                          onClick={()=>handleCancelAssignedTutor(tutor.name,tutor.wa_id,tutor.tutor_id)}\r\n\r\n                        >\r\n                          cancel\r\n                        </Button>\r\n                      )}\r\n                    </span> */}\r\n                  </div>\r\n                  <p\r\n                    style={{\r\n                      margin: \"0px\",\r\n                      fontSize: \"12.5px\",\r\n                      color: \"chocolate\",\r\n                    }}\r\n                  >\r\n                    All Payments: &nbsp; {tutor?.pout_info && tutor?.pout_info.length > 0 && <div style={{cursor: 'pointer', float: 'right'}} onClick={() => tutorPayoutStatus(tutor.wa_id, tutor.pout_info)}><RefreshIcon fontSize='medium' /></div>}\r\n                    <span>\r\n                      {tutor?.pout_info &&\r\n                        filterArr(\r\n                          tutor?.pout_info.sort((a, b) => {\r\n                            return b.created_at - a.created_at;\r\n                          }),\r\n                          (it) => it.id\r\n                        ).map((i) => (\r\n                          <>\r\n                            <p style={{ margin: \"5px 0px\" }}>\r\n                              {i.amount / 100} {i.currency}\r\n                              {\" (\" + i.status + \")\"}\r\n                              {\" [TDS (\"}\r\n                              {i.notes.TDS}\r\n                              {\" INR)\"}\r\n                              {\" Amount (\"}\r\n                              {+i.amount / 100 + i.notes.TDS}\r\n                              {\" INR)]\"}\r\n                              {' [Payment ID: '}\r\n                              {i.id.replace('pout_', '')}\r\n                              {']'}\r\n                            </p>\r\n                          </>\r\n                        ))}\r\n                    </span>\r\n                  </p>\r\n                  <hr\r\n                    style={{\r\n                      width: \"70%\",\r\n                      marginLeft: \"0px\",\r\n                      marginBottom: \"8px\",\r\n                    }}\r\n                  />\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <div>No Tutors Assigned</div>\r\n            )}\r\n            {showTutorRatingBox && (\r\n              <TutorRatingAndReviews\r\n                rating_and_reviews={assgnTutorRating}\r\n                tutorId={assgnTutorId}\r\n                handleAssignTutorRating={handleAssignTutorRating}\r\n                setShowTutorRatingBox={setShowTutorRatingBox}\r\n                showTutorRatingBox={showTutorRatingBox}\r\n                setStoreTutorRating={setStoreTutorRating}\r\n              />\r\n            )}\r\n          </div>\r\n        </TabPanel>\r\n        <Dialog open={openPayment} onClose={handleCloseTutorPayment}>\r\n          <DialogTitle>Tutor Payment</DialogTitle>\r\n          {paymentLoading && !paymentSuccess ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                padding: \"120px 200px\",\r\n              }}\r\n            >\r\n              <CircularProgress\r\n                style={{ alignSelf: \"center\", marginBottom: \"30px\" }}\r\n              />\r\n              <em>Payment Processing...</em>\r\n            </div>\r\n          ) : paymentLoading && paymentSuccess ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                padding: \"120px 200px\",\r\n              }}\r\n            >\r\n              <em>Payment {tutorPayout?.payload?.payout?.entity?.status}</em>\r\n            </div>\r\n          ) : (\r\n            <DialogContent>\r\n              <label style={{ fontSize: \"13px\" }}>Tutor Name</label>\r\n              <TextField\r\n                // autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                // label=\"Session ID\"\r\n                // placeholder=\"Session ID\"\r\n                type=\"text\"\r\n                value={tutorName}\r\n                fullWidth\r\n                variant=\"standard\"\r\n                style={{ marginBottom: \"30px\" }}\r\n              />\r\n\r\n              <label style={{ fontSize: \"13px\" }}>Amount</label>\r\n              <TextField\r\n                // autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                // label=\"Session ID\"\r\n                // placeholder=\"Session ID\"\r\n                type=\"number\"\r\n                value={tutorAmt}\r\n                onChange={handleChangeTutorAmt}\r\n                style={{ marginBottom: \"5px\" }}\r\n                fullWidth\r\n                variant=\"standard\"\r\n                autoComplete=\"off\"\r\n                required\r\n              />\r\n              <div style={{ marginBottom: \"27px\", fontSize: \"13px\" }}>\r\n                Actual amount:{\" \"}\r\n                {!checked && tutorData?.pan && tutorAmt\r\n                  ? tutorAmt - tutorAmt * 0.1\r\n                  : !checked && !tutorData?.pan && tutorAmt\r\n                  ? tutorAmt - tutorAmt * 0.2\r\n                  : checked\r\n                  ? tutorAmt\r\n                  : \"0\"}{\" \"}\r\n                INR, TDS:{\" \"}\r\n                {!checked && tutorData?.pan && tutorAmt\r\n                  ? tutorAmt * 0.1\r\n                  : !checked && !tutorData?.pan && tutorAmt\r\n                  ? tutorAmt * 0.2\r\n                  : checked\r\n                  ? \"0\"\r\n                  : \"0\"}{\" \"}\r\n                INR{\" \"}\r\n                <span>\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Checkbox\r\n                        checked={checked}\r\n                        onChange={handleTDS}\r\n                        defaultChecked\r\n                        size=\"small\"\r\n                        style={{ padding: \"0px 4px\" }}\r\n                      />\r\n                    }\r\n                    label=\"Without TDS\"\r\n                    style={{ marginLeft: \"20px\" }}\r\n                  />\r\n                </span>\r\n              </div>\r\n              <div></div>\r\n              <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Choose Payment Option</FormLabel>\r\n                <RadioGroup\r\n                  row\r\n                  aria-label=\"gender\"\r\n                  name=\"row-radio-buttons-group\"\r\n                  onChange={handlePayMode}\r\n                >\r\n                  <FormControlLabel\r\n                    value=\"bank\"\r\n                    control={<Radio />}\r\n                    label=\"Bank Transfer\"\r\n                  />\r\n                  <FormControlLabel\r\n                    value=\"upi\"\r\n                    control={<Radio />}\r\n                    label=\"UPI Transfer\"\r\n                  />\r\n                </RadioGroup>\r\n              </FormControl>\r\n              <div style={{ marginTop: \"20px\" }}>\r\n                {payOption === \"bank\" ? (\r\n                  <>\r\n                    <label style={{ fontSize: \"13px\" }}>Account Number</label>\r\n                    <TextField\r\n                      // autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      // label=\"Session ID\"\r\n                      // placeholder=\"Session ID\"\r\n                      type=\"text\"\r\n                      value={accNo}\r\n                      style={{ marginBottom: \"27px\" }}\r\n                      fullWidth\r\n                      variant=\"standard\"\r\n                    />\r\n                    <label style={{ fontSize: \"13px\" }}>IFSC</label>\r\n                    <TextField\r\n                      // autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"name\"\r\n                      // label=\"Session ID\"\r\n                      // placeholder=\"Session ID\"\r\n                      type=\"text\"\r\n                      value={ifsc}\r\n                      style={{ marginBottom: \"27px\" }}\r\n                      fullWidth\r\n                      variant=\"standard\"\r\n                    />\r\n                    <p style={{ fontSize: \"13px\", padding: \"3px 0px 8px 0px\" }}>\r\n                      Mode\r\n                    </p>\r\n                    <NativeSelect\r\n                      defaultValue=\"NEFT\"\r\n                      inputProps={{\r\n                        name: \"amount\",\r\n                        id: \"uncontrolled-native\",\r\n                      }}\r\n                      // style={{ width: '20%', padding: '6px 5px', marginTop: '8px', fontSize: '14px'}}\r\n                      onChange={handleChangePayMode}\r\n                    >\r\n                      <option value=\"IMPS\">IMPS</option>\r\n                      {/* <option value='NEFT'>NEFT</option>\r\n                      <option value='RTGS'>RTGS</option> */}\r\n                    </NativeSelect>\r\n                  </>\r\n                ) : payOption === \"upi\" ? (\r\n                  <>\r\n                    {upiId ? (\r\n                      <>\r\n                        <label style={{ fontSize: \"13px\" }}>UPI ID</label>\r\n                        <TextField\r\n                          // autoFocus\r\n                          margin=\"dense\"\r\n                          id=\"upi\"\r\n                          // label=\"Session ID\"\r\n                          // placeholder=\"Session ID\"\r\n                          type=\"text\"\r\n                          value={upiId}\r\n                          style={{ marginBottom: \"27px\" }}\r\n                          fullWidth\r\n                          variant=\"standard\"\r\n                          autoComplete=\"off\"\r\n                        />\r\n                      </>\r\n                    ) : (\r\n                      <p style={{ textAlign: \"center\", color: \"gray\" }}>\r\n                        UPI ID is not Available\r\n                      </p>\r\n                    )}\r\n                  </>\r\n                ) : null}\r\n              </div>\r\n            </DialogContent>\r\n          )}\r\n          {tutorAmt >= 10000 && (\r\n            <DialogContent>\r\n              <div style={{ fontSize: \"12px\", color: \"red\" }}>\r\n                *Tutor amount should be less than 10,000 INR\r\n              </div>\r\n            </DialogContent>\r\n          )}\r\n          {paymentLoading && !paymentSuccess ? (\r\n            <em\r\n              style={{\r\n                textAlign: \"center\",\r\n                marginBottom: \"45px\",\r\n                color: \"coral\",\r\n              }}\r\n            >\r\n              #Please don't close this window\r\n            </em>\r\n          ) : paymentLoading && paymentSuccess ? (\r\n            <DialogActions>\r\n              <Button onClick={handleClosePayWindow}>Close</Button>\r\n            </DialogActions>\r\n          ) : (\r\n            <DialogActions>\r\n              <Button onClick={handleCloseTutorPayment}>Cancel</Button>\r\n              {tutorAmt > 0 && tutorAmt < 10000 && payOption ? (\r\n                <Button onClick={payTutor}>Pay</Button>\r\n              ) : (\r\n                <Button disabled>Pay</Button>\r\n              )}\r\n            </DialogActions>\r\n          )}\r\n        </Dialog>\r\n      </TabContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotifiedTutors;\r\n","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\notes\\MoreMenu.jsx",[],"C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\StickComments.jsx",["640"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\n\r\nexport default function FormDialog({handleStickComments,setStickComments,stickComments,wa_id,fetchStickComments}) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\nconsole.log({stickComments})\r\n  const handleClickOpen = () => {\r\n    fetchStickComments(wa_id)\r\n    setOpen(true);\r\n  };\r\n\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button  onClick={handleClickOpen}>\r\n      Comments\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose}>\r\n        <DialogTitle>Add Comments</DialogTitle>\r\n        <DialogContent>\r\n          {/* <DialogContentText>\r\n           Write Your comments here..\r\n          </DialogContentText> */}\r\n          <TextField\r\n              placeholder='write your comments here!'\r\n              multiline\r\n              onChange={(e) => setStickComments(e.target.value)}\r\n              value={stickComments}\r\n              rows={2}\r\n              maxRows={6}\r\n              style={{ width: '30rem' }}\r\n            />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={()=>handleStickComments(wa_id,stickComments)}>Add</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\AEPL\\Desktop\\Git Clones\\Dummy_project\\Backend\\dummy1\\src\\components\\dialogs\\TutorRating&Reviews.jsx",["641"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport TextField from '@mui/material/TextField';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Typography from '@mui/material/Typography';\r\nimport Rating from '@mui/material/Rating';\r\nimport Box from '@mui/material/Box';\r\nimport StarIcon from '@mui/icons-material/Star';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n  '& .MuiDialogContent-root': {\r\n    padding: theme.spacing(2),\r\n  },\r\n  '& .MuiDialogActions-root': {\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst BootstrapDialogTitle = (props) => {\r\n  const { children, onClose, ...other } = props;\r\n\r\n  return (\r\n    <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n      {children}\r\n      {onClose ? (\r\n        <IconButton\r\n          aria-label='close'\r\n          onClick={onClose}\r\n          sx={{\r\n            position: 'absolute',\r\n            right: 8,\r\n            top: 8,\r\n            color: (theme) => theme.palette.grey[500],\r\n          }}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </DialogTitle>\r\n  );\r\n};\r\n\r\nBootstrapDialogTitle.propTypes = {\r\n  children: PropTypes.node,\r\n  onClose: PropTypes.func.isRequired,\r\n};\r\n\r\nconst labels = {\r\n  0.5: 'Useless',\r\n  1: 'Useless+',\r\n  1.5: 'Poor',\r\n  2: 'Poor+',\r\n  2.5: 'Ok',\r\n  3: 'Ok+',\r\n  3.5: 'Good',\r\n  4: 'Good+',\r\n  4.5: 'Excellent',\r\n  5: 'Excellent+',\r\n};\r\n\r\nexport default function CustomizedDialogs({\r\n  rating_and_reviews,\r\n  tutorId,\r\n  handleAssignTutorRating,\r\n  setShowTutorRatingBox,\r\n  showTutorRatingBox,\r\n  setSendTutorRating,\r\n  setStoreTutorRating,\r\n}) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [valueRating, setValueRating] = React.useState(\r\n    +rating_and_reviews?.rating / 2\r\n  );\r\n  const [valueSpeed, setValueSpeed] = React.useState(\r\n    +rating_and_reviews?.speed / 2\r\n  );\r\n  const [valueAccuracy, setValueAccuracy] = React.useState(\r\n    +rating_and_reviews?.accuracy / 2\r\n  );\r\n  const [valueLegitimacy, setValueLegitimacy] = React.useState(\r\n    +rating_and_reviews?.legitimacy / 2\r\n  );\r\n  const [valueReview, setValueReview] = React.useState(\r\n    rating_and_reviews?.reviews\r\n  );\r\n  const [hover, setHover] = React.useState({\r\n    hoverRating: '' + +rating_and_reviews?.rating / 2,\r\n    hoverSpeed: '' + +rating_and_reviews?.speed / 2,\r\n    hoverAccuracy: '' + +rating_and_reviews?.accuracy / 2,\r\n    hoverLegitimacy: '' + +rating_and_reviews?.legitimacy / 2,\r\n    hoverReview: rating_and_reviews?.reviews,\r\n  });\r\n  //   setStoreTutorRating()\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setShowTutorRatingBox(false);\r\n  };\r\n  console.log({ rating_and_reviews });\r\n  // console.log({tutorId})\r\n  const handleSave = () => {\r\n    setStoreTutorRating({\r\n      rating: '' + +valueRating * 2,\r\n      speed: '' + +valueSpeed * 2,\r\n      accuracy: '' + +valueAccuracy * 2,\r\n      legitimacy: '' + +valueLegitimacy * 2,\r\n      reviews: valueReview,\r\n    });\r\n    // setSendTutorRating(true)\r\n    // handleAssignTutorRating(tutorId);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (showTutorRatingBox) {\r\n      setOpen(true);\r\n      // console.log({rating_and_reviews})\r\n    } else {\r\n      setOpen(false);\r\n    }\r\n  }, [showTutorRatingBox]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n       add a button\r\n      </Button> */}\r\n      <BootstrapDialog\r\n        onClose={handleClose}\r\n        aria-labelledby='customized-dialog-title'\r\n        open={open}\r\n      >\r\n        <BootstrapDialogTitle\r\n          id='customized-dialog-title'\r\n          onClose={handleClose}\r\n        >\r\n          &nbsp; Rating & Reviews\r\n        </BootstrapDialogTitle>\r\n        <DialogContent\r\n          dividers\r\n          style={{ textAlign: 'left', margin: '0px 25px' }}\r\n        >\r\n          <Typography gutterBottom style={{ marginBottom: '20px' }}>\r\n            <h3 style={{ marginBottom: '10px' }}>Overall rating</h3>\r\n            <Box\r\n              sx={{\r\n                width: 200,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Rating\r\n                name='hover-feedback'\r\n                value={valueRating}\r\n                style={{ fontSize: '35px' }}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                  setValueRating(newValue);\r\n                }}\r\n                onChangeActive={(event, newHover) => {\r\n                  setHover({\r\n                    ...hover,\r\n                    hoverRating: newHover,\r\n                  });\r\n                }}\r\n                emptyIcon={\r\n                  <StarIcon style={{ opacity: 0.55 }} fontSize='inherit' />\r\n                }\r\n              />\r\n              {valueRating !== null && (\r\n                <Box sx={{ ml: 2 }}>\r\n                  {\r\n                    labels[\r\n                      hover.hoverRating !== -1 ? hover.hoverRating : valueRating\r\n                    ]\r\n                  }\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Typography>\r\n          <Typography\r\n            gutterBottom\r\n            style={{\r\n              marginBottom: '30px',\r\n              borderTop: '2px solid rgb(241, 241, 241)',\r\n            }}\r\n          >\r\n            <h3 style={{ marginBottom: '-10px' }}>Rate attributes </h3>\r\n          </Typography>\r\n          <Typography gutterBottom style={{ marginBottom: '30px' }}>\r\n            <h5 style={{ marginBottom: '3px' }}>Speed </h5>\r\n            <Box\r\n              sx={{\r\n                width: 200,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Rating\r\n                name='hover-feedback'\r\n                value={valueSpeed}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                  setValueSpeed(newValue);\r\n                }}\r\n                onChangeActive={(event, newHover) => {\r\n                  setHover({\r\n                    ...hover,\r\n                    hoverSpeed: newHover,\r\n                  });\r\n                }}\r\n                emptyIcon={\r\n                  <StarIcon style={{ opacity: 0.55 }} fontSize='inherit' />\r\n                }\r\n              />\r\n              {valueSpeed !== null && (\r\n                <Box sx={{ ml: 2 }}>\r\n                  {\r\n                    labels[\r\n                      hover.hoverSpeed !== -1 ? hover.hoverSpeed : valueSpeed\r\n                    ]\r\n                  }\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Typography>\r\n          <Typography gutterBottom style={{ marginBottom: '30px' }}>\r\n            <h5 style={{ marginBottom: '3px' }}>Legitimacy</h5>\r\n            <Box\r\n              sx={{\r\n                width: 200,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Rating\r\n                name='hover-feedback'\r\n                value={valueLegitimacy}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                  setValueLegitimacy(newValue);\r\n                }}\r\n                onChangeActive={(event, newHover) => {\r\n                  setHover({\r\n                    ...hover,\r\n                    hoverLegitimacy: newHover,\r\n                  });\r\n                }}\r\n                emptyIcon={\r\n                  <StarIcon style={{ opacity: 0.55 }} fontSize='inherit' />\r\n                }\r\n              />\r\n              {valueLegitimacy !== null && (\r\n                <Box sx={{ ml: 2 }}>\r\n                  {\r\n                    labels[\r\n                      hover.hoverLegitimacy !== -1\r\n                        ? hover.hoverLegitimacy\r\n                        : valueLegitimacy\r\n                    ]\r\n                  }\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Typography>\r\n          <Typography gutterBottom style={{ marginBottom: '20px' }}>\r\n            <h5 style={{ marginBottom: '3px' }}>Accuracy</h5>\r\n            <Box\r\n              sx={{\r\n                width: 200,\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <Rating\r\n                name='hover-feedback'\r\n                value={valueAccuracy}\r\n                precision={0.5}\r\n                onChange={(event, newValue) => {\r\n                  setValueAccuracy(newValue);\r\n                }}\r\n                onChangeActive={(event, newHover) => {\r\n                  setHover({\r\n                    ...hover,\r\n                    hoverAccuracy: newHover,\r\n                  });\r\n                }}\r\n                emptyIcon={\r\n                  <StarIcon style={{ opacity: 0.55 }} fontSize='inherit' />\r\n                }\r\n              />\r\n              {valueAccuracy !== null && (\r\n                <Box sx={{ ml: 2 }}>\r\n                  {\r\n                    labels[\r\n                      hover.hoverAccuracy !== -1\r\n                        ? hover.hoverAccuracy\r\n                        : valueAccuracy\r\n                    ]\r\n                  }\r\n                </Box>\r\n              )}\r\n            </Box>\r\n          </Typography>\r\n          <Typography\r\n            gutterBottom\r\n            style={{ borderTop: '2px solid rgb(241, 241, 241)', marginBottom: '20px' }}\r\n          >\r\n            <h3 style={{ marginBottom: '10px' }}>Review</h3>\r\n            <TextField\r\n              placeholder='write your reviews!'\r\n              multiline\r\n              onChange={(e) => setValueReview(e.target.value)}\r\n              value={valueReview}\r\n              rows={2}\r\n              maxRows={4}\r\n              style={{ width: '30rem' }}\r\n            />\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions style={{padding: '13px 24px'}}>\r\n          <Button variant='contained' onClick={handleSave}>\r\n            Submit\r\n          </Button>\r\n        </DialogActions>\r\n      </BootstrapDialog>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"642","severity":1,"message":"643","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":20},{"ruleId":"642","severity":1,"message":"646","line":20,"column":7,"nodeType":"644","messageId":"645","endLine":20,"endColumn":13},{"ruleId":"642","severity":1,"message":"643","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":20},{"ruleId":"642","severity":1,"message":"647","line":13,"column":3,"nodeType":"644","messageId":"645","endLine":13,"endColumn":17},{"ruleId":"642","severity":1,"message":"648","line":27,"column":8,"nodeType":"644","messageId":"645","endLine":27,"endColumn":20},{"ruleId":"642","severity":1,"message":"649","line":34,"column":10,"nodeType":"644","messageId":"645","endLine":34,"endColumn":23},{"ruleId":"642","severity":1,"message":"650","line":36,"column":8,"nodeType":"644","messageId":"645","endLine":36,"endColumn":16},{"ruleId":"642","severity":1,"message":"651","line":37,"column":8,"nodeType":"644","messageId":"645","endLine":37,"endColumn":22},{"ruleId":"642","severity":1,"message":"652","line":38,"column":8,"nodeType":"644","messageId":"645","endLine":38,"endColumn":12},{"ruleId":"642","severity":1,"message":"653","line":39,"column":8,"nodeType":"644","messageId":"645","endLine":39,"endColumn":16},{"ruleId":"642","severity":1,"message":"654","line":44,"column":8,"nodeType":"644","messageId":"645","endLine":44,"endColumn":16},{"ruleId":"642","severity":1,"message":"655","line":46,"column":8,"nodeType":"644","messageId":"645","endLine":46,"endColumn":20},{"ruleId":"642","severity":1,"message":"656","line":51,"column":8,"nodeType":"644","messageId":"645","endLine":51,"endColumn":23},{"ruleId":"642","severity":1,"message":"657","line":64,"column":8,"nodeType":"644","messageId":"645","endLine":64,"endColumn":21},{"ruleId":"642","severity":1,"message":"658","line":66,"column":8,"nodeType":"644","messageId":"645","endLine":66,"endColumn":20},{"ruleId":"642","severity":1,"message":"659","line":67,"column":8,"nodeType":"644","messageId":"645","endLine":67,"endColumn":17},{"ruleId":"642","severity":1,"message":"660","line":68,"column":8,"nodeType":"644","messageId":"645","endLine":68,"endColumn":17},{"ruleId":"642","severity":1,"message":"661","line":69,"column":8,"nodeType":"644","messageId":"645","endLine":69,"endColumn":16},{"ruleId":"642","severity":1,"message":"662","line":80,"column":10,"nodeType":"644","messageId":"645","endLine":80,"endColumn":21},{"ruleId":"642","severity":1,"message":"663","line":84,"column":10,"nodeType":"644","messageId":"645","endLine":84,"endColumn":17},{"ruleId":"642","severity":1,"message":"664","line":84,"column":19,"nodeType":"644","messageId":"645","endLine":84,"endColumn":29},{"ruleId":"642","severity":1,"message":"665","line":85,"column":10,"nodeType":"644","messageId":"645","endLine":85,"endColumn":19},{"ruleId":"642","severity":1,"message":"666","line":85,"column":21,"nodeType":"644","messageId":"645","endLine":85,"endColumn":33},{"ruleId":"642","severity":1,"message":"667","line":88,"column":10,"nodeType":"644","messageId":"645","endLine":88,"endColumn":21},{"ruleId":"642","severity":1,"message":"668","line":88,"column":23,"nodeType":"644","messageId":"645","endLine":88,"endColumn":37},{"ruleId":"642","severity":1,"message":"669","line":92,"column":10,"nodeType":"644","messageId":"645","endLine":92,"endColumn":16},{"ruleId":"642","severity":1,"message":"670","line":92,"column":18,"nodeType":"644","messageId":"645","endLine":92,"endColumn":27},{"ruleId":"642","severity":1,"message":"671","line":94,"column":10,"nodeType":"644","messageId":"645","endLine":94,"endColumn":16},{"ruleId":"642","severity":1,"message":"672","line":95,"column":10,"nodeType":"644","messageId":"645","endLine":95,"endColumn":21},{"ruleId":"642","severity":1,"message":"673","line":100,"column":10,"nodeType":"644","messageId":"645","endLine":100,"endColumn":18},{"ruleId":"642","severity":1,"message":"674","line":100,"column":20,"nodeType":"644","messageId":"645","endLine":100,"endColumn":31},{"ruleId":"642","severity":1,"message":"675","line":105,"column":10,"nodeType":"644","messageId":"645","endLine":105,"endColumn":25},{"ruleId":"642","severity":1,"message":"676","line":105,"column":27,"nodeType":"644","messageId":"645","endLine":105,"endColumn":45},{"ruleId":"642","severity":1,"message":"677","line":110,"column":10,"nodeType":"644","messageId":"645","endLine":110,"endColumn":25},{"ruleId":"642","severity":1,"message":"678","line":110,"column":27,"nodeType":"644","messageId":"645","endLine":110,"endColumn":45},{"ruleId":"642","severity":1,"message":"679","line":115,"column":17,"nodeType":"644","messageId":"645","endLine":115,"endColumn":25},{"ruleId":"642","severity":1,"message":"680","line":117,"column":17,"nodeType":"644","messageId":"645","endLine":117,"endColumn":25},{"ruleId":"642","severity":1,"message":"681","line":129,"column":10,"nodeType":"644","messageId":"645","endLine":129,"endColumn":24},{"ruleId":"642","severity":1,"message":"682","line":130,"column":10,"nodeType":"644","messageId":"645","endLine":130,"endColumn":20},{"ruleId":"642","severity":1,"message":"683","line":136,"column":10,"nodeType":"644","messageId":"645","endLine":136,"endColumn":19},{"ruleId":"642","severity":1,"message":"684","line":136,"column":21,"nodeType":"644","messageId":"645","endLine":136,"endColumn":33},{"ruleId":"642","severity":1,"message":"685","line":137,"column":10,"nodeType":"644","messageId":"645","endLine":137,"endColumn":25},{"ruleId":"642","severity":1,"message":"686","line":137,"column":27,"nodeType":"644","messageId":"645","endLine":137,"endColumn":45},{"ruleId":"642","severity":1,"message":"687","line":138,"column":10,"nodeType":"644","messageId":"645","endLine":138,"endColumn":28},{"ruleId":"642","severity":1,"message":"688","line":138,"column":30,"nodeType":"644","messageId":"645","endLine":138,"endColumn":51},{"ruleId":"642","severity":1,"message":"689","line":139,"column":10,"nodeType":"644","messageId":"645","endLine":139,"endColumn":21},{"ruleId":"642","severity":1,"message":"690","line":139,"column":23,"nodeType":"644","messageId":"645","endLine":139,"endColumn":37},{"ruleId":"642","severity":1,"message":"691","line":143,"column":10,"nodeType":"644","messageId":"645","endLine":143,"endColumn":20},{"ruleId":"642","severity":1,"message":"692","line":143,"column":22,"nodeType":"644","messageId":"645","endLine":143,"endColumn":35},{"ruleId":"642","severity":1,"message":"693","line":144,"column":10,"nodeType":"644","messageId":"645","endLine":144,"endColumn":19},{"ruleId":"642","severity":1,"message":"694","line":144,"column":21,"nodeType":"644","messageId":"645","endLine":144,"endColumn":33},{"ruleId":"642","severity":1,"message":"695","line":145,"column":10,"nodeType":"644","messageId":"645","endLine":145,"endColumn":26},{"ruleId":"642","severity":1,"message":"696","line":145,"column":28,"nodeType":"644","messageId":"645","endLine":145,"endColumn":47},{"ruleId":"642","severity":1,"message":"697","line":156,"column":9,"nodeType":"644","messageId":"645","endLine":156,"endColumn":24},{"ruleId":"642","severity":1,"message":"698","line":159,"column":10,"nodeType":"644","messageId":"645","endLine":159,"endColumn":20},{"ruleId":"699","severity":1,"message":"700","line":355,"column":54,"nodeType":"701","messageId":"702","endLine":355,"endColumn":56},{"ruleId":"703","severity":1,"message":"704","line":395,"column":6,"nodeType":"705","endLine":395,"endColumn":36,"suggestions":"706"},{"ruleId":"642","severity":1,"message":"707","line":401,"column":9,"nodeType":"644","messageId":"645","endLine":401,"endColumn":17},{"ruleId":"699","severity":1,"message":"700","line":626,"column":25,"nodeType":"701","messageId":"702","endLine":626,"endColumn":27},{"ruleId":"642","severity":1,"message":"708","line":701,"column":9,"nodeType":"644","messageId":"645","endLine":701,"endColumn":25},{"ruleId":"709","severity":1,"message":"710","line":832,"column":21,"nodeType":"711","messageId":"712","endLine":832,"endColumn":23},{"ruleId":"709","severity":1,"message":"710","line":832,"column":35,"nodeType":"711","messageId":"712","endLine":832,"endColumn":37},{"ruleId":"703","severity":1,"message":"713","line":835,"column":6,"nodeType":"705","endLine":835,"endColumn":43,"suggestions":"714"},{"ruleId":"699","severity":1,"message":"700","line":873,"column":15,"nodeType":"701","messageId":"702","endLine":873,"endColumn":17},{"ruleId":"699","severity":1,"message":"700","line":1037,"column":15,"nodeType":"701","messageId":"702","endLine":1037,"endColumn":17},{"ruleId":"642","severity":1,"message":"715","line":1085,"column":13,"nodeType":"644","messageId":"645","endLine":1085,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":1159,"column":25,"nodeType":"701","messageId":"702","endLine":1159,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":1161,"column":28,"nodeType":"701","messageId":"702","endLine":1161,"endColumn":30},{"ruleId":"699","severity":1,"message":"700","line":1163,"column":28,"nodeType":"701","messageId":"702","endLine":1163,"endColumn":30},{"ruleId":"699","severity":1,"message":"700","line":1165,"column":28,"nodeType":"701","messageId":"702","endLine":1165,"endColumn":30},{"ruleId":"699","severity":1,"message":"700","line":1167,"column":28,"nodeType":"701","messageId":"702","endLine":1167,"endColumn":30},{"ruleId":"699","severity":1,"message":"716","line":1172,"column":44,"nodeType":"701","messageId":"702","endLine":1172,"endColumn":46},{"ruleId":"699","severity":1,"message":"700","line":1172,"column":70,"nodeType":"701","messageId":"702","endLine":1172,"endColumn":72},{"ruleId":"699","severity":1,"message":"716","line":1180,"column":48,"nodeType":"701","messageId":"702","endLine":1180,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":1180,"column":74,"nodeType":"701","messageId":"702","endLine":1180,"endColumn":76},{"ruleId":"699","severity":1,"message":"700","line":1482,"column":39,"nodeType":"701","messageId":"702","endLine":1482,"endColumn":41},{"ruleId":"699","severity":1,"message":"700","line":1490,"column":45,"nodeType":"701","messageId":"702","endLine":1490,"endColumn":47},{"ruleId":"717","severity":1,"message":"718","line":1509,"column":29,"nodeType":"719","messageId":"702","endLine":1509,"endColumn":38},{"ruleId":"720","severity":1,"message":"721","line":1865,"column":15,"nodeType":"722","endLine":1874,"endColumn":17},{"ruleId":"642","severity":1,"message":"643","line":1,"column":10,"nodeType":"644","messageId":"645","endLine":1,"endColumn":20},{"ruleId":"642","severity":1,"message":"723","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":26},{"ruleId":"642","severity":1,"message":"724","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":40,"column":14,"nodeType":"701","messageId":"702","endLine":40,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":41,"column":12,"nodeType":"701","messageId":"702","endLine":41,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":78,"column":14,"nodeType":"701","messageId":"702","endLine":78,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":79,"column":12,"nodeType":"701","messageId":"702","endLine":79,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":110,"column":14,"nodeType":"701","messageId":"702","endLine":110,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":111,"column":12,"nodeType":"701","messageId":"702","endLine":111,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":142,"column":14,"nodeType":"701","messageId":"702","endLine":142,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":143,"column":12,"nodeType":"701","messageId":"702","endLine":143,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":174,"column":14,"nodeType":"701","messageId":"702","endLine":174,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":175,"column":12,"nodeType":"701","messageId":"702","endLine":175,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":207,"column":14,"nodeType":"701","messageId":"702","endLine":207,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":208,"column":12,"nodeType":"701","messageId":"702","endLine":208,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":239,"column":14,"nodeType":"701","messageId":"702","endLine":239,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":240,"column":12,"nodeType":"701","messageId":"702","endLine":240,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":280,"column":14,"nodeType":"701","messageId":"702","endLine":280,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":281,"column":12,"nodeType":"701","messageId":"702","endLine":281,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":309,"column":14,"nodeType":"701","messageId":"702","endLine":309,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":310,"column":12,"nodeType":"701","messageId":"702","endLine":310,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":338,"column":14,"nodeType":"701","messageId":"702","endLine":338,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":339,"column":12,"nodeType":"701","messageId":"702","endLine":339,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":367,"column":14,"nodeType":"701","messageId":"702","endLine":367,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":368,"column":12,"nodeType":"701","messageId":"702","endLine":368,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":396,"column":14,"nodeType":"701","messageId":"702","endLine":396,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":397,"column":12,"nodeType":"701","messageId":"702","endLine":397,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":425,"column":14,"nodeType":"701","messageId":"702","endLine":425,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":426,"column":12,"nodeType":"701","messageId":"702","endLine":426,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":454,"column":14,"nodeType":"701","messageId":"702","endLine":454,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":455,"column":12,"nodeType":"701","messageId":"702","endLine":455,"endColumn":14},{"ruleId":"642","severity":1,"message":"648","line":6,"column":8,"nodeType":"644","messageId":"645","endLine":6,"endColumn":20},{"ruleId":"703","severity":1,"message":"725","line":20,"column":6,"nodeType":"705","endLine":20,"endColumn":22,"suggestions":"726"},{"ruleId":"642","severity":1,"message":"727","line":4,"column":10,"nodeType":"644","messageId":"645","endLine":4,"endColumn":16},{"ruleId":"642","severity":1,"message":"728","line":32,"column":10,"nodeType":"644","messageId":"645","endLine":32,"endColumn":15},{"ruleId":"703","severity":1,"message":"729","line":73,"column":6,"nodeType":"705","endLine":73,"endColumn":8,"suggestions":"730"},{"ruleId":"699","severity":1,"message":"700","line":84,"column":38,"nodeType":"701","messageId":"702","endLine":84,"endColumn":40},{"ruleId":"642","severity":1,"message":"715","line":121,"column":17,"nodeType":"644","messageId":"645","endLine":121,"endColumn":20},{"ruleId":"642","severity":1,"message":"715","line":165,"column":17,"nodeType":"644","messageId":"645","endLine":165,"endColumn":20},{"ruleId":"642","severity":1,"message":"715","line":210,"column":15,"nodeType":"644","messageId":"645","endLine":210,"endColumn":18},{"ruleId":"642","severity":1,"message":"715","line":256,"column":15,"nodeType":"644","messageId":"645","endLine":256,"endColumn":18},{"ruleId":"699","severity":1,"message":"700","line":460,"column":60,"nodeType":"701","messageId":"702","endLine":460,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":460,"column":103,"nodeType":"701","messageId":"702","endLine":460,"endColumn":105},{"ruleId":"699","severity":1,"message":"700","line":470,"column":50,"nodeType":"701","messageId":"702","endLine":470,"endColumn":52},{"ruleId":"642","severity":1,"message":"731","line":3,"column":10,"nodeType":"644","messageId":"645","endLine":3,"endColumn":16},{"ruleId":"642","severity":1,"message":"732","line":10,"column":10,"nodeType":"644","messageId":"645","endLine":10,"endColumn":20},{"ruleId":"642","severity":1,"message":"707","line":30,"column":10,"nodeType":"644","messageId":"645","endLine":30,"endColumn":18},{"ruleId":"642","severity":1,"message":"733","line":30,"column":20,"nodeType":"644","messageId":"645","endLine":30,"endColumn":31},{"ruleId":"642","severity":1,"message":"734","line":34,"column":10,"nodeType":"644","messageId":"645","endLine":34,"endColumn":15},{"ruleId":"642","severity":1,"message":"735","line":34,"column":17,"nodeType":"644","messageId":"645","endLine":34,"endColumn":25},{"ruleId":"699","severity":1,"message":"700","line":44,"column":24,"nodeType":"701","messageId":"702","endLine":44,"endColumn":26},{"ruleId":"699","severity":1,"message":"700","line":45,"column":24,"nodeType":"701","messageId":"702","endLine":45,"endColumn":26},{"ruleId":"699","severity":1,"message":"700","line":46,"column":24,"nodeType":"701","messageId":"702","endLine":46,"endColumn":26},{"ruleId":"699","severity":1,"message":"700","line":47,"column":24,"nodeType":"701","messageId":"702","endLine":47,"endColumn":26},{"ruleId":"699","severity":1,"message":"700","line":48,"column":24,"nodeType":"701","messageId":"702","endLine":48,"endColumn":26},{"ruleId":"699","severity":1,"message":"700","line":49,"column":60,"nodeType":"701","messageId":"702","endLine":49,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":50,"column":60,"nodeType":"701","messageId":"702","endLine":50,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":51,"column":60,"nodeType":"701","messageId":"702","endLine":51,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":52,"column":60,"nodeType":"701","messageId":"702","endLine":52,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":53,"column":60,"nodeType":"701","messageId":"702","endLine":53,"endColumn":62},{"ruleId":"703","severity":1,"message":"736","line":117,"column":6,"nodeType":"705","endLine":117,"endColumn":15,"suggestions":"737"},{"ruleId":"699","severity":1,"message":"700","line":165,"column":47,"nodeType":"701","messageId":"702","endLine":165,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":168,"column":47,"nodeType":"701","messageId":"702","endLine":168,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":172,"column":45,"nodeType":"701","messageId":"702","endLine":172,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":175,"column":45,"nodeType":"701","messageId":"702","endLine":175,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":240,"column":62,"nodeType":"701","messageId":"702","endLine":240,"endColumn":64},{"ruleId":"720","severity":1,"message":"721","line":242,"column":15,"nodeType":"722","endLine":246,"endColumn":17},{"ruleId":"709","severity":1,"message":"738","line":248,"column":41,"nodeType":"711","messageId":"712","endLine":248,"endColumn":43},{"ruleId":"709","severity":1,"message":"738","line":248,"column":62,"nodeType":"711","messageId":"712","endLine":248,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":252,"column":64,"nodeType":"701","messageId":"702","endLine":252,"endColumn":66},{"ruleId":"709","severity":1,"message":"738","line":264,"column":41,"nodeType":"711","messageId":"712","endLine":264,"endColumn":43},{"ruleId":"709","severity":1,"message":"738","line":264,"column":62,"nodeType":"711","messageId":"712","endLine":264,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":268,"column":64,"nodeType":"701","messageId":"702","endLine":268,"endColumn":66},{"ruleId":"699","severity":1,"message":"700","line":268,"column":128,"nodeType":"701","messageId":"702","endLine":268,"endColumn":130},{"ruleId":"699","severity":1,"message":"700","line":276,"column":44,"nodeType":"701","messageId":"702","endLine":276,"endColumn":46},{"ruleId":"739","severity":1,"message":"740","line":283,"column":17,"nodeType":"722","messageId":"741","endLine":283,"endColumn":49,"fix":"742"},{"ruleId":"699","severity":1,"message":"700","line":295,"column":64,"nodeType":"701","messageId":"702","endLine":295,"endColumn":66},{"ruleId":"739","severity":1,"message":"740","line":321,"column":25,"nodeType":"722","messageId":"741","endLine":321,"endColumn":59,"fix":"743"},{"ruleId":"699","severity":1,"message":"700","line":350,"column":74,"nodeType":"701","messageId":"702","endLine":350,"endColumn":76},{"ruleId":"699","severity":1,"message":"700","line":350,"column":102,"nodeType":"701","messageId":"702","endLine":350,"endColumn":104},{"ruleId":"699","severity":1,"message":"700","line":352,"column":82,"nodeType":"701","messageId":"702","endLine":352,"endColumn":84},{"ruleId":"699","severity":1,"message":"700","line":352,"column":109,"nodeType":"701","messageId":"702","endLine":352,"endColumn":111},{"ruleId":"699","severity":1,"message":"700","line":354,"column":77,"nodeType":"701","messageId":"702","endLine":354,"endColumn":79},{"ruleId":"699","severity":1,"message":"700","line":354,"column":104,"nodeType":"701","messageId":"702","endLine":354,"endColumn":106},{"ruleId":"642","severity":1,"message":"744","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":19},{"ruleId":"642","severity":1,"message":"727","line":5,"column":3,"nodeType":"644","messageId":"645","endLine":5,"endColumn":9},{"ruleId":"642","severity":1,"message":"745","line":6,"column":3,"nodeType":"644","messageId":"645","endLine":6,"endColumn":14},{"ruleId":"642","severity":1,"message":"746","line":12,"column":8,"nodeType":"644","messageId":"645","endLine":12,"endColumn":25},{"ruleId":"642","severity":1,"message":"747","line":13,"column":10,"nodeType":"644","messageId":"645","endLine":13,"endColumn":12},{"ruleId":"642","severity":1,"message":"748","line":16,"column":8,"nodeType":"644","messageId":"645","endLine":16,"endColumn":14},{"ruleId":"642","severity":1,"message":"749","line":61,"column":15,"nodeType":"644","messageId":"645","endLine":61,"endColumn":21},{"ruleId":"642","severity":1,"message":"750","line":62,"column":10,"nodeType":"644","messageId":"645","endLine":62,"endColumn":19},{"ruleId":"642","severity":1,"message":"751","line":62,"column":21,"nodeType":"644","messageId":"645","endLine":62,"endColumn":33},{"ruleId":"642","severity":1,"message":"752","line":63,"column":24,"nodeType":"644","messageId":"645","endLine":63,"endColumn":39},{"ruleId":"642","severity":1,"message":"753","line":65,"column":10,"nodeType":"644","messageId":"645","endLine":65,"endColumn":18},{"ruleId":"642","severity":1,"message":"754","line":65,"column":20,"nodeType":"644","messageId":"645","endLine":65,"endColumn":31},{"ruleId":"642","severity":1,"message":"755","line":67,"column":9,"nodeType":"644","messageId":"645","endLine":67,"endColumn":15},{"ruleId":"642","severity":1,"message":"756","line":68,"column":9,"nodeType":"644","messageId":"645","endLine":68,"endColumn":18},{"ruleId":"642","severity":1,"message":"757","line":69,"column":9,"nodeType":"644","messageId":"645","endLine":69,"endColumn":11},{"ruleId":"642","severity":1,"message":"758","line":70,"column":9,"nodeType":"644","messageId":"645","endLine":70,"endColumn":18},{"ruleId":"642","severity":1,"message":"759","line":180,"column":15,"nodeType":"644","messageId":"645","endLine":180,"endColumn":23},{"ruleId":"642","severity":1,"message":"715","line":250,"column":11,"nodeType":"644","messageId":"645","endLine":250,"endColumn":14},{"ruleId":"699","severity":1,"message":"700","line":289,"column":28,"nodeType":"701","messageId":"702","endLine":289,"endColumn":30},{"ruleId":"642","severity":1,"message":"760","line":4,"column":8,"nodeType":"644","messageId":"645","endLine":4,"endColumn":17},{"ruleId":"642","severity":1,"message":"761","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":12},{"ruleId":"642","severity":1,"message":"648","line":17,"column":8,"nodeType":"644","messageId":"645","endLine":17,"endColumn":20},{"ruleId":"642","severity":1,"message":"762","line":18,"column":8,"nodeType":"644","messageId":"645","endLine":18,"endColumn":18},{"ruleId":"642","severity":1,"message":"652","line":19,"column":8,"nodeType":"644","messageId":"645","endLine":19,"endColumn":12},{"ruleId":"642","severity":1,"message":"653","line":20,"column":8,"nodeType":"644","messageId":"645","endLine":20,"endColumn":16},{"ruleId":"642","severity":1,"message":"763","line":27,"column":9,"nodeType":"644","messageId":"645","endLine":27,"endColumn":17},{"ruleId":"642","severity":1,"message":"764","line":34,"column":10,"nodeType":"644","messageId":"645","endLine":34,"endColumn":21},{"ruleId":"642","severity":1,"message":"765","line":34,"column":23,"nodeType":"644","messageId":"645","endLine":34,"endColumn":37},{"ruleId":"642","severity":1,"message":"766","line":35,"column":10,"nodeType":"644","messageId":"645","endLine":35,"endColumn":26},{"ruleId":"642","severity":1,"message":"767","line":35,"column":28,"nodeType":"644","messageId":"645","endLine":35,"endColumn":47},{"ruleId":"642","severity":1,"message":"768","line":36,"column":10,"nodeType":"644","messageId":"645","endLine":36,"endColumn":19},{"ruleId":"642","severity":1,"message":"769","line":36,"column":21,"nodeType":"644","messageId":"645","endLine":36,"endColumn":33},{"ruleId":"642","severity":1,"message":"770","line":37,"column":10,"nodeType":"644","messageId":"645","endLine":37,"endColumn":18},{"ruleId":"642","severity":1,"message":"771","line":37,"column":20,"nodeType":"644","messageId":"645","endLine":37,"endColumn":31},{"ruleId":"642","severity":1,"message":"772","line":38,"column":18,"nodeType":"644","messageId":"645","endLine":38,"endColumn":27},{"ruleId":"642","severity":1,"message":"773","line":39,"column":10,"nodeType":"644","messageId":"645","endLine":39,"endColumn":18},{"ruleId":"642","severity":1,"message":"774","line":39,"column":20,"nodeType":"644","messageId":"645","endLine":39,"endColumn":31},{"ruleId":"642","severity":1,"message":"775","line":40,"column":7,"nodeType":"644","messageId":"645","endLine":40,"endColumn":15},{"ruleId":"642","severity":1,"message":"776","line":41,"column":9,"nodeType":"644","messageId":"645","endLine":41,"endColumn":20},{"ruleId":"642","severity":1,"message":"777","line":56,"column":9,"nodeType":"644","messageId":"645","endLine":56,"endColumn":24},{"ruleId":"642","severity":1,"message":"778","line":59,"column":9,"nodeType":"644","messageId":"645","endLine":59,"endColumn":24},{"ruleId":"642","severity":1,"message":"715","line":125,"column":11,"nodeType":"644","messageId":"645","endLine":125,"endColumn":14},{"ruleId":"642","severity":1,"message":"779","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":25},{"ruleId":"642","severity":1,"message":"780","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":18},{"ruleId":"642","severity":1,"message":"781","line":14,"column":8,"nodeType":"644","messageId":"645","endLine":14,"endColumn":19},{"ruleId":"642","severity":1,"message":"782","line":15,"column":8,"nodeType":"644","messageId":"645","endLine":15,"endColumn":20},{"ruleId":"642","severity":1,"message":"768","line":26,"column":10,"nodeType":"644","messageId":"645","endLine":26,"endColumn":19},{"ruleId":"642","severity":1,"message":"770","line":27,"column":10,"nodeType":"644","messageId":"645","endLine":27,"endColumn":18},{"ruleId":"642","severity":1,"message":"783","line":28,"column":10,"nodeType":"644","messageId":"645","endLine":28,"endColumn":16},{"ruleId":"642","severity":1,"message":"784","line":28,"column":18,"nodeType":"644","messageId":"645","endLine":28,"endColumn":27},{"ruleId":"642","severity":1,"message":"785","line":47,"column":9,"nodeType":"644","messageId":"645","endLine":47,"endColumn":24},{"ruleId":"642","severity":1,"message":"786","line":52,"column":9,"nodeType":"644","messageId":"645","endLine":52,"endColumn":29},{"ruleId":"642","severity":1,"message":"787","line":109,"column":13,"nodeType":"644","messageId":"645","endLine":109,"endColumn":17},{"ruleId":"642","severity":1,"message":"788","line":133,"column":13,"nodeType":"644","messageId":"645","endLine":133,"endColumn":25},{"ruleId":"642","severity":1,"message":"789","line":2,"column":38,"nodeType":"644","messageId":"645","endLine":2,"endColumn":44},{"ruleId":"642","severity":1,"message":"727","line":5,"column":3,"nodeType":"644","messageId":"645","endLine":5,"endColumn":9},{"ruleId":"642","severity":1,"message":"745","line":6,"column":3,"nodeType":"644","messageId":"645","endLine":6,"endColumn":14},{"ruleId":"642","severity":1,"message":"790","line":7,"column":3,"nodeType":"644","messageId":"645","endLine":7,"endColumn":13},{"ruleId":"642","severity":1,"message":"791","line":8,"column":3,"nodeType":"644","messageId":"645","endLine":8,"endColumn":14},{"ruleId":"642","severity":1,"message":"746","line":10,"column":8,"nodeType":"644","messageId":"645","endLine":10,"endColumn":25},{"ruleId":"642","severity":1,"message":"747","line":11,"column":10,"nodeType":"644","messageId":"645","endLine":11,"endColumn":12},{"ruleId":"642","severity":1,"message":"792","line":12,"column":8,"nodeType":"644","messageId":"645","endLine":12,"endColumn":14},{"ruleId":"642","severity":1,"message":"793","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":19},{"ruleId":"642","severity":1,"message":"652","line":15,"column":8,"nodeType":"644","messageId":"645","endLine":15,"endColumn":12},{"ruleId":"642","severity":1,"message":"653","line":16,"column":8,"nodeType":"644","messageId":"645","endLine":16,"endColumn":16},{"ruleId":"642","severity":1,"message":"794","line":19,"column":8,"nodeType":"644","messageId":"645","endLine":19,"endColumn":13},{"ruleId":"642","severity":1,"message":"795","line":24,"column":8,"nodeType":"644","messageId":"645","endLine":24,"endColumn":14},{"ruleId":"642","severity":1,"message":"796","line":26,"column":8,"nodeType":"644","messageId":"645","endLine":26,"endColumn":13},{"ruleId":"642","severity":1,"message":"661","line":29,"column":8,"nodeType":"644","messageId":"645","endLine":29,"endColumn":16},{"ruleId":"642","severity":1,"message":"797","line":35,"column":8,"nodeType":"644","messageId":"645","endLine":35,"endColumn":19},{"ruleId":"642","severity":1,"message":"749","line":79,"column":15,"nodeType":"644","messageId":"645","endLine":79,"endColumn":21},{"ruleId":"642","severity":1,"message":"798","line":81,"column":10,"nodeType":"644","messageId":"645","endLine":81,"endColumn":22},{"ruleId":"642","severity":1,"message":"752","line":81,"column":24,"nodeType":"644","messageId":"645","endLine":81,"endColumn":39},{"ruleId":"642","severity":1,"message":"753","line":83,"column":10,"nodeType":"644","messageId":"645","endLine":83,"endColumn":18},{"ruleId":"642","severity":1,"message":"754","line":83,"column":20,"nodeType":"644","messageId":"645","endLine":83,"endColumn":31},{"ruleId":"642","severity":1,"message":"799","line":84,"column":10,"nodeType":"644","messageId":"645","endLine":84,"endColumn":15},{"ruleId":"642","severity":1,"message":"800","line":84,"column":17,"nodeType":"644","messageId":"645","endLine":84,"endColumn":25},{"ruleId":"642","severity":1,"message":"801","line":85,"column":10,"nodeType":"644","messageId":"645","endLine":85,"endColumn":15},{"ruleId":"642","severity":1,"message":"802","line":85,"column":17,"nodeType":"644","messageId":"645","endLine":85,"endColumn":25},{"ruleId":"642","severity":1,"message":"803","line":91,"column":10,"nodeType":"644","messageId":"645","endLine":91,"endColumn":22},{"ruleId":"642","severity":1,"message":"804","line":95,"column":10,"nodeType":"644","messageId":"645","endLine":95,"endColumn":22},{"ruleId":"642","severity":1,"message":"805","line":95,"column":23,"nodeType":"644","messageId":"645","endLine":95,"endColumn":38},{"ruleId":"642","severity":1,"message":"806","line":96,"column":10,"nodeType":"644","messageId":"645","endLine":96,"endColumn":22},{"ruleId":"642","severity":1,"message":"807","line":96,"column":23,"nodeType":"644","messageId":"645","endLine":96,"endColumn":38},{"ruleId":"642","severity":1,"message":"808","line":97,"column":10,"nodeType":"644","messageId":"645","endLine":97,"endColumn":18},{"ruleId":"642","severity":1,"message":"809","line":97,"column":19,"nodeType":"644","messageId":"645","endLine":97,"endColumn":30},{"ruleId":"642","severity":1,"message":"810","line":98,"column":10,"nodeType":"644","messageId":"645","endLine":98,"endColumn":18},{"ruleId":"642","severity":1,"message":"811","line":98,"column":19,"nodeType":"644","messageId":"645","endLine":98,"endColumn":30},{"ruleId":"703","severity":1,"message":"812","line":209,"column":13,"nodeType":"813","endLine":236,"endColumn":4},{"ruleId":"703","severity":1,"message":"814","line":236,"column":6,"nodeType":"705","endLine":236,"endColumn":14,"suggestions":"815"},{"ruleId":"642","severity":1,"message":"715","line":270,"column":13,"nodeType":"644","messageId":"645","endLine":270,"endColumn":16},{"ruleId":"642","severity":1,"message":"816","line":281,"column":9,"nodeType":"644","messageId":"645","endLine":281,"endColumn":20},{"ruleId":"642","severity":1,"message":"715","line":287,"column":15,"nodeType":"644","messageId":"645","endLine":287,"endColumn":18},{"ruleId":"642","severity":1,"message":"817","line":309,"column":9,"nodeType":"644","messageId":"645","endLine":309,"endColumn":13},{"ruleId":"642","severity":1,"message":"818","line":313,"column":9,"nodeType":"644","messageId":"645","endLine":313,"endColumn":20},{"ruleId":"642","severity":1,"message":"819","line":404,"column":9,"nodeType":"644","messageId":"645","endLine":404,"endColumn":18},{"ruleId":"699","severity":1,"message":"700","line":697,"column":45,"nodeType":"701","messageId":"702","endLine":697,"endColumn":47},{"ruleId":"642","severity":1,"message":"643","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":20},{"ruleId":"642","severity":1,"message":"789","line":2,"column":33,"nodeType":"644","messageId":"645","endLine":2,"endColumn":39},{"ruleId":"642","severity":1,"message":"820","line":7,"column":8,"nodeType":"644","messageId":"645","endLine":7,"endColumn":18},{"ruleId":"642","severity":1,"message":"648","line":11,"column":8,"nodeType":"644","messageId":"645","endLine":11,"endColumn":20},{"ruleId":"703","severity":1,"message":"821","line":99,"column":6,"nodeType":"705","endLine":99,"endColumn":52,"suggestions":"822"},{"ruleId":"699","severity":1,"message":"700","line":162,"column":15,"nodeType":"701","messageId":"702","endLine":162,"endColumn":17},{"ruleId":"642","severity":1,"message":"823","line":17,"column":10,"nodeType":"644","messageId":"645","endLine":17,"endColumn":22},{"ruleId":"703","severity":1,"message":"824","line":39,"column":6,"nodeType":"705","endLine":39,"endColumn":8,"suggestions":"825"},{"ruleId":"642","severity":1,"message":"748","line":11,"column":8,"nodeType":"644","messageId":"645","endLine":11,"endColumn":14},{"ruleId":"642","severity":1,"message":"826","line":12,"column":8,"nodeType":"644","messageId":"645","endLine":12,"endColumn":14},{"ruleId":"642","severity":1,"message":"827","line":13,"column":8,"nodeType":"644","messageId":"645","endLine":13,"endColumn":21},{"ruleId":"642","severity":1,"message":"828","line":14,"column":8,"nodeType":"644","messageId":"645","endLine":14,"endColumn":21},{"ruleId":"642","severity":1,"message":"779","line":15,"column":8,"nodeType":"644","messageId":"645","endLine":15,"endColumn":25},{"ruleId":"642","severity":1,"message":"797","line":16,"column":8,"nodeType":"644","messageId":"645","endLine":16,"endColumn":19},{"ruleId":"642","severity":1,"message":"829","line":20,"column":8,"nodeType":"644","messageId":"645","endLine":20,"endColumn":23},{"ruleId":"642","severity":1,"message":"830","line":21,"column":8,"nodeType":"644","messageId":"645","endLine":21,"endColumn":24},{"ruleId":"642","severity":1,"message":"831","line":23,"column":8,"nodeType":"644","messageId":"645","endLine":23,"endColumn":14},{"ruleId":"642","severity":1,"message":"832","line":24,"column":8,"nodeType":"644","messageId":"645","endLine":24,"endColumn":16},{"ruleId":"642","severity":1,"message":"833","line":25,"column":8,"nodeType":"644","messageId":"645","endLine":25,"endColumn":12},{"ruleId":"642","severity":1,"message":"834","line":26,"column":8,"nodeType":"644","messageId":"645","endLine":26,"endColumn":30},{"ruleId":"642","severity":1,"message":"835","line":27,"column":8,"nodeType":"644","messageId":"645","endLine":27,"endColumn":16},{"ruleId":"642","severity":1,"message":"836","line":30,"column":10,"nodeType":"644","messageId":"645","endLine":30,"endColumn":28},{"ruleId":"642","severity":1,"message":"648","line":32,"column":8,"nodeType":"644","messageId":"645","endLine":32,"endColumn":20},{"ruleId":"642","severity":1,"message":"837","line":44,"column":8,"nodeType":"644","messageId":"645","endLine":44,"endColumn":20},{"ruleId":"642","severity":1,"message":"760","line":47,"column":8,"nodeType":"644","messageId":"645","endLine":47,"endColumn":17},{"ruleId":"642","severity":1,"message":"796","line":55,"column":8,"nodeType":"644","messageId":"645","endLine":55,"endColumn":13},{"ruleId":"642","severity":1,"message":"838","line":76,"column":10,"nodeType":"644","messageId":"645","endLine":76,"endColumn":26},{"ruleId":"642","severity":1,"message":"839","line":76,"column":28,"nodeType":"644","messageId":"645","endLine":76,"endColumn":47},{"ruleId":"642","severity":1,"message":"840","line":77,"column":10,"nodeType":"644","messageId":"645","endLine":77,"endColumn":29},{"ruleId":"642","severity":1,"message":"841","line":77,"column":31,"nodeType":"644","messageId":"645","endLine":77,"endColumn":53},{"ruleId":"642","severity":1,"message":"842","line":78,"column":10,"nodeType":"644","messageId":"645","endLine":78,"endColumn":25},{"ruleId":"642","severity":1,"message":"843","line":78,"column":27,"nodeType":"644","messageId":"645","endLine":78,"endColumn":45},{"ruleId":"642","severity":1,"message":"844","line":82,"column":16,"nodeType":"644","messageId":"645","endLine":82,"endColumn":23},{"ruleId":"642","severity":1,"message":"845","line":83,"column":10,"nodeType":"644","messageId":"645","endLine":83,"endColumn":16},{"ruleId":"642","severity":1,"message":"772","line":83,"column":18,"nodeType":"644","messageId":"645","endLine":83,"endColumn":27},{"ruleId":"642","severity":1,"message":"693","line":86,"column":10,"nodeType":"644","messageId":"645","endLine":86,"endColumn":19},{"ruleId":"642","severity":1,"message":"694","line":86,"column":21,"nodeType":"644","messageId":"645","endLine":86,"endColumn":33},{"ruleId":"709","severity":1,"message":"710","line":149,"column":28,"nodeType":"711","messageId":"712","endLine":149,"endColumn":30},{"ruleId":"709","severity":1,"message":"710","line":149,"column":43,"nodeType":"711","messageId":"712","endLine":149,"endColumn":45},{"ruleId":"703","severity":1,"message":"846","line":225,"column":6,"nodeType":"705","endLine":225,"endColumn":65,"suggestions":"847"},{"ruleId":"699","severity":1,"message":"700","line":350,"column":15,"nodeType":"701","messageId":"702","endLine":350,"endColumn":17},{"ruleId":"642","severity":1,"message":"848","line":410,"column":9,"nodeType":"644","messageId":"645","endLine":410,"endColumn":32},{"ruleId":"642","severity":1,"message":"849","line":491,"column":10,"nodeType":"644","messageId":"645","endLine":491,"endColumn":15},{"ruleId":"642","severity":1,"message":"850","line":493,"column":9,"nodeType":"644","messageId":"645","endLine":493,"endColumn":26},{"ruleId":"642","severity":1,"message":"760","line":3,"column":8,"nodeType":"644","messageId":"645","endLine":3,"endColumn":17},{"ruleId":"642","severity":1,"message":"779","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":25},{"ruleId":"642","severity":1,"message":"851","line":16,"column":9,"nodeType":"644","messageId":"645","endLine":16,"endColumn":24},{"ruleId":"642","severity":1,"message":"652","line":6,"column":8,"nodeType":"644","messageId":"645","endLine":6,"endColumn":12},{"ruleId":"642","severity":1,"message":"653","line":7,"column":8,"nodeType":"644","messageId":"645","endLine":7,"endColumn":16},{"ruleId":"642","severity":1,"message":"852","line":8,"column":8,"nodeType":"644","messageId":"645","endLine":8,"endColumn":29},{"ruleId":"642","severity":1,"message":"794","line":10,"column":8,"nodeType":"644","messageId":"645","endLine":10,"endColumn":13},{"ruleId":"642","severity":1,"message":"853","line":11,"column":8,"nodeType":"644","messageId":"645","endLine":11,"endColumn":14},{"ruleId":"642","severity":1,"message":"831","line":12,"column":8,"nodeType":"644","messageId":"645","endLine":12,"endColumn":14},{"ruleId":"642","severity":1,"message":"832","line":14,"column":8,"nodeType":"644","messageId":"645","endLine":14,"endColumn":16},{"ruleId":"642","severity":1,"message":"795","line":15,"column":8,"nodeType":"644","messageId":"645","endLine":15,"endColumn":14},{"ruleId":"642","severity":1,"message":"796","line":17,"column":8,"nodeType":"644","messageId":"645","endLine":17,"endColumn":13},{"ruleId":"642","severity":1,"message":"854","line":18,"column":8,"nodeType":"644","messageId":"645","endLine":18,"endColumn":11},{"ruleId":"642","severity":1,"message":"855","line":19,"column":8,"nodeType":"644","messageId":"645","endLine":19,"endColumn":15},{"ruleId":"642","severity":1,"message":"856","line":20,"column":8,"nodeType":"644","messageId":"645","endLine":20,"endColumn":14},{"ruleId":"642","severity":1,"message":"760","line":21,"column":8,"nodeType":"644","messageId":"645","endLine":21,"endColumn":17},{"ruleId":"642","severity":1,"message":"836","line":28,"column":10,"nodeType":"644","messageId":"645","endLine":28,"endColumn":28},{"ruleId":"642","severity":1,"message":"857","line":48,"column":8,"nodeType":"644","messageId":"645","endLine":48,"endColumn":24},{"ruleId":"642","severity":1,"message":"858","line":102,"column":10,"nodeType":"644","messageId":"645","endLine":102,"endColumn":13},{"ruleId":"642","severity":1,"message":"749","line":102,"column":15,"nodeType":"644","messageId":"645","endLine":102,"endColumn":21},{"ruleId":"642","severity":1,"message":"750","line":103,"column":10,"nodeType":"644","messageId":"645","endLine":103,"endColumn":19},{"ruleId":"642","severity":1,"message":"751","line":103,"column":21,"nodeType":"644","messageId":"645","endLine":103,"endColumn":33},{"ruleId":"642","severity":1,"message":"798","line":104,"column":10,"nodeType":"644","messageId":"645","endLine":104,"endColumn":22},{"ruleId":"642","severity":1,"message":"752","line":104,"column":24,"nodeType":"644","messageId":"645","endLine":104,"endColumn":39},{"ruleId":"642","severity":1,"message":"753","line":106,"column":10,"nodeType":"644","messageId":"645","endLine":106,"endColumn":18},{"ruleId":"642","severity":1,"message":"754","line":106,"column":20,"nodeType":"644","messageId":"645","endLine":106,"endColumn":31},{"ruleId":"642","severity":1,"message":"799","line":107,"column":10,"nodeType":"644","messageId":"645","endLine":107,"endColumn":15},{"ruleId":"642","severity":1,"message":"801","line":108,"column":10,"nodeType":"644","messageId":"645","endLine":108,"endColumn":15},{"ruleId":"642","severity":1,"message":"802","line":108,"column":17,"nodeType":"644","messageId":"645","endLine":108,"endColumn":25},{"ruleId":"642","severity":1,"message":"859","line":110,"column":10,"nodeType":"644","messageId":"645","endLine":110,"endColumn":18},{"ruleId":"642","severity":1,"message":"860","line":110,"column":20,"nodeType":"644","messageId":"645","endLine":110,"endColumn":31},{"ruleId":"642","severity":1,"message":"861","line":111,"column":10,"nodeType":"644","messageId":"645","endLine":111,"endColumn":19},{"ruleId":"642","severity":1,"message":"862","line":111,"column":21,"nodeType":"644","messageId":"645","endLine":111,"endColumn":33},{"ruleId":"642","severity":1,"message":"728","line":121,"column":10,"nodeType":"644","messageId":"645","endLine":121,"endColumn":15},{"ruleId":"642","severity":1,"message":"863","line":129,"column":10,"nodeType":"644","messageId":"645","endLine":129,"endColumn":20},{"ruleId":"642","severity":1,"message":"864","line":136,"column":10,"nodeType":"644","messageId":"645","endLine":136,"endColumn":28},{"ruleId":"642","severity":1,"message":"865","line":136,"column":30,"nodeType":"644","messageId":"645","endLine":136,"endColumn":51},{"ruleId":"642","severity":1,"message":"866","line":137,"column":10,"nodeType":"644","messageId":"645","endLine":137,"endColumn":20},{"ruleId":"642","severity":1,"message":"867","line":138,"column":10,"nodeType":"644","messageId":"645","endLine":138,"endColumn":21},{"ruleId":"642","severity":1,"message":"868","line":138,"column":23,"nodeType":"644","messageId":"645","endLine":138,"endColumn":37},{"ruleId":"642","severity":1,"message":"869","line":144,"column":10,"nodeType":"644","messageId":"645","endLine":144,"endColumn":24},{"ruleId":"642","severity":1,"message":"870","line":144,"column":26,"nodeType":"644","messageId":"645","endLine":144,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":145,"column":34,"nodeType":"701","messageId":"702","endLine":145,"endColumn":36},{"ruleId":"642","severity":1,"message":"871","line":168,"column":9,"nodeType":"644","messageId":"645","endLine":168,"endColumn":22},{"ruleId":"642","severity":1,"message":"872","line":280,"column":9,"nodeType":"644","messageId":"645","endLine":280,"endColumn":21},{"ruleId":"642","severity":1,"message":"873","line":284,"column":9,"nodeType":"644","messageId":"645","endLine":284,"endColumn":20},{"ruleId":"699","severity":1,"message":"716","line":483,"column":42,"nodeType":"701","messageId":"702","endLine":483,"endColumn":44},{"ruleId":"699","severity":1,"message":"700","line":486,"column":36,"nodeType":"701","messageId":"702","endLine":486,"endColumn":38},{"ruleId":"699","severity":1,"message":"700","line":489,"column":36,"nodeType":"701","messageId":"702","endLine":489,"endColumn":38},{"ruleId":"699","severity":1,"message":"700","line":490,"column":17,"nodeType":"701","messageId":"702","endLine":490,"endColumn":19},{"ruleId":"699","severity":1,"message":"700","line":492,"column":47,"nodeType":"701","messageId":"702","endLine":492,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":495,"column":52,"nodeType":"701","messageId":"702","endLine":495,"endColumn":54},{"ruleId":"703","severity":1,"message":"874","line":500,"column":6,"nodeType":"705","endLine":500,"endColumn":8,"suggestions":"875"},{"ruleId":"642","severity":1,"message":"715","line":513,"column":13,"nodeType":"644","messageId":"645","endLine":513,"endColumn":16},{"ruleId":"642","severity":1,"message":"876","line":547,"column":13,"nodeType":"644","messageId":"645","endLine":547,"endColumn":30},{"ruleId":"642","severity":1,"message":"759","line":659,"column":13,"nodeType":"644","messageId":"645","endLine":659,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":727,"column":48,"nodeType":"701","messageId":"702","endLine":727,"endColumn":50},{"ruleId":"877","severity":1,"message":"878","line":728,"column":46,"nodeType":"813","messageId":"879","endLine":728,"endColumn":48},{"ruleId":"642","severity":1,"message":"715","line":778,"column":13,"nodeType":"644","messageId":"645","endLine":778,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":788,"column":31,"nodeType":"701","messageId":"702","endLine":788,"endColumn":33},{"ruleId":"699","severity":1,"message":"700","line":790,"column":35,"nodeType":"701","messageId":"702","endLine":790,"endColumn":37},{"ruleId":"699","severity":1,"message":"700","line":790,"column":72,"nodeType":"701","messageId":"702","endLine":790,"endColumn":74},{"ruleId":"699","severity":1,"message":"700","line":841,"column":39,"nodeType":"701","messageId":"702","endLine":841,"endColumn":41},{"ruleId":"699","severity":1,"message":"700","line":843,"column":43,"nodeType":"701","messageId":"702","endLine":843,"endColumn":45},{"ruleId":"699","severity":1,"message":"700","line":843,"column":81,"nodeType":"701","messageId":"702","endLine":843,"endColumn":83},{"ruleId":"699","severity":1,"message":"700","line":913,"column":37,"nodeType":"701","messageId":"702","endLine":913,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":915,"column":41,"nodeType":"701","messageId":"702","endLine":915,"endColumn":43},{"ruleId":"699","severity":1,"message":"700","line":915,"column":79,"nodeType":"701","messageId":"702","endLine":915,"endColumn":81},{"ruleId":"642","severity":1,"message":"880","line":974,"column":13,"nodeType":"644","messageId":"645","endLine":974,"endColumn":17},{"ruleId":"699","severity":1,"message":"700","line":1002,"column":48,"nodeType":"701","messageId":"702","endLine":1002,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":1009,"column":40,"nodeType":"701","messageId":"702","endLine":1009,"endColumn":42},{"ruleId":"642","severity":1,"message":"715","line":1053,"column":15,"nodeType":"644","messageId":"645","endLine":1053,"endColumn":18},{"ruleId":"642","severity":1,"message":"881","line":1183,"column":13,"nodeType":"644","messageId":"645","endLine":1183,"endColumn":17},{"ruleId":"642","severity":1,"message":"715","line":1209,"column":13,"nodeType":"644","messageId":"645","endLine":1209,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":1272,"column":29,"nodeType":"701","messageId":"702","endLine":1272,"endColumn":31},{"ruleId":"699","severity":1,"message":"700","line":1274,"column":33,"nodeType":"701","messageId":"702","endLine":1274,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":1276,"column":33,"nodeType":"701","messageId":"702","endLine":1276,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":1442,"column":39,"nodeType":"701","messageId":"702","endLine":1442,"endColumn":41},{"ruleId":"699","severity":1,"message":"700","line":1468,"column":66,"nodeType":"701","messageId":"702","endLine":1468,"endColumn":68},{"ruleId":"699","severity":1,"message":"700","line":1516,"column":37,"nodeType":"701","messageId":"702","endLine":1516,"endColumn":39},{"ruleId":"699","severity":1,"message":"700","line":1583,"column":57,"nodeType":"701","messageId":"702","endLine":1583,"endColumn":59},{"ruleId":"699","severity":1,"message":"700","line":1589,"column":62,"nodeType":"701","messageId":"702","endLine":1589,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":1592,"column":48,"nodeType":"701","messageId":"702","endLine":1592,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":1596,"column":59,"nodeType":"701","messageId":"702","endLine":1596,"endColumn":61},{"ruleId":"699","severity":1,"message":"700","line":1605,"column":62,"nodeType":"701","messageId":"702","endLine":1605,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":1623,"column":59,"nodeType":"701","messageId":"702","endLine":1623,"endColumn":61},{"ruleId":"699","severity":1,"message":"700","line":1634,"column":53,"nodeType":"701","messageId":"702","endLine":1634,"endColumn":55},{"ruleId":"699","severity":1,"message":"700","line":1635,"column":51,"nodeType":"701","messageId":"702","endLine":1635,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":1646,"column":53,"nodeType":"701","messageId":"702","endLine":1646,"endColumn":55},{"ruleId":"699","severity":1,"message":"700","line":1647,"column":51,"nodeType":"701","messageId":"702","endLine":1647,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":1658,"column":53,"nodeType":"701","messageId":"702","endLine":1658,"endColumn":55},{"ruleId":"699","severity":1,"message":"700","line":1659,"column":51,"nodeType":"701","messageId":"702","endLine":1659,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":2061,"column":38,"nodeType":"701","messageId":"702","endLine":2061,"endColumn":40},{"ruleId":"699","severity":1,"message":"700","line":2061,"column":154,"nodeType":"701","messageId":"702","endLine":2061,"endColumn":156},{"ruleId":"709","severity":1,"message":"738","line":2061,"column":170,"nodeType":"711","messageId":"712","endLine":2061,"endColumn":172},{"ruleId":"699","severity":1,"message":"700","line":2061,"column":192,"nodeType":"701","messageId":"702","endLine":2061,"endColumn":194},{"ruleId":"709","severity":1,"message":"738","line":2061,"column":245,"nodeType":"711","messageId":"712","endLine":2061,"endColumn":247},{"ruleId":"699","severity":1,"message":"700","line":2101,"column":54,"nodeType":"701","messageId":"702","endLine":2101,"endColumn":56},{"ruleId":"699","severity":1,"message":"700","line":2102,"column":58,"nodeType":"701","messageId":"702","endLine":2102,"endColumn":60},{"ruleId":"699","severity":1,"message":"700","line":2104,"column":43,"nodeType":"701","messageId":"702","endLine":2104,"endColumn":45},{"ruleId":"699","severity":1,"message":"700","line":2133,"column":58,"nodeType":"701","messageId":"702","endLine":2133,"endColumn":60},{"ruleId":"699","severity":1,"message":"700","line":2157,"column":45,"nodeType":"701","messageId":"702","endLine":2157,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":2157,"column":66,"nodeType":"701","messageId":"702","endLine":2157,"endColumn":68},{"ruleId":"699","severity":1,"message":"700","line":2160,"column":47,"nodeType":"701","messageId":"702","endLine":2160,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":2160,"column":68,"nodeType":"701","messageId":"702","endLine":2160,"endColumn":70},{"ruleId":"699","severity":1,"message":"700","line":2165,"column":44,"nodeType":"701","messageId":"702","endLine":2165,"endColumn":46},{"ruleId":"699","severity":1,"message":"700","line":2165,"column":65,"nodeType":"701","messageId":"702","endLine":2165,"endColumn":67},{"ruleId":"699","severity":1,"message":"700","line":2193,"column":56,"nodeType":"701","messageId":"702","endLine":2193,"endColumn":58},{"ruleId":"699","severity":1,"message":"700","line":2195,"column":60,"nodeType":"701","messageId":"702","endLine":2195,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":2197,"column":45,"nodeType":"701","messageId":"702","endLine":2197,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":2226,"column":58,"nodeType":"701","messageId":"702","endLine":2226,"endColumn":60},{"ruleId":"699","severity":1,"message":"700","line":2250,"column":45,"nodeType":"701","messageId":"702","endLine":2250,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":2250,"column":66,"nodeType":"701","messageId":"702","endLine":2250,"endColumn":68},{"ruleId":"699","severity":1,"message":"700","line":2253,"column":47,"nodeType":"701","messageId":"702","endLine":2253,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":2253,"column":68,"nodeType":"701","messageId":"702","endLine":2253,"endColumn":70},{"ruleId":"699","severity":1,"message":"700","line":2258,"column":44,"nodeType":"701","messageId":"702","endLine":2258,"endColumn":46},{"ruleId":"699","severity":1,"message":"700","line":2258,"column":65,"nodeType":"701","messageId":"702","endLine":2258,"endColumn":67},{"ruleId":"699","severity":1,"message":"700","line":2283,"column":44,"nodeType":"701","messageId":"702","endLine":2283,"endColumn":46},{"ruleId":"699","severity":1,"message":"700","line":2314,"column":60,"nodeType":"701","messageId":"702","endLine":2314,"endColumn":62},{"ruleId":"699","severity":1,"message":"700","line":2361,"column":52,"nodeType":"701","messageId":"702","endLine":2361,"endColumn":54},{"ruleId":"699","severity":1,"message":"700","line":2373,"column":46,"nodeType":"701","messageId":"702","endLine":2373,"endColumn":48},{"ruleId":"699","severity":1,"message":"700","line":2376,"column":46,"nodeType":"701","messageId":"702","endLine":2376,"endColumn":48},{"ruleId":"699","severity":1,"message":"700","line":2377,"column":27,"nodeType":"701","messageId":"702","endLine":2377,"endColumn":29},{"ruleId":"699","severity":1,"message":"700","line":2379,"column":57,"nodeType":"701","messageId":"702","endLine":2379,"endColumn":59},{"ruleId":"699","severity":1,"message":"700","line":2382,"column":62,"nodeType":"701","messageId":"702","endLine":2382,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":2432,"column":64,"nodeType":"701","messageId":"702","endLine":2432,"endColumn":66},{"ruleId":"699","severity":1,"message":"700","line":2500,"column":47,"nodeType":"701","messageId":"702","endLine":2500,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":2501,"column":47,"nodeType":"701","messageId":"702","endLine":2501,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":2503,"column":51,"nodeType":"701","messageId":"702","endLine":2503,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":2505,"column":51,"nodeType":"701","messageId":"702","endLine":2505,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":2507,"column":51,"nodeType":"701","messageId":"702","endLine":2507,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":2741,"column":67,"nodeType":"701","messageId":"702","endLine":2741,"endColumn":69},{"ruleId":"699","severity":1,"message":"700","line":2956,"column":63,"nodeType":"701","messageId":"702","endLine":2956,"endColumn":65},{"ruleId":"699","severity":1,"message":"700","line":2961,"column":51,"nodeType":"701","messageId":"702","endLine":2961,"endColumn":53},{"ruleId":"699","severity":1,"message":"700","line":3047,"column":65,"nodeType":"701","messageId":"702","endLine":3047,"endColumn":67},{"ruleId":"699","severity":1,"message":"700","line":3079,"column":54,"nodeType":"701","messageId":"702","endLine":3079,"endColumn":56},{"ruleId":"699","severity":1,"message":"700","line":3094,"column":58,"nodeType":"701","messageId":"702","endLine":3094,"endColumn":60},{"ruleId":"699","severity":1,"message":"700","line":3108,"column":58,"nodeType":"701","messageId":"702","endLine":3108,"endColumn":60},{"ruleId":"699","severity":1,"message":"700","line":3122,"column":43,"nodeType":"701","messageId":"702","endLine":3122,"endColumn":45},{"ruleId":"699","severity":1,"message":"700","line":3122,"column":64,"nodeType":"701","messageId":"702","endLine":3122,"endColumn":66},{"ruleId":"699","severity":1,"message":"700","line":3125,"column":45,"nodeType":"701","messageId":"702","endLine":3125,"endColumn":47},{"ruleId":"699","severity":1,"message":"700","line":3125,"column":66,"nodeType":"701","messageId":"702","endLine":3125,"endColumn":68},{"ruleId":"699","severity":1,"message":"700","line":3131,"column":46,"nodeType":"701","messageId":"702","endLine":3131,"endColumn":48},{"ruleId":"699","severity":1,"message":"700","line":3131,"column":67,"nodeType":"701","messageId":"702","endLine":3131,"endColumn":69},{"ruleId":"699","severity":1,"message":"700","line":3159,"column":62,"nodeType":"701","messageId":"702","endLine":3159,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":3193,"column":62,"nodeType":"701","messageId":"702","endLine":3193,"endColumn":64},{"ruleId":"699","severity":1,"message":"700","line":3532,"column":35,"nodeType":"701","messageId":"702","endLine":3532,"endColumn":37},{"ruleId":"739","severity":1,"message":"740","line":3603,"column":25,"nodeType":"722","messageId":"741","endLine":3607,"endColumn":26,"fix":"882"},{"ruleId":"739","severity":1,"message":"740","line":3623,"column":23,"nodeType":"722","messageId":"741","endLine":3627,"endColumn":24,"fix":"883"},{"ruleId":"642","severity":1,"message":"779","line":20,"column":8,"nodeType":"644","messageId":"645","endLine":20,"endColumn":25},{"ruleId":"642","severity":1,"message":"884","line":30,"column":8,"nodeType":"644","messageId":"645","endLine":30,"endColumn":21},{"ruleId":"642","severity":1,"message":"857","line":31,"column":8,"nodeType":"644","messageId":"645","endLine":31,"endColumn":24},{"ruleId":"642","severity":1,"message":"885","line":32,"column":8,"nodeType":"644","messageId":"645","endLine":32,"endColumn":18},{"ruleId":"642","severity":1,"message":"886","line":34,"column":8,"nodeType":"644","messageId":"645","endLine":34,"endColumn":20},{"ruleId":"642","severity":1,"message":"887","line":91,"column":25,"nodeType":"644","messageId":"645","endLine":91,"endColumn":41},{"ruleId":"877","severity":1,"message":"888","line":106,"column":27,"nodeType":"813","messageId":"889","endLine":106,"endColumn":29},{"ruleId":"642","severity":1,"message":"759","line":123,"column":13,"nodeType":"644","messageId":"645","endLine":123,"endColumn":21},{"ruleId":"877","severity":1,"message":"888","line":150,"column":47,"nodeType":"813","messageId":"889","endLine":150,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":159,"column":51,"nodeType":"701","messageId":"702","endLine":159,"endColumn":53},{"ruleId":"703","severity":1,"message":"812","line":409,"column":13,"nodeType":"813","endLine":510,"endColumn":4},{"ruleId":"699","severity":1,"message":"700","line":411,"column":48,"nodeType":"701","messageId":"702","endLine":411,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":412,"column":52,"nodeType":"701","messageId":"702","endLine":412,"endColumn":54},{"ruleId":"642","severity":1,"message":"890","line":416,"column":13,"nodeType":"644","messageId":"645","endLine":416,"endColumn":25},{"ruleId":"642","severity":1,"message":"891","line":472,"column":13,"nodeType":"644","messageId":"645","endLine":472,"endColumn":25},{"ruleId":"699","severity":1,"message":"700","line":480,"column":48,"nodeType":"701","messageId":"702","endLine":480,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":481,"column":52,"nodeType":"701","messageId":"702","endLine":481,"endColumn":54},{"ruleId":"642","severity":1,"message":"890","line":485,"column":13,"nodeType":"644","messageId":"645","endLine":485,"endColumn":25},{"ruleId":"699","severity":1,"message":"700","line":495,"column":48,"nodeType":"701","messageId":"702","endLine":495,"endColumn":50},{"ruleId":"699","severity":1,"message":"700","line":496,"column":52,"nodeType":"701","messageId":"702","endLine":496,"endColumn":54},{"ruleId":"642","severity":1,"message":"890","line":500,"column":13,"nodeType":"644","messageId":"645","endLine":500,"endColumn":25},{"ruleId":"703","severity":1,"message":"892","line":510,"column":6,"nodeType":"705","endLine":510,"endColumn":19,"suggestions":"893"},{"ruleId":"699","severity":1,"message":"700","line":518,"column":19,"nodeType":"701","messageId":"702","endLine":518,"endColumn":21},{"ruleId":"699","severity":1,"message":"700","line":546,"column":25,"nodeType":"701","messageId":"702","endLine":546,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":612,"column":30,"nodeType":"701","messageId":"702","endLine":612,"endColumn":32},{"ruleId":"699","severity":1,"message":"700","line":685,"column":25,"nodeType":"701","messageId":"702","endLine":685,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":687,"column":29,"nodeType":"701","messageId":"702","endLine":687,"endColumn":31},{"ruleId":"699","severity":1,"message":"700","line":698,"column":25,"nodeType":"701","messageId":"702","endLine":698,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":698,"column":57,"nodeType":"701","messageId":"702","endLine":698,"endColumn":59},{"ruleId":"699","severity":1,"message":"700","line":733,"column":26,"nodeType":"701","messageId":"702","endLine":733,"endColumn":28},{"ruleId":"699","severity":1,"message":"700","line":761,"column":25,"nodeType":"701","messageId":"702","endLine":761,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":827,"column":30,"nodeType":"701","messageId":"702","endLine":827,"endColumn":32},{"ruleId":"699","severity":1,"message":"700","line":896,"column":25,"nodeType":"701","messageId":"702","endLine":896,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":898,"column":29,"nodeType":"701","messageId":"702","endLine":898,"endColumn":31},{"ruleId":"699","severity":1,"message":"700","line":909,"column":25,"nodeType":"701","messageId":"702","endLine":909,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":909,"column":57,"nodeType":"701","messageId":"702","endLine":909,"endColumn":59},{"ruleId":"642","severity":1,"message":"715","line":981,"column":15,"nodeType":"644","messageId":"645","endLine":981,"endColumn":18},{"ruleId":"642","severity":1,"message":"894","line":985,"column":15,"nodeType":"644","messageId":"645","endLine":985,"endColumn":19},{"ruleId":"703","severity":1,"message":"812","line":1003,"column":13,"nodeType":"813","endLine":1005,"endColumn":4},{"ruleId":"703","severity":1,"message":"895","line":1005,"column":6,"nodeType":"705","endLine":1005,"endColumn":24,"suggestions":"896"},{"ruleId":"642","severity":1,"message":"715","line":1012,"column":13,"nodeType":"644","messageId":"645","endLine":1012,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":1045,"column":21,"nodeType":"701","messageId":"702","endLine":1045,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":1047,"column":25,"nodeType":"701","messageId":"702","endLine":1047,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":1047,"column":56,"nodeType":"701","messageId":"702","endLine":1047,"endColumn":58},{"ruleId":"642","severity":1,"message":"715","line":1068,"column":13,"nodeType":"644","messageId":"645","endLine":1068,"endColumn":16},{"ruleId":"699","severity":1,"message":"700","line":1087,"column":21,"nodeType":"701","messageId":"702","endLine":1087,"endColumn":23},{"ruleId":"699","severity":1,"message":"700","line":1089,"column":25,"nodeType":"701","messageId":"702","endLine":1089,"endColumn":27},{"ruleId":"699","severity":1,"message":"700","line":1089,"column":56,"nodeType":"701","messageId":"702","endLine":1089,"endColumn":58},{"ruleId":"642","severity":1,"message":"715","line":1098,"column":13,"nodeType":"644","messageId":"645","endLine":1098,"endColumn":16},{"ruleId":"642","severity":1,"message":"897","line":1154,"column":9,"nodeType":"644","messageId":"645","endLine":1154,"endColumn":26},{"ruleId":"642","severity":1,"message":"715","line":1159,"column":13,"nodeType":"644","messageId":"645","endLine":1159,"endColumn":16},{"ruleId":"642","severity":1,"message":"715","line":1181,"column":15,"nodeType":"644","messageId":"645","endLine":1181,"endColumn":18},{"ruleId":"699","severity":1,"message":"700","line":1326,"column":43,"nodeType":"701","messageId":"702","endLine":1326,"endColumn":45},{"ruleId":"699","severity":1,"message":"700","line":1378,"column":33,"nodeType":"701","messageId":"702","endLine":1378,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":1387,"column":33,"nodeType":"701","messageId":"702","endLine":1387,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":1396,"column":33,"nodeType":"701","messageId":"702","endLine":1396,"endColumn":35},{"ruleId":"699","severity":1,"message":"700","line":1555,"column":47,"nodeType":"701","messageId":"702","endLine":1555,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":1673,"column":47,"nodeType":"701","messageId":"702","endLine":1673,"endColumn":49},{"ruleId":"699","severity":1,"message":"700","line":1739,"column":46,"nodeType":"701","messageId":"702","endLine":1739,"endColumn":48},{"ruleId":"642","severity":1,"message":"779","line":7,"column":8,"nodeType":"644","messageId":"645","endLine":7,"endColumn":25},{"ruleId":"642","severity":1,"message":"851","line":102,"column":9,"nodeType":"644","messageId":"645","endLine":102,"endColumn":24},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'agent_' is assigned a value but never used.","'templateMsgUrl' is defined but never used.","'MoreVertIcon' is defined but never used.","'storeFilesUrl' is defined but never used.","'MoreMenu' is defined but never used.","'InfiniteScroll' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'DropFile' is defined but never used.","'TutorContact' is defined but never used.","'DynamicFormIcon' is defined but never used.","'SpeedDialIcon' is defined but never used.","'FileCopyIcon' is defined but never used.","'PrintIcon' is defined but never used.","'ShareIcon' is defined but never used.","'EditIcon' is defined but never used.","'msgResponse' is assigned a value but never used.","'textMsg' is assigned a value but never used.","'setTextMsg' is assigned a value but never used.","'messageId' is assigned a value but never used.","'setMessageId' is assigned a value but never used.","'onlineUsers' is assigned a value but never used.","'setOnlineUsers' is assigned a value but never used.","'userId' is assigned a value but never used.","'setUserId' is assigned a value but never used.","'search' is assigned a value but never used.","'highlighted' is assigned a value but never used.","'showFile' is assigned a value but never used.","'setShowFile' is assigned a value but never used.","'templateMessage' is assigned a value but never used.","'setTemplateMessage' is assigned a value but never used.","'newNotification' is assigned a value but never used.","'setNewNotification' is assigned a value but never used.","'setMsgId' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'scrollPosition' is assigned a value but never used.","'forwardMsg' is assigned a value but never used.","'tutorList' is assigned a value but never used.","'setTutorList' is assigned a value but never used.","'tutorTagUpdated' is assigned a value but never used.","'setTutorTagUpdated' is assigned a value but never used.","'tutorRatingUpdated' is assigned a value but never used.","'setTutorRatingUpdated' is assigned a value but never used.","'searchTutor' is assigned a value but never used.","'setSearchTutor' is assigned a value but never used.","'tutorCount' is assigned a value but never used.","'setTutorCount' is assigned a value but never used.","'tutorPage' is assigned a value but never used.","'setTutorPage' is assigned a value but never used.","'tutorListLoading' is assigned a value but never used.","'setTutorListLoading' is assigned a value but never used.","'uniqueValuesSet' is assigned a value but never used.","'loadingMsg' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'limit'. Either include it or remove the dependency array.","ArrayExpression",["898"],"'fileData' is assigned a value but never used.","'closeTemplateTab' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'scrollView' and 'scrollView_'. Either include them or remove the dependency array.",["899"],"'res' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'CircularProgress' is defined but never used.","'gridColumnsTotalWidthSelector' is defined but never used.","React Hook useEffect has a missing dependency: 'uniqueValuesSet'. Either include it or remove the dependency array.",["900"],"'msgUrl' is defined but never used.","'color' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getCustomersUrl'. Either include it or remove the dependency array.",["901"],"'format' is defined but never used.","'getFileUrl' is defined but never used.","'setFileData' is assigned a value but never used.","'check' is assigned a value but never used.","'setCheck' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'apiUrl'. Either include it or remove the dependency array.",["902"],"Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","noTargetBlankWithoutNoreferrer",{"range":"903","text":"904"},{"range":"905","text":"904"},"'useEffect' is defined but never used.","'alertMsgUrl' is defined but never used.","'NotificationsIcon' is defined but never used.","'io' is defined but never used.","'Button' is defined but never used.","'setMsg' is assigned a value but never used.","'alertText' is assigned a value but never used.","'setAlertText' is assigned a value but never used.","'setAlertMessage' is assigned a value but never used.","'msgCount' is assigned a value but never used.","'setMsgCount' is assigned a value but never used.","'socket' is assigned a value but never used.","'alertIcon' is assigned a value but never used.","'PF' is assigned a value but never used.","'headerKey' is assigned a value but never used.","'response' is assigned a value but never used.","'TextField' is defined but never used.","'Link' is defined but never used.","'IconButton' is defined but never used.","'openMore' is assigned a value but never used.","'btnDisabled' is assigned a value but never used.","'setBtnDisabled' is assigned a value but never used.","'closeBtnDisabled' is assigned a value but never used.","'setCloseBtnDisabled' is assigned a value but never used.","'clientAmt' is assigned a value but never used.","'setClientAmt' is assigned a value but never used.","'currency' is assigned a value but never used.","'setCurrency' is assigned a value but never used.","'setScroll' is assigned a value but never used.","'errorMsg' is assigned a value but never used.","'setErrorMsg' is assigned a value but never used.","'deviceNo' is assigned a value but never used.","'ITEM_HEIGHT' is assigned a value but never used.","'handleClickMore' is assigned a value but never used.","'handleCloseMore' is assigned a value but never used.","'DialogContentText' is defined but never used.","'InputLabel' is defined but never used.","'FormControl' is defined but never used.","'NativeSelect' is defined but never used.","'values' is assigned a value but never used.","'setValues' is assigned a value but never used.","'handleChangeAmt' is assigned a value but never used.","'handleChangeCurrency' is assigned a value but never used.","'res2' is assigned a value but never used.","'sendTemplate' is assigned a value but never used.","'useRef' is defined but never used.","'pinChatUrl' is defined but never used.","'markChatUrl' is defined but never used.","'moment' is defined but never used.","'PushPinIcon' is defined but never used.","'Badge' is defined but never used.","'Switch' is defined but never used.","'Stack' is defined but never used.","'DialogTitle' is defined but never used.","'alertMessage' is assigned a value but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.","'hover' is assigned a value but never used.","'setHover' is assigned a value but never used.","'writerStatus' is assigned a value but never used.","'editEmailVal' is assigned a value but never used.","'setEditEmailVal' is assigned a value but never used.","'editPhoneVal' is assigned a value but never used.","'setEditPhoneVal' is assigned a value but never used.","'emailVal' is assigned a value but never used.","'setEmailVal' is assigned a value but never used.","'phoneVal' is assigned a value but never used.","'setPhoneVal' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'conversation?.tutor_id', 'conversation?.tutor_status', 'conversation?.wa_id', and 'handleChangeStatus'. Either include them or remove the dependency array.",["906"],"'rateHandler' is assigned a value but never used.","'open' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'shortText' is assigned a value but never used.","'LogoutIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'searchTutor' and 'val'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTutorPage' needs the current value of 'val'.",["907"],"'paymentCount' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'payHeaders'. Either include it or remove the dependency array.",["908"],"'Dialog' is defined but never used.","'DialogActions' is defined but never used.","'DialogContent' is defined but never used.","'CheckCircleIcon' is defined but never used.","'ClearRoundedIcon' is defined but never used.","'Rating' is defined but never used.","'StarIcon' is defined but never used.","'Chip' is defined but never used.","'StarPurple500SharpIcon' is defined but never used.","'Checkbox' is defined but never used.","'sendtemplateMsgUrl' is defined but never used.","'ListItemIcon' is defined but never used.","'sessionListToday' is assigned a value but never used.","'setSessionListToday' is assigned a value but never used.","'sessionListUpcoming' is assigned a value but never used.","'setSessionListUpcoming' is assigned a value but never used.","'sessionListPast' is assigned a value but never used.","'setSessionListPast' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'scroll' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'applyFilter', 'dateRange', 'filterActive', 'filterValue', 'filterValue2', 'filterValue_', 'searchSession', and 'value'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setSessionPage' needs the current value of 'value'.",["909"],"'handleFilterByDateRange' is assigned a value but never used.","'range' is assigned a value but never used.","'handleRangeChange' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'KeyboardArrowDownIcon' is defined but never used.","'Avatar' is defined but never used.","'Fab' is defined but never used.","'AddIcon' is defined but never used.","'base64' is defined but never used.","'DoNotDisturbIcon' is defined but never used.","'msg' is assigned a value but never used.","'tagValue' is assigned a value but never used.","'setTagValue' is assigned a value but never used.","'ratingVal' is assigned a value but never used.","'setRatingVal' is assigned a value but never used.","'taskStatus' is assigned a value but never used.","'virtualAccPayments' is assigned a value but never used.","'setVirtualAccPayments' is assigned a value but never used.","'clientInfo' is assigned a value but never used.","'checkPaypal' is assigned a value but never used.","'setCheckPaypal' is assigned a value but never used.","'sessionPayment' is assigned a value but never used.","'setSessionPayment' is assigned a value but never used.","'paypalHeaders' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'handleClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'conversation?.assigned_tutors', 'conversation?.client_id', 'conversation?.session_id', and 'conversation?.tutor_payment_status'. Either include them or remove the dependency array.",["910"],"'sendNewPaymentMsg' is assigned a value but never used.","array-callback-return","Array.prototype.findIndex() expects a value to be returned at the end of arrow function.","expectedAtEnd","'res3' is assigned a value but never used.","'resp' is assigned a value but never used.",{"range":"911","text":"904"},{"range":"912","text":"904"},"'RecommendIcon' is defined but never used.","'CancelIcon' is defined but never used.","'NumberFormat' is defined but never used.","'setTutorDuration' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'statusUpdate' is assigned a value but never used.","'paymentAlert' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checked', 'deadline', 'rpayPout', 'sessionId', 'subject', 'tutorAmt', 'tutorData.name', 'tutorData?.pan', 'tutorData?.rating', 'tutorData?.session_rating', 'tutorData?.tutor_id', and 'tutorData.wa_id'. Either include them or remove the dependency array.",["913"],"'res_' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'assgnTutorId' and 'handleAssignTutorRating'. Either include them or remove the dependency array.",["914"],"'handleCancelTutor' is assigned a value but never used.",{"desc":"915","fix":"916"},{"desc":"917","fix":"918"},{"desc":"919","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},[11350,11350]," rel=\"noreferrer\"",[13145,13145],{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"931","fix":"932"},{"desc":"933","fix":"934"},[149192,149192],[150016,150016],{"desc":"935","fix":"936"},{"desc":"937","fix":"938"},"Update the dependencies array to be: [currentChat, forwarded, limit, sent]",{"range":"939","text":"940"},"Update the dependencies array to be: [finalMessage, fileSent, currentChat, scrollView_, scrollView]",{"range":"941","text":"942"},"Update the dependencies array to be: [arrivalMessage, uniqueValuesSet]",{"range":"943","text":"944"},"Update the dependencies array to be: [getCustomersUrl]",{"range":"945","text":"946"},"Update the dependencies array to be: [apiUrl, message]",{"range":"947","text":"948"},"Update the dependencies array to be: [conversation?.tutor_id, conversation?.tutor_status, conversation?.wa_id, handleChangeStatus, reason]",{"range":"949","text":"950"},"Update the dependencies array to be: [tutorTagUpdated, tutorRatingUpdated, updated, searchTutor, val]",{"range":"951","text":"952"},"Update the dependencies array to be: [payHeaders]",{"range":"953","text":"954"},"Update the dependencies array to be: [sessionTime, assignedTutor, updated, reload, openSnackBar, searchSession, filterActive, filterValue, filterValue_, filterValue2, dateRange, applyFilter, value]",{"range":"955","text":"956"},"Update the dependencies array to be: [conversation?.assigned_tutors, conversation?.client_id, conversation?.session_id, conversation?.tutor_payment_status]",{"range":"957","text":"958"},"Update the dependencies array to be: [checked, deadline, rpayPout, sessionId, subject, tutorAmt, tutorData.name, tutorData?.pan, tutorData?.rating, tutorData?.session_rating, tutorData?.tutor_id, tutorData.wa_id, tutorPayout]",{"range":"959","text":"960"},"Update the dependencies array to be: [assgnTutorId, handleAssignTutorRating, storeTutorRating]",{"range":"961","text":"962"},[14411,14441],"[currentChat, forwarded, limit, sent]",[26635,26672],"[finalMessage, fileSent, currentChat, scrollView_, scrollView]",[748,764],"[arrivalMessage, uniqueValuesSet]",[2271,2273],"[getCustomersUrl]",[3762,3771],"[apiUrl, message]",[8147,8155],"[conversation?.tutor_id, conversation?.tutor_status, conversation?.wa_id, handleChangeStatus, reason]",[3165,3211],"[tutorTagUpdated, tutorRatingUpdated, updated, searchTutor, val]",[1174,1176],"[payHeaders]",[7579,7638],"[sessionTime, assignedTutor, updated, reload, openSnackBar, searchSession, filterActive, filterValue, filterValue_, filterValue2, dateRange, applyFilter, value]",[17190,17192],"[conversation?.assigned_tutors, conversation?.client_id, conversation?.session_id, conversation?.tutor_payment_status]",[17373,17386],"[checked, deadline, rpayPout, sessionId, subject, tutorAmt, tutorData.name, tutorData?.pan, tutorData?.rating, tutorData?.session_rating, tutorData?.tutor_id, tutorData.wa_id, tutorPayout]",[34249,34267],"[assgnTutorId, handleAssignTutorRating, storeTutorRating]"]