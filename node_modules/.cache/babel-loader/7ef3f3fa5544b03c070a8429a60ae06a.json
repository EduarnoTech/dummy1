{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport var rowsMetaStateInitializer = function rowsMetaStateInitializer(state) {\n  return _extends({}, state, {\n    rowsMeta: {\n      currentPageTotalHeight: 0,\n      positions: []\n    }\n  });\n};\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport var useGridRowsMeta = function useGridRowsMeta(apiRef, props) {\n  var getRowHeightProp = props.getRowHeight,\n      getRowSpacing = props.getRowSpacing,\n      getEstimatedRowHeight = props.getEstimatedRowHeight;\n  var rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  var lastMeasuredRowIndex = React.useRef(-1);\n  var hasRowWithAutoHeight = React.useRef(false);\n  var rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  var filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  var paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  var sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var hydrateRowsMeta = React.useCallback(function () {\n    hasRowWithAutoHeight.current = false;\n    apiRef.current.setState(function (state) {\n      var densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      var positions = [];\n      var currentPageTotalHeight = currentPage.rows.reduce(function (acc, row) {\n        positions.push(acc);\n\n        if (!rowsHeightLookup.current[row.id]) {\n          rowsHeightLookup.current[row.id] = {\n            sizes: {\n              base: rowHeightFromDensity\n            },\n            isResized: false,\n            autoHeight: false,\n            needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n          };\n        }\n\n        var _rowsHeightLookup$cur3 = rowsHeightLookup.current[row.id],\n            isResized = _rowsHeightLookup$cur3.isResized,\n            needsFirstMeasurement = _rowsHeightLookup$cur3.needsFirstMeasurement,\n            sizes = _rowsHeightLookup$cur3.sizes;\n        var baseRowHeight = rowHeightFromDensity;\n        var existingBaseRowHeight = sizes.base;\n\n        if (isResized) {\n          // Do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = existingBaseRowHeight;\n        } else if (getRowHeightProp) {\n          var rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n            densityFactor: densityFactor\n          }));\n\n          if (rowHeightFromUser === 'auto') {\n            if (needsFirstMeasurement) {\n              var estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n                densityFactor: densityFactor\n              })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n              baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n            } else {\n              baseRowHeight = existingBaseRowHeight;\n            }\n\n            hasRowWithAutoHeight.current = true;\n            rowsHeightLookup.current[row.id].autoHeight = true;\n          } else {\n            // Default back to base rowHeight if getRowHeight returns null or undefined.\n            baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n            rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n            rowsHeightLookup.current[row.id].autoHeight = false;\n          }\n        } else {\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        var initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          var indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          var spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: indexRelativeToCurrentPage === 0,\n            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n            indexRelativeToCurrentPage: indexRelativeToCurrentPage\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        var processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n        rowsHeightLookup.current[row.id].sizes = processedSizes;\n        var finalRowHeight = Object.values(processedSizes).reduce(function (acc2, value) {\n          return acc2 + value;\n        }, 0);\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight: currentPageTotalHeight,\n          positions: positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight]);\n  var getRowHeight = React.useCallback(function (rowId) {\n    var height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.base : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  var getRowInternalSizes = function getRowInternalSizes(rowId) {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  var setRowHeight = React.useCallback(function (id, height) {\n    rowsHeightLookup.current[id].sizes.base = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  var storeMeasuredRowHeight = React.useCallback(function (id, height) {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    var needsHydration = rowsHeightLookup.current[id].sizes.base !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.base = height;\n\n    if (needsHydration) {\n      hydrateRowsMeta();\n    }\n  }, [hydrateRowsMeta]);\n  var rowHasAutoHeight = React.useCallback(function (id) {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  var getLastMeasuredRowIndex = React.useCallback(function () {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  var setLastMeasuredRowIndex = React.useCallback(function (index) {\n    if (hasRowWithAutoHeight.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(function () {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  var rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};","map":{"version":3,"names":["_extends","React","useGridVisibleRows","useGridApiMethod","useGridSelector","gridDensityRowHeightSelector","gridDensityFactorSelector","gridFilterStateSelector","gridPaginationSelector","gridSortingStateSelector","useGridRegisterPipeApplier","rowsMetaStateInitializer","state","rowsMeta","currentPageTotalHeight","positions","useGridRowsMeta","apiRef","props","getRowHeightProp","getRowHeight","getRowSpacing","getEstimatedRowHeight","rowsHeightLookup","useRef","lastMeasuredRowIndex","hasRowWithAutoHeight","rowHeightFromDensity","filterState","paginationState","sortingState","currentPage","hydrateRowsMeta","useCallback","current","setState","densityFactor","instanceId","rows","reduce","acc","row","push","id","sizes","base","isResized","autoHeight","needsFirstMeasurement","baseRowHeight","existingBaseRowHeight","rowHeightFromUser","estimatedRowHeight","initialHeights","_spacing$top","_spacing$bottom","indexRelativeToCurrentPage","getRowIndexRelativeToVisibleRows","spacing","isFirstVisible","isLastVisible","length","spacingTop","top","spacingBottom","bottom","processedSizes","unstable_applyPipeProcessors","finalRowHeight","Object","values","acc2","value","Infinity","forceUpdate","rowId","height","getRowInternalSizes","_rowsHeightLookup$cur","setRowHeight","storeMeasuredRowHeight","needsHydration","rowHasAutoHeight","_rowsHeightLookup$cur2","getLastMeasuredRowIndex","setLastMeasuredRowIndex","index","useEffect","rowsMetaApi","unstable_getLastMeasuredRowIndex","unstable_setLastMeasuredRowIndex","unstable_rowHasAutoHeight","unstable_getRowHeight","unstable_getRowInternalSizes","unstable_setRowHeight","unstable_storeRowHeightMeasurement"],"sources":["C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRowsMeta.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridDensityRowHeightSelector, gridDensityFactorSelector } from '../density/densitySelector';\nimport { gridFilterStateSelector } from '../filter/gridFilterSelector';\nimport { gridPaginationSelector } from '../pagination/gridPaginationSelector';\nimport { gridSortingStateSelector } from '../sorting/gridSortingSelector';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsMetaStateInitializer = state => _extends({}, state, {\n  rowsMeta: {\n    currentPageTotalHeight: 0,\n    positions: []\n  }\n});\n/**\n * @requires useGridPageSize (method)\n * @requires useGridPage (method)\n */\n\nexport const useGridRowsMeta = (apiRef, props) => {\n  const {\n    getRowHeight: getRowHeightProp,\n    getRowSpacing,\n    getEstimatedRowHeight\n  } = props;\n  const rowsHeightLookup = React.useRef({}); // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n\n  const lastMeasuredRowIndex = React.useRef(-1);\n  const hasRowWithAutoHeight = React.useRef(false);\n  const rowHeightFromDensity = useGridSelector(apiRef, gridDensityRowHeightSelector);\n  const filterState = useGridSelector(apiRef, gridFilterStateSelector);\n  const paginationState = useGridSelector(apiRef, gridPaginationSelector);\n  const sortingState = useGridSelector(apiRef, gridSortingStateSelector);\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const hydrateRowsMeta = React.useCallback(() => {\n    hasRowWithAutoHeight.current = false;\n    apiRef.current.setState(state => {\n      const densityFactor = gridDensityFactorSelector(state, apiRef.current.instanceId);\n      const positions = [];\n      const currentPageTotalHeight = currentPage.rows.reduce((acc, row) => {\n        positions.push(acc);\n\n        if (!rowsHeightLookup.current[row.id]) {\n          rowsHeightLookup.current[row.id] = {\n            sizes: {\n              base: rowHeightFromDensity\n            },\n            isResized: false,\n            autoHeight: false,\n            needsFirstMeasurement: true // Assume all rows will need to be measured by default\n\n          };\n        }\n\n        const {\n          isResized,\n          needsFirstMeasurement,\n          sizes\n        } = rowsHeightLookup.current[row.id];\n        let baseRowHeight = rowHeightFromDensity;\n        const existingBaseRowHeight = sizes.base;\n\n        if (isResized) {\n          // Do not recalculate resized row height and use the value from the lookup\n          baseRowHeight = existingBaseRowHeight;\n        } else if (getRowHeightProp) {\n          const rowHeightFromUser = getRowHeightProp(_extends({}, row, {\n            densityFactor\n          }));\n\n          if (rowHeightFromUser === 'auto') {\n            if (needsFirstMeasurement) {\n              const estimatedRowHeight = getEstimatedRowHeight ? getEstimatedRowHeight(_extends({}, row, {\n                densityFactor\n              })) : rowHeightFromDensity; // If the row was not measured yet use the estimated row height\n\n              baseRowHeight = estimatedRowHeight != null ? estimatedRowHeight : rowHeightFromDensity;\n            } else {\n              baseRowHeight = existingBaseRowHeight;\n            }\n\n            hasRowWithAutoHeight.current = true;\n            rowsHeightLookup.current[row.id].autoHeight = true;\n          } else {\n            // Default back to base rowHeight if getRowHeight returns null or undefined.\n            baseRowHeight = rowHeightFromUser != null ? rowHeightFromUser : rowHeightFromDensity;\n            rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n            rowsHeightLookup.current[row.id].autoHeight = false;\n          }\n        } else {\n          rowsHeightLookup.current[row.id].needsFirstMeasurement = false;\n        } // We use an object to make simple to check if a height is already added or not\n\n\n        const initialHeights = {\n          base: baseRowHeight\n        };\n\n        if (getRowSpacing) {\n          var _spacing$top, _spacing$bottom;\n\n          const indexRelativeToCurrentPage = apiRef.current.getRowIndexRelativeToVisibleRows(row.id);\n          const spacing = getRowSpacing(_extends({}, row, {\n            isFirstVisible: indexRelativeToCurrentPage === 0,\n            isLastVisible: indexRelativeToCurrentPage === currentPage.rows.length - 1,\n            indexRelativeToCurrentPage\n          }));\n          initialHeights.spacingTop = (_spacing$top = spacing.top) != null ? _spacing$top : 0;\n          initialHeights.spacingBottom = (_spacing$bottom = spacing.bottom) != null ? _spacing$bottom : 0;\n        }\n\n        const processedSizes = apiRef.current.unstable_applyPipeProcessors('rowHeight', initialHeights, row);\n        rowsHeightLookup.current[row.id].sizes = processedSizes;\n        const finalRowHeight = Object.values(processedSizes).reduce((acc2, value) => acc2 + value, 0);\n        return acc + finalRowHeight;\n      }, 0);\n      return _extends({}, state, {\n        rowsMeta: {\n          currentPageTotalHeight,\n          positions\n        }\n      });\n    });\n\n    if (!hasRowWithAutoHeight.current) {\n      // No row has height=auto, so all rows are already measured\n      lastMeasuredRowIndex.current = Infinity;\n    }\n\n    apiRef.current.forceUpdate();\n  }, [apiRef, currentPage.rows, rowHeightFromDensity, getRowHeightProp, getRowSpacing, getEstimatedRowHeight]);\n  const getRowHeight = React.useCallback(rowId => {\n    const height = rowsHeightLookup.current[rowId];\n    return height ? height.sizes.base : rowHeightFromDensity;\n  }, [rowHeightFromDensity]);\n\n  const getRowInternalSizes = rowId => {\n    var _rowsHeightLookup$cur;\n\n    return (_rowsHeightLookup$cur = rowsHeightLookup.current[rowId]) == null ? void 0 : _rowsHeightLookup$cur.sizes;\n  };\n\n  const setRowHeight = React.useCallback((id, height) => {\n    rowsHeightLookup.current[id].sizes.base = height;\n    rowsHeightLookup.current[id].isResized = true;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    hydrateRowsMeta();\n  }, [hydrateRowsMeta]);\n  const storeMeasuredRowHeight = React.useCallback((id, height) => {\n    if (!rowsHeightLookup.current[id] || !rowsHeightLookup.current[id].autoHeight) {\n      return;\n    } // Only trigger hydration if the value is different, otherwise we trigger a loop\n\n\n    const needsHydration = rowsHeightLookup.current[id].sizes.base !== height;\n    rowsHeightLookup.current[id].needsFirstMeasurement = false;\n    rowsHeightLookup.current[id].sizes.base = height;\n\n    if (needsHydration) {\n      hydrateRowsMeta();\n    }\n  }, [hydrateRowsMeta]);\n  const rowHasAutoHeight = React.useCallback(id => {\n    var _rowsHeightLookup$cur2;\n\n    return ((_rowsHeightLookup$cur2 = rowsHeightLookup.current[id]) == null ? void 0 : _rowsHeightLookup$cur2.autoHeight) || false;\n  }, []);\n  const getLastMeasuredRowIndex = React.useCallback(() => {\n    return lastMeasuredRowIndex.current;\n  }, []);\n  const setLastMeasuredRowIndex = React.useCallback(index => {\n    if (hasRowWithAutoHeight.current) {\n      lastMeasuredRowIndex.current = index;\n    }\n  }, []); // The effect is used to build the rows meta data - currentPageTotalHeight and positions.\n  // Because of variable row height this is needed for the virtualization\n\n  React.useEffect(() => {\n    hydrateRowsMeta();\n  }, [rowHeightFromDensity, filterState, paginationState, sortingState, hydrateRowsMeta]);\n  useGridRegisterPipeApplier(apiRef, 'rowHeight', hydrateRowsMeta);\n  const rowsMetaApi = {\n    unstable_getLastMeasuredRowIndex: getLastMeasuredRowIndex,\n    unstable_setLastMeasuredRowIndex: setLastMeasuredRowIndex,\n    unstable_rowHasAutoHeight: rowHasAutoHeight,\n    unstable_getRowHeight: getRowHeight,\n    unstable_getRowInternalSizes: getRowInternalSizes,\n    unstable_setRowHeight: setRowHeight,\n    unstable_storeRowHeightMeasurement: storeMeasuredRowHeight\n  };\n  useGridApiMethod(apiRef, rowsMetaApi, 'GridRowsMetaApi');\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}