{"ast":null,"code":"import _toConsumableArray from \"C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var columnsStateInitializer = function columnsStateInitializer(state, props, apiRef) {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  var isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  apiRef.current.unstable_caches.columns = {\n    isUsingColumnVisibilityModel: isUsingColumnVisibilityModel\n  };\n  var columnsTypes = computeColumnTypes(props.columnTypes);\n  var columnsState = createColumnsState({\n    apiRef: apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$componentsProp2;\n\n  var logger = useGridLogger(apiRef, 'useGridColumns');\n  var columnTypes = React.useMemo(function () {\n    return computeColumnTypes(props.columnTypes);\n  }, [props.columnTypes]);\n  var previousColumnsProp = React.useRef(props.columns);\n  var previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  var setGridColumnsState = React.useCallback(function (columnsState) {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  var getColumn = React.useCallback(function (field) {\n    return gridColumnLookupSelector(apiRef)[field];\n  }, [apiRef]);\n  var getAllColumns = React.useCallback(function () {\n    return gridColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getVisibleColumns = React.useCallback(function () {\n    return gridVisibleColumnDefinitionsSelector(apiRef);\n  }, [apiRef]);\n  var getColumnsMeta = React.useCallback(function () {\n    return gridColumnsMetaSelector(apiRef);\n  }, [apiRef]);\n  var getColumnIndex = React.useCallback(function (field) {\n    var useVisibleColumns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(function (col) {\n      return col.field === field;\n    });\n  }, [apiRef]);\n  var getColumnPosition = React.useCallback(function (field) {\n    var index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  var setColumnVisibilityModel = React.useCallback(function (model) {\n    var currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          columns: createColumnsState({\n            apiRef: apiRef,\n            columnTypes: columnTypes,\n            columnsToUpsert: [],\n            initialState: undefined,\n            shouldRegenColumnVisibilityModelFromColumns: false,\n            currentColumnVisibilityModel: model,\n            keepOnlyColumnsToUpsert: false\n          })\n        });\n      });\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  var updateColumns = React.useCallback(function (columns) {\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  var updateColumn = React.useCallback(function (column) {\n    return apiRef.current.updateColumns([column]);\n  }, [apiRef]);\n  var setColumnVisibility = React.useCallback(function (field, isVisible) {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      var columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      var isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        var newModel = _extends({}, columnVisibilityModel, _defineProperty({}, field, isVisible));\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      var column = apiRef.current.getColumn(field);\n\n      var newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      var params = {\n        field: field,\n        colDef: newColumn,\n        isVisible: isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  var setColumnIndex = React.useCallback(function (field, targetIndexPosition) {\n    var allColumns = gridColumnFieldsSelector(apiRef);\n    var oldIndexPosition = allColumns.findIndex(function (col) {\n      return col === field;\n    });\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(\"Moving column \".concat(field, \" to index \").concat(targetIndexPosition));\n\n    var updatedColumns = _toConsumableArray(allColumns);\n\n    var fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    var params = {\n      field: field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  var setColumnWidth = React.useCallback(function (field, width) {\n    logger.debug(\"Updating column \".concat(field, \" width to \").concat(width));\n    var column = apiRef.current.getColumn(field);\n\n    var newColumn = _extends({}, column, {\n      width: width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width: width\n    });\n  }, [apiRef, logger]);\n  var columnApi = {\n    getColumn: getColumn,\n    getAllColumns: getAllColumns,\n    getColumnIndex: getColumnIndex,\n    getColumnPosition: getColumnPosition,\n    getVisibleColumns: getVisibleColumns,\n    getColumnsMeta: getColumnsMeta,\n    updateColumn: updateColumn,\n    updateColumns: updateColumns,\n    setColumnVisibilityModel: setColumnVisibilityModel,\n    setColumnVisibility: setColumnVisibility,\n    setColumnIndex: setColumnIndex,\n    setColumnWidth: setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  var stateExportPreProcessing = React.useCallback(function (prevState) {\n    var columnsStateToExport = {};\n\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      var hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(function (value) {\n        return value === false;\n      });\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    var columns = gridColumnDefinitionsSelector(apiRef);\n    var dimensions = {};\n    columns.forEach(function (colDef) {\n      if (colDef.hasBeenResized) {\n        var colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(function (propertyName) {\n          var propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef]);\n  var stateRestorePreProcessing = React.useCallback(function (params, context) {\n    var _context$stateToResto;\n\n    var columnVisibilityModelToImport = apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    var initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: [],\n      initialState: initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  var preferencePanelPreProcessing = React.useCallback(function (initialValue, value) {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      var ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  var prevInnerWidth = React.useRef(null);\n\n  var handleGridSizeChange = function handleGridSizeChange(viewportInnerSize) {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  var hydrateColumns = React.useCallback(function () {\n    logger.info(\"Columns pipe processing have changed, regenerating the columns\");\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(\"GridColumns have changed, new length \".concat(props.columns.length));\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    var columnsState = createColumnsState({\n      apiRef: apiRef,\n      columnTypes: columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(function () {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridColumnFieldsSelector","gridColumnDefinitionsSelector","gridColumnLookupSelector","gridColumnsMetaSelector","gridColumnsSelector","gridColumnVisibilityModelSelector","gridVisibleColumnDefinitionsSelector","gridColumnPositionsSelector","useGridApiEventHandler","useGridApiOptionHandler","useGridRegisterPipeProcessor","useGridRegisterPipeApplier","hydrateColumnsWidth","computeColumnTypes","createColumnsState","mergeColumnsState","COLUMNS_DIMENSION_PROPERTIES","GridPreferencePanelsValue","jsx","_jsx","columnsStateInitializer","state","props","apiRef","_props$initialState","_props$initialState$c","_props$initialState2","_ref","_props$columnVisibili","_props$initialState3","_props$initialState3$","isUsingColumnVisibilityModel","columnVisibilityModel","initialState","columns","current","unstable_caches","columnsTypes","columnTypes","columnsState","columnsToUpsert","shouldRegenColumnVisibilityModelFromColumns","currentColumnVisibilityModel","keepOnlyColumnsToUpsert","useGridColumns","_props$componentsProp2","logger","useMemo","previousColumnsProp","useRef","previousColumnTypesProp","unstable_registerControlState","stateId","propModel","propOnChange","onColumnVisibilityModelChange","stateSelector","changeEvent","setGridColumnsState","useCallback","debug","setState","forceUpdate","publishEvent","all","getColumn","field","getAllColumns","getVisibleColumns","getColumnsMeta","getColumnIndex","useVisibleColumns","findIndex","col","getColumnPosition","index","setColumnVisibilityModel","model","currentModel","undefined","updateColumns","updateColumn","column","setColumnVisibility","isVisible","_columnVisibilityMode","isCurrentlyVisible","newModel","newColumn","hide","params","colDef","setColumnIndex","targetIndexPosition","allColumns","oldIndexPosition","updatedColumns","fieldRemoved","splice","element","getColumnHeaderElement","targetIndex","oldIndex","setColumnWidth","width","columnApi","stateExportPreProcessing","prevState","columnsStateToExport","columnVisibilityModelToExport","hasHiddenColumns","Object","values","some","value","orderedFields","dimensions","forEach","hasBeenResized","colDefDimensions","propertyName","propertyValue","Infinity","keys","length","stateRestorePreProcessing","context","_context$stateToResto","columnVisibilityModelToImport","stateToRestore","preferencePanelPreProcessing","initialValue","_props$componentsProp","ColumnsPanel","components","componentsProps","columnsPanel","prevInnerWidth","handleGridSizeChange","viewportInnerSize","onColumnVisibilityChange","hydrateColumns","info","isFirstRender","useEffect"],"sources":["C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@mui/x-data-grid/hooks/features/columns/useGridColumns.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridColumnFieldsSelector, gridColumnDefinitionsSelector, gridColumnLookupSelector, gridColumnsMetaSelector, gridColumnsSelector, gridColumnVisibilityModelSelector, gridVisibleColumnDefinitionsSelector, gridColumnPositionsSelector } from './gridColumnsSelector';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridRegisterPipeProcessor, useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nimport { hydrateColumnsWidth, computeColumnTypes, createColumnsState, mergeColumnsState, COLUMNS_DIMENSION_PROPERTIES } from './gridColumnsUtils';\nimport { GridPreferencePanelsValue } from '../preferencesPanel';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const columnsStateInitializer = (state, props, apiRef) => {\n  var _props$initialState, _props$initialState$c, _props$initialState2, _ref, _props$columnVisibili, _props$initialState3, _props$initialState3$;\n\n  const isUsingColumnVisibilityModel = !!props.columnVisibilityModel || !!((_props$initialState = props.initialState) != null && (_props$initialState$c = _props$initialState.columns) != null && _props$initialState$c.columnVisibilityModel);\n  apiRef.current.unstable_caches.columns = {\n    isUsingColumnVisibilityModel\n  };\n  const columnsTypes = computeColumnTypes(props.columnTypes);\n  const columnsState = createColumnsState({\n    apiRef,\n    columnTypes: columnsTypes,\n    columnsToUpsert: props.columns,\n    initialState: (_props$initialState2 = props.initialState) == null ? void 0 : _props$initialState2.columns,\n    shouldRegenColumnVisibilityModelFromColumns: !isUsingColumnVisibilityModel,\n    currentColumnVisibilityModel: (_ref = (_props$columnVisibili = props.columnVisibilityModel) != null ? _props$columnVisibili : (_props$initialState3 = props.initialState) == null ? void 0 : (_props$initialState3$ = _props$initialState3.columns) == null ? void 0 : _props$initialState3$.columnVisibilityModel) != null ? _ref : {},\n    keepOnlyColumnsToUpsert: true\n  });\n  return _extends({}, state, {\n    columns: columnsState\n  });\n};\n/**\n * @requires useGridParamsApi (method)\n * @requires useGridDimensions (method, event) - can be after\n * TODO: Impossible priority - useGridParamsApi also needs to be after useGridColumns\n */\n\nexport function useGridColumns(apiRef, props) {\n  var _props$componentsProp2;\n\n  const logger = useGridLogger(apiRef, 'useGridColumns');\n  const columnTypes = React.useMemo(() => computeColumnTypes(props.columnTypes), [props.columnTypes]);\n  const previousColumnsProp = React.useRef(props.columns);\n  const previousColumnTypesProp = React.useRef(columnTypes);\n  apiRef.current.unstable_registerControlState({\n    stateId: 'visibleColumns',\n    propModel: props.columnVisibilityModel,\n    propOnChange: props.onColumnVisibilityModelChange,\n    stateSelector: gridColumnVisibilityModelSelector,\n    changeEvent: 'columnVisibilityModelChange'\n  });\n  const setGridColumnsState = React.useCallback(columnsState => {\n    logger.debug('Updating columns state.');\n    apiRef.current.setState(mergeColumnsState(columnsState));\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('columnsChange', columnsState.all);\n  }, [logger, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const getColumn = React.useCallback(field => gridColumnLookupSelector(apiRef)[field], [apiRef]);\n  const getAllColumns = React.useCallback(() => gridColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getVisibleColumns = React.useCallback(() => gridVisibleColumnDefinitionsSelector(apiRef), [apiRef]);\n  const getColumnsMeta = React.useCallback(() => gridColumnsMetaSelector(apiRef), [apiRef]);\n  const getColumnIndex = React.useCallback((field, useVisibleColumns = true) => {\n    const columns = useVisibleColumns ? gridVisibleColumnDefinitionsSelector(apiRef) : gridColumnDefinitionsSelector(apiRef);\n    return columns.findIndex(col => col.field === field);\n  }, [apiRef]);\n  const getColumnPosition = React.useCallback(field => {\n    const index = getColumnIndex(field);\n    return gridColumnPositionsSelector(apiRef)[index];\n  }, [apiRef, getColumnIndex]);\n  const setColumnVisibilityModel = React.useCallback(model => {\n    const currentModel = gridColumnVisibilityModelSelector(apiRef);\n\n    if (currentModel !== model) {\n      apiRef.current.setState(state => _extends({}, state, {\n        columns: createColumnsState({\n          apiRef,\n          columnTypes,\n          columnsToUpsert: [],\n          initialState: undefined,\n          shouldRegenColumnVisibilityModelFromColumns: false,\n          currentColumnVisibilityModel: model,\n          keepOnlyColumnsToUpsert: false\n        })\n      }));\n      apiRef.current.forceUpdate();\n    }\n  }, [apiRef, columnTypes]);\n  const updateColumns = React.useCallback(columns => {\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: columns,\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: true,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, setGridColumnsState, columnTypes]);\n  const updateColumn = React.useCallback(column => apiRef.current.updateColumns([column]), [apiRef]);\n  const setColumnVisibility = React.useCallback((field, isVisible) => {\n    // We keep updating the `hide` option of `GridColDef` when not controlling the model to avoid any breaking change.\n    // `updateColumns` take care of updating the model itself if needs be.\n    // TODO v6: stop using the `hide` field even when the model is not defined\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      var _columnVisibilityMode;\n\n      const columnVisibilityModel = gridColumnVisibilityModelSelector(apiRef);\n      const isCurrentlyVisible = (_columnVisibilityMode = columnVisibilityModel[field]) != null ? _columnVisibilityMode : true;\n\n      if (isVisible !== isCurrentlyVisible) {\n        const newModel = _extends({}, columnVisibilityModel, {\n          [field]: isVisible\n        });\n\n        apiRef.current.setColumnVisibilityModel(newModel);\n      }\n    } else {\n      const column = apiRef.current.getColumn(field);\n\n      const newColumn = _extends({}, column, {\n        hide: !isVisible\n      });\n\n      apiRef.current.updateColumns([newColumn]);\n      const params = {\n        field,\n        colDef: newColumn,\n        isVisible\n      };\n      apiRef.current.publishEvent('columnVisibilityChange', params);\n    }\n  }, [apiRef]);\n  const setColumnIndex = React.useCallback((field, targetIndexPosition) => {\n    const allColumns = gridColumnFieldsSelector(apiRef);\n    const oldIndexPosition = allColumns.findIndex(col => col === field);\n\n    if (oldIndexPosition === targetIndexPosition) {\n      return;\n    }\n\n    logger.debug(`Moving column ${field} to index ${targetIndexPosition}`);\n    const updatedColumns = [...allColumns];\n    const fieldRemoved = updatedColumns.splice(oldIndexPosition, 1)[0];\n    updatedColumns.splice(targetIndexPosition, 0, fieldRemoved);\n    setGridColumnsState(_extends({}, gridColumnsSelector(apiRef.current.state), {\n      all: updatedColumns\n    }));\n    const params = {\n      field,\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: apiRef.current.getColumn(field),\n      targetIndex: targetIndexPosition,\n      oldIndex: oldIndexPosition\n    };\n    apiRef.current.publishEvent('columnOrderChange', params);\n  }, [apiRef, logger, setGridColumnsState]);\n  const setColumnWidth = React.useCallback((field, width) => {\n    logger.debug(`Updating column ${field} width to ${width}`);\n    const column = apiRef.current.getColumn(field);\n\n    const newColumn = _extends({}, column, {\n      width\n    });\n\n    apiRef.current.updateColumns([newColumn]);\n    apiRef.current.publishEvent('columnWidthChange', {\n      element: apiRef.current.getColumnHeaderElement(field),\n      colDef: newColumn,\n      width\n    });\n  }, [apiRef, logger]);\n  const columnApi = {\n    getColumn,\n    getAllColumns,\n    getColumnIndex,\n    getColumnPosition,\n    getVisibleColumns,\n    getColumnsMeta,\n    updateColumn,\n    updateColumns,\n    setColumnVisibilityModel,\n    setColumnVisibility,\n    setColumnIndex,\n    setColumnWidth\n  };\n  useGridApiMethod(apiRef, columnApi, 'GridColumnApi');\n  /**\n   * PRE-PROCESSING\n   */\n\n  const stateExportPreProcessing = React.useCallback(prevState => {\n    const columnsStateToExport = {};\n\n    if (apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel) {\n      const columnVisibilityModelToExport = gridColumnVisibilityModelSelector(apiRef);\n      const hasHiddenColumns = Object.values(columnVisibilityModelToExport).some(value => value === false);\n\n      if (hasHiddenColumns) {\n        columnsStateToExport.columnVisibilityModel = columnVisibilityModelToExport;\n      }\n    }\n\n    columnsStateToExport.orderedFields = gridColumnFieldsSelector(apiRef);\n    const columns = gridColumnDefinitionsSelector(apiRef);\n    const dimensions = {};\n    columns.forEach(colDef => {\n      if (colDef.hasBeenResized) {\n        const colDefDimensions = {};\n        COLUMNS_DIMENSION_PROPERTIES.forEach(propertyName => {\n          let propertyValue = colDef[propertyName];\n\n          if (propertyValue === Infinity) {\n            propertyValue = -1;\n          }\n\n          colDefDimensions[propertyName] = propertyValue;\n        });\n        dimensions[colDef.field] = colDefDimensions;\n      }\n    });\n\n    if (Object.keys(dimensions).length > 0) {\n      columnsStateToExport.dimensions = dimensions;\n    }\n\n    return _extends({}, prevState, {\n      columns: columnsStateToExport\n    });\n  }, [apiRef]);\n  const stateRestorePreProcessing = React.useCallback((params, context) => {\n    var _context$stateToResto;\n\n    const columnVisibilityModelToImport = apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel ? (_context$stateToResto = context.stateToRestore.columns) == null ? void 0 : _context$stateToResto.columnVisibilityModel : undefined;\n    const initialState = context.stateToRestore.columns;\n\n    if (columnVisibilityModelToImport == null && initialState == null) {\n      return params;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      currentColumnVisibilityModel: columnVisibilityModelToImport,\n      keepOnlyColumnsToUpsert: false\n    });\n    apiRef.current.setState(mergeColumnsState(columnsState));\n\n    if (initialState != null) {\n      apiRef.current.publishEvent('columnsChange', columnsState.all);\n    }\n\n    return params;\n  }, [apiRef, columnTypes]);\n  const preferencePanelPreProcessing = React.useCallback((initialValue, value) => {\n    if (value === GridPreferencePanelsValue.columns) {\n      var _props$componentsProp;\n\n      const ColumnsPanel = props.components.ColumnsPanel;\n      return /*#__PURE__*/_jsx(ColumnsPanel, _extends({}, (_props$componentsProp = props.componentsProps) == null ? void 0 : _props$componentsProp.columnsPanel));\n    }\n\n    return initialValue;\n  }, [props.components.ColumnsPanel, (_props$componentsProp2 = props.componentsProps) == null ? void 0 : _props$componentsProp2.columnsPanel]);\n  useGridRegisterPipeProcessor(apiRef, 'exportState', stateExportPreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'restoreState', stateRestorePreProcessing);\n  useGridRegisterPipeProcessor(apiRef, 'preferencePanel', preferencePanelPreProcessing);\n  /**\n   * EVENTS\n   */\n\n  const prevInnerWidth = React.useRef(null);\n\n  const handleGridSizeChange = viewportInnerSize => {\n    if (prevInnerWidth.current !== viewportInnerSize.width) {\n      prevInnerWidth.current = viewportInnerSize.width;\n      setGridColumnsState(hydrateColumnsWidth(gridColumnsSelector(apiRef.current.state), viewportInnerSize.width));\n    }\n  };\n\n  useGridApiEventHandler(apiRef, 'viewportInnerSizeChange', handleGridSizeChange);\n  useGridApiOptionHandler(apiRef, 'columnVisibilityChange', props.onColumnVisibilityChange);\n  /**\n   * APPLIERS\n   */\n\n  const hydrateColumns = React.useCallback(() => {\n    logger.info(`Columns pipe processing have changed, regenerating the columns`);\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      columnsToUpsert: [],\n      initialState: undefined,\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      keepOnlyColumnsToUpsert: false\n    });\n    setGridColumnsState(columnsState);\n  }, [apiRef, logger, setGridColumnsState, columnTypes]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateColumns', hydrateColumns);\n  /**\n   * EFFECTS\n   */\n  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridColumns`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n\n    logger.info(`GridColumns have changed, new length ${props.columns.length}`);\n\n    if (previousColumnsProp.current === props.columns && previousColumnTypesProp.current === columnTypes) {\n      return;\n    }\n\n    const columnsState = createColumnsState({\n      apiRef,\n      columnTypes,\n      initialState: undefined,\n      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`\n      shouldRegenColumnVisibilityModelFromColumns: !apiRef.current.unstable_caches.columns.isUsingColumnVisibilityModel,\n      columnsToUpsert: props.columns,\n      keepOnlyColumnsToUpsert: true\n    });\n    previousColumnsProp.current = props.columns;\n    previousColumnTypesProp.current = columnTypes;\n    setGridColumnsState(columnsState);\n  }, [logger, apiRef, setGridColumnsState, props.columns, columnTypes]);\n  React.useEffect(() => {\n    if (props.columnVisibilityModel !== undefined) {\n      apiRef.current.setColumnVisibilityModel(props.columnVisibilityModel);\n    }\n  }, [apiRef, logger, props.columnVisibilityModel]);\n}"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAASC,wBAAT,EAAmCC,6BAAnC,EAAkEC,wBAAlE,EAA4FC,uBAA5F,EAAqHC,mBAArH,EAA0IC,iCAA1I,EAA6KC,oCAA7K,EAAmNC,2BAAnN,QAAsP,uBAAtP;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,QAAgE,oCAAhE;AACA,SAASC,4BAAT,EAAuCC,0BAAvC,QAAyE,2BAAzE;AACA,SAASC,mBAAT,EAA8BC,kBAA9B,EAAkDC,kBAAlD,EAAsEC,iBAAtE,EAAyFC,4BAAzF,QAA6H,oBAA7H;AACA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;AACA,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAQC,KAAR,EAAeC,MAAf,EAA0B;EAC/D,IAAIC,mBAAJ,EAAyBC,qBAAzB,EAAgDC,oBAAhD,EAAsEC,IAAtE,EAA4EC,qBAA5E,EAAmGC,oBAAnG,EAAyHC,qBAAzH;;EAEA,IAAMC,4BAA4B,GAAG,CAAC,CAACT,KAAK,CAACU,qBAAR,IAAiC,CAAC,EAAE,CAACR,mBAAmB,GAAGF,KAAK,CAACW,YAA7B,KAA8C,IAA9C,IAAsD,CAACR,qBAAqB,GAAGD,mBAAmB,CAACU,OAA7C,KAAyD,IAA/G,IAAuHT,qBAAqB,CAACO,qBAA/I,CAAvE;EACAT,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,GAAyC;IACvCH,4BAA4B,EAA5BA;EADuC,CAAzC;EAGA,IAAMM,YAAY,GAAGxB,kBAAkB,CAACS,KAAK,CAACgB,WAAP,CAAvC;EACA,IAAMC,YAAY,GAAGzB,kBAAkB,CAAC;IACtCS,MAAM,EAANA,MADsC;IAEtCe,WAAW,EAAED,YAFyB;IAGtCG,eAAe,EAAElB,KAAK,CAACY,OAHe;IAItCD,YAAY,EAAE,CAACP,oBAAoB,GAAGJ,KAAK,CAACW,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+DP,oBAAoB,CAACQ,OAJ5D;IAKtCO,2CAA2C,EAAE,CAACV,4BALR;IAMtCW,4BAA4B,EAAE,CAACf,IAAI,GAAG,CAACC,qBAAqB,GAAGN,KAAK,CAACU,qBAA/B,KAAyD,IAAzD,GAAgEJ,qBAAhE,GAAwF,CAACC,oBAAoB,GAAGP,KAAK,CAACW,YAA9B,KAA+C,IAA/C,GAAsD,KAAK,CAA3D,GAA+D,CAACH,qBAAqB,GAAGD,oBAAoB,CAACK,OAA9C,KAA0D,IAA1D,GAAiE,KAAK,CAAtE,GAA0EJ,qBAAqB,CAACE,qBAA/P,KAAyR,IAAzR,GAAgSL,IAAhS,GAAuS,EAN/R;IAOtCgB,uBAAuB,EAAE;EAPa,CAAD,CAAvC;EASA,OAAO/C,QAAQ,CAAC,EAAD,EAAKyB,KAAL,EAAY;IACzBa,OAAO,EAAEK;EADgB,CAAZ,CAAf;AAGD,CApBM;AAqBP;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASK,cAAT,CAAwBrB,MAAxB,EAAgCD,KAAhC,EAAuC;EAC5C,IAAIuB,sBAAJ;;EAEA,IAAMC,MAAM,GAAG/C,aAAa,CAACwB,MAAD,EAAS,gBAAT,CAA5B;EACA,IAAMe,WAAW,GAAGzC,KAAK,CAACkD,OAAN,CAAc;IAAA,OAAMlC,kBAAkB,CAACS,KAAK,CAACgB,WAAP,CAAxB;EAAA,CAAd,EAA2D,CAAChB,KAAK,CAACgB,WAAP,CAA3D,CAApB;EACA,IAAMU,mBAAmB,GAAGnD,KAAK,CAACoD,MAAN,CAAa3B,KAAK,CAACY,OAAnB,CAA5B;EACA,IAAMgB,uBAAuB,GAAGrD,KAAK,CAACoD,MAAN,CAAaX,WAAb,CAAhC;EACAf,MAAM,CAACY,OAAP,CAAegB,6BAAf,CAA6C;IAC3CC,OAAO,EAAE,gBADkC;IAE3CC,SAAS,EAAE/B,KAAK,CAACU,qBAF0B;IAG3CsB,YAAY,EAAEhC,KAAK,CAACiC,6BAHuB;IAI3CC,aAAa,EAAEnD,iCAJ4B;IAK3CoD,WAAW,EAAE;EAL8B,CAA7C;EAOA,IAAMC,mBAAmB,GAAG7D,KAAK,CAAC8D,WAAN,CAAkB,UAAApB,YAAY,EAAI;IAC5DO,MAAM,CAACc,KAAP,CAAa,yBAAb;IACArC,MAAM,CAACY,OAAP,CAAe0B,QAAf,CAAwB9C,iBAAiB,CAACwB,YAAD,CAAzC;IACAhB,MAAM,CAACY,OAAP,CAAe2B,WAAf;IACAvC,MAAM,CAACY,OAAP,CAAe4B,YAAf,CAA4B,eAA5B,EAA6CxB,YAAY,CAACyB,GAA1D;EACD,CAL2B,EAKzB,CAAClB,MAAD,EAASvB,MAAT,CALyB,CAA5B;EAMA;AACF;AACA;;EAEE,IAAM0C,SAAS,GAAGpE,KAAK,CAAC8D,WAAN,CAAkB,UAAAO,KAAK;IAAA,OAAIhE,wBAAwB,CAACqB,MAAD,CAAxB,CAAiC2C,KAAjC,CAAJ;EAAA,CAAvB,EAAoE,CAAC3C,MAAD,CAApE,CAAlB;EACA,IAAM4C,aAAa,GAAGtE,KAAK,CAAC8D,WAAN,CAAkB;IAAA,OAAM1D,6BAA6B,CAACsB,MAAD,CAAnC;EAAA,CAAlB,EAA+D,CAACA,MAAD,CAA/D,CAAtB;EACA,IAAM6C,iBAAiB,GAAGvE,KAAK,CAAC8D,WAAN,CAAkB;IAAA,OAAMrD,oCAAoC,CAACiB,MAAD,CAA1C;EAAA,CAAlB,EAAsE,CAACA,MAAD,CAAtE,CAA1B;EACA,IAAM8C,cAAc,GAAGxE,KAAK,CAAC8D,WAAN,CAAkB;IAAA,OAAMxD,uBAAuB,CAACoB,MAAD,CAA7B;EAAA,CAAlB,EAAyD,CAACA,MAAD,CAAzD,CAAvB;EACA,IAAM+C,cAAc,GAAGzE,KAAK,CAAC8D,WAAN,CAAkB,UAACO,KAAD,EAAqC;IAAA,IAA7BK,iBAA6B,uEAAT,IAAS;IAC5E,IAAMrC,OAAO,GAAGqC,iBAAiB,GAAGjE,oCAAoC,CAACiB,MAAD,CAAvC,GAAkDtB,6BAA6B,CAACsB,MAAD,CAAhH;IACA,OAAOW,OAAO,CAACsC,SAAR,CAAkB,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACP,KAAJ,KAAcA,KAAlB;IAAA,CAArB,CAAP;EACD,CAHsB,EAGpB,CAAC3C,MAAD,CAHoB,CAAvB;EAIA,IAAMmD,iBAAiB,GAAG7E,KAAK,CAAC8D,WAAN,CAAkB,UAAAO,KAAK,EAAI;IACnD,IAAMS,KAAK,GAAGL,cAAc,CAACJ,KAAD,CAA5B;IACA,OAAO3D,2BAA2B,CAACgB,MAAD,CAA3B,CAAoCoD,KAApC,CAAP;EACD,CAHyB,EAGvB,CAACpD,MAAD,EAAS+C,cAAT,CAHuB,CAA1B;EAIA,IAAMM,wBAAwB,GAAG/E,KAAK,CAAC8D,WAAN,CAAkB,UAAAkB,KAAK,EAAI;IAC1D,IAAMC,YAAY,GAAGzE,iCAAiC,CAACkB,MAAD,CAAtD;;IAEA,IAAIuD,YAAY,KAAKD,KAArB,EAA4B;MAC1BtD,MAAM,CAACY,OAAP,CAAe0B,QAAf,CAAwB,UAAAxC,KAAK;QAAA,OAAIzB,QAAQ,CAAC,EAAD,EAAKyB,KAAL,EAAY;UACnDa,OAAO,EAAEpB,kBAAkB,CAAC;YAC1BS,MAAM,EAANA,MAD0B;YAE1Be,WAAW,EAAXA,WAF0B;YAG1BE,eAAe,EAAE,EAHS;YAI1BP,YAAY,EAAE8C,SAJY;YAK1BtC,2CAA2C,EAAE,KALnB;YAM1BC,4BAA4B,EAAEmC,KANJ;YAO1BlC,uBAAuB,EAAE;UAPC,CAAD;QADwB,CAAZ,CAAZ;MAAA,CAA7B;MAWApB,MAAM,CAACY,OAAP,CAAe2B,WAAf;IACD;EACF,CAjBgC,EAiB9B,CAACvC,MAAD,EAASe,WAAT,CAjB8B,CAAjC;EAkBA,IAAM0C,aAAa,GAAGnF,KAAK,CAAC8D,WAAN,CAAkB,UAAAzB,OAAO,EAAI;IACjD,IAAMK,YAAY,GAAGzB,kBAAkB,CAAC;MACtCS,MAAM,EAANA,MADsC;MAEtCe,WAAW,EAAXA,WAFsC;MAGtCE,eAAe,EAAEN,OAHqB;MAItCD,YAAY,EAAE8C,SAJwB;MAKtCtC,2CAA2C,EAAE,IALP;MAMtCE,uBAAuB,EAAE;IANa,CAAD,CAAvC;IAQAe,mBAAmB,CAACnB,YAAD,CAAnB;EACD,CAVqB,EAUnB,CAAChB,MAAD,EAASmC,mBAAT,EAA8BpB,WAA9B,CAVmB,CAAtB;EAWA,IAAM2C,YAAY,GAAGpF,KAAK,CAAC8D,WAAN,CAAkB,UAAAuB,MAAM;IAAA,OAAI3D,MAAM,CAACY,OAAP,CAAe6C,aAAf,CAA6B,CAACE,MAAD,CAA7B,CAAJ;EAAA,CAAxB,EAAoE,CAAC3D,MAAD,CAApE,CAArB;EACA,IAAM4D,mBAAmB,GAAGtF,KAAK,CAAC8D,WAAN,CAAkB,UAACO,KAAD,EAAQkB,SAAR,EAAsB;IAClE;IACA;IACA;IACA,IAAI7D,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAA3C,EAAyE;MACvE,IAAIsD,qBAAJ;;MAEA,IAAMrD,qBAAqB,GAAG3B,iCAAiC,CAACkB,MAAD,CAA/D;MACA,IAAM+D,kBAAkB,GAAG,CAACD,qBAAqB,GAAGrD,qBAAqB,CAACkC,KAAD,CAA9C,KAA0D,IAA1D,GAAiEmB,qBAAjE,GAAyF,IAApH;;MAEA,IAAID,SAAS,KAAKE,kBAAlB,EAAsC;QACpC,IAAMC,QAAQ,GAAG3F,QAAQ,CAAC,EAAD,EAAKoC,qBAAL,sBACtBkC,KADsB,EACdkB,SADc,EAAzB;;QAIA7D,MAAM,CAACY,OAAP,CAAeyC,wBAAf,CAAwCW,QAAxC;MACD;IACF,CAbD,MAaO;MACL,IAAML,MAAM,GAAG3D,MAAM,CAACY,OAAP,CAAe8B,SAAf,CAAyBC,KAAzB,CAAf;;MAEA,IAAMsB,SAAS,GAAG5F,QAAQ,CAAC,EAAD,EAAKsF,MAAL,EAAa;QACrCO,IAAI,EAAE,CAACL;MAD8B,CAAb,CAA1B;;MAIA7D,MAAM,CAACY,OAAP,CAAe6C,aAAf,CAA6B,CAACQ,SAAD,CAA7B;MACA,IAAME,MAAM,GAAG;QACbxB,KAAK,EAALA,KADa;QAEbyB,MAAM,EAAEH,SAFK;QAGbJ,SAAS,EAATA;MAHa,CAAf;MAKA7D,MAAM,CAACY,OAAP,CAAe4B,YAAf,CAA4B,wBAA5B,EAAsD2B,MAAtD;IACD;EACF,CAhC2B,EAgCzB,CAACnE,MAAD,CAhCyB,CAA5B;EAiCA,IAAMqE,cAAc,GAAG/F,KAAK,CAAC8D,WAAN,CAAkB,UAACO,KAAD,EAAQ2B,mBAAR,EAAgC;IACvE,IAAMC,UAAU,GAAG9F,wBAAwB,CAACuB,MAAD,CAA3C;IACA,IAAMwE,gBAAgB,GAAGD,UAAU,CAACtB,SAAX,CAAqB,UAAAC,GAAG;MAAA,OAAIA,GAAG,KAAKP,KAAZ;IAAA,CAAxB,CAAzB;;IAEA,IAAI6B,gBAAgB,KAAKF,mBAAzB,EAA8C;MAC5C;IACD;;IAED/C,MAAM,CAACc,KAAP,yBAA8BM,KAA9B,uBAAgD2B,mBAAhD;;IACA,IAAMG,cAAc,sBAAOF,UAAP,CAApB;;IACA,IAAMG,YAAY,GAAGD,cAAc,CAACE,MAAf,CAAsBH,gBAAtB,EAAwC,CAAxC,EAA2C,CAA3C,CAArB;IACAC,cAAc,CAACE,MAAf,CAAsBL,mBAAtB,EAA2C,CAA3C,EAA8CI,YAA9C;IACAvC,mBAAmB,CAAC9D,QAAQ,CAAC,EAAD,EAAKQ,mBAAmB,CAACmB,MAAM,CAACY,OAAP,CAAed,KAAhB,CAAxB,EAAgD;MAC1E2C,GAAG,EAAEgC;IADqE,CAAhD,CAAT,CAAnB;IAGA,IAAMN,MAAM,GAAG;MACbxB,KAAK,EAALA,KADa;MAEbiC,OAAO,EAAE5E,MAAM,CAACY,OAAP,CAAeiE,sBAAf,CAAsClC,KAAtC,CAFI;MAGbyB,MAAM,EAAEpE,MAAM,CAACY,OAAP,CAAe8B,SAAf,CAAyBC,KAAzB,CAHK;MAIbmC,WAAW,EAAER,mBAJA;MAKbS,QAAQ,EAAEP;IALG,CAAf;IAOAxE,MAAM,CAACY,OAAP,CAAe4B,YAAf,CAA4B,mBAA5B,EAAiD2B,MAAjD;EACD,CAvBsB,EAuBpB,CAACnE,MAAD,EAASuB,MAAT,EAAiBY,mBAAjB,CAvBoB,CAAvB;EAwBA,IAAM6C,cAAc,GAAG1G,KAAK,CAAC8D,WAAN,CAAkB,UAACO,KAAD,EAAQsC,KAAR,EAAkB;IACzD1D,MAAM,CAACc,KAAP,2BAAgCM,KAAhC,uBAAkDsC,KAAlD;IACA,IAAMtB,MAAM,GAAG3D,MAAM,CAACY,OAAP,CAAe8B,SAAf,CAAyBC,KAAzB,CAAf;;IAEA,IAAMsB,SAAS,GAAG5F,QAAQ,CAAC,EAAD,EAAKsF,MAAL,EAAa;MACrCsB,KAAK,EAALA;IADqC,CAAb,CAA1B;;IAIAjF,MAAM,CAACY,OAAP,CAAe6C,aAAf,CAA6B,CAACQ,SAAD,CAA7B;IACAjE,MAAM,CAACY,OAAP,CAAe4B,YAAf,CAA4B,mBAA5B,EAAiD;MAC/CoC,OAAO,EAAE5E,MAAM,CAACY,OAAP,CAAeiE,sBAAf,CAAsClC,KAAtC,CADsC;MAE/CyB,MAAM,EAAEH,SAFuC;MAG/CgB,KAAK,EAALA;IAH+C,CAAjD;EAKD,CAdsB,EAcpB,CAACjF,MAAD,EAASuB,MAAT,CAdoB,CAAvB;EAeA,IAAM2D,SAAS,GAAG;IAChBxC,SAAS,EAATA,SADgB;IAEhBE,aAAa,EAAbA,aAFgB;IAGhBG,cAAc,EAAdA,cAHgB;IAIhBI,iBAAiB,EAAjBA,iBAJgB;IAKhBN,iBAAiB,EAAjBA,iBALgB;IAMhBC,cAAc,EAAdA,cANgB;IAOhBY,YAAY,EAAZA,YAPgB;IAQhBD,aAAa,EAAbA,aARgB;IAShBJ,wBAAwB,EAAxBA,wBATgB;IAUhBO,mBAAmB,EAAnBA,mBAVgB;IAWhBS,cAAc,EAAdA,cAXgB;IAYhBW,cAAc,EAAdA;EAZgB,CAAlB;EAcAzG,gBAAgB,CAACyB,MAAD,EAASkF,SAAT,EAAoB,eAApB,CAAhB;EACA;AACF;AACA;;EAEE,IAAMC,wBAAwB,GAAG7G,KAAK,CAAC8D,WAAN,CAAkB,UAAAgD,SAAS,EAAI;IAC9D,IAAMC,oBAAoB,GAAG,EAA7B;;IAEA,IAAIrF,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAA3C,EAAyE;MACvE,IAAM8E,6BAA6B,GAAGxG,iCAAiC,CAACkB,MAAD,CAAvE;MACA,IAAMuF,gBAAgB,GAAGC,MAAM,CAACC,MAAP,CAAcH,6BAAd,EAA6CI,IAA7C,CAAkD,UAAAC,KAAK;QAAA,OAAIA,KAAK,KAAK,KAAd;MAAA,CAAvD,CAAzB;;MAEA,IAAIJ,gBAAJ,EAAsB;QACpBF,oBAAoB,CAAC5E,qBAArB,GAA6C6E,6BAA7C;MACD;IACF;;IAEDD,oBAAoB,CAACO,aAArB,GAAqCnH,wBAAwB,CAACuB,MAAD,CAA7D;IACA,IAAMW,OAAO,GAAGjC,6BAA6B,CAACsB,MAAD,CAA7C;IACA,IAAM6F,UAAU,GAAG,EAAnB;IACAlF,OAAO,CAACmF,OAAR,CAAgB,UAAA1B,MAAM,EAAI;MACxB,IAAIA,MAAM,CAAC2B,cAAX,EAA2B;QACzB,IAAMC,gBAAgB,GAAG,EAAzB;QACAvG,4BAA4B,CAACqG,OAA7B,CAAqC,UAAAG,YAAY,EAAI;UACnD,IAAIC,aAAa,GAAG9B,MAAM,CAAC6B,YAAD,CAA1B;;UAEA,IAAIC,aAAa,KAAKC,QAAtB,EAAgC;YAC9BD,aAAa,GAAG,CAAC,CAAjB;UACD;;UAEDF,gBAAgB,CAACC,YAAD,CAAhB,GAAiCC,aAAjC;QACD,CARD;QASAL,UAAU,CAACzB,MAAM,CAACzB,KAAR,CAAV,GAA2BqD,gBAA3B;MACD;IACF,CAdD;;IAgBA,IAAIR,MAAM,CAACY,IAAP,CAAYP,UAAZ,EAAwBQ,MAAxB,GAAiC,CAArC,EAAwC;MACtChB,oBAAoB,CAACQ,UAArB,GAAkCA,UAAlC;IACD;;IAED,OAAOxH,QAAQ,CAAC,EAAD,EAAK+G,SAAL,EAAgB;MAC7BzE,OAAO,EAAE0E;IADoB,CAAhB,CAAf;EAGD,CAtCgC,EAsC9B,CAACrF,MAAD,CAtC8B,CAAjC;EAuCA,IAAMsG,yBAAyB,GAAGhI,KAAK,CAAC8D,WAAN,CAAkB,UAAC+B,MAAD,EAASoC,OAAT,EAAqB;IACvE,IAAIC,qBAAJ;;IAEA,IAAMC,6BAA6B,GAAGzG,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAAvC,GAAsE,CAACgG,qBAAqB,GAAGD,OAAO,CAACG,cAAR,CAAuB/F,OAAhD,KAA4D,IAA5D,GAAmE,KAAK,CAAxE,GAA4E6F,qBAAqB,CAAC/F,qBAAxK,GAAgM+C,SAAtO;IACA,IAAM9C,YAAY,GAAG6F,OAAO,CAACG,cAAR,CAAuB/F,OAA5C;;IAEA,IAAI8F,6BAA6B,IAAI,IAAjC,IAAyC/F,YAAY,IAAI,IAA7D,EAAmE;MACjE,OAAOyD,MAAP;IACD;;IAED,IAAMnD,YAAY,GAAGzB,kBAAkB,CAAC;MACtCS,MAAM,EAANA,MADsC;MAEtCe,WAAW,EAAXA,WAFsC;MAGtCE,eAAe,EAAE,EAHqB;MAItCP,YAAY,EAAZA,YAJsC;MAKtCQ,2CAA2C,EAAE,CAAClB,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAL/C;MAMtCW,4BAA4B,EAAEsF,6BANQ;MAOtCrF,uBAAuB,EAAE;IAPa,CAAD,CAAvC;IASApB,MAAM,CAACY,OAAP,CAAe0B,QAAf,CAAwB9C,iBAAiB,CAACwB,YAAD,CAAzC;;IAEA,IAAIN,YAAY,IAAI,IAApB,EAA0B;MACxBV,MAAM,CAACY,OAAP,CAAe4B,YAAf,CAA4B,eAA5B,EAA6CxB,YAAY,CAACyB,GAA1D;IACD;;IAED,OAAO0B,MAAP;EACD,CA1BiC,EA0B/B,CAACnE,MAAD,EAASe,WAAT,CA1B+B,CAAlC;EA2BA,IAAM4F,4BAA4B,GAAGrI,KAAK,CAAC8D,WAAN,CAAkB,UAACwE,YAAD,EAAejB,KAAf,EAAyB;IAC9E,IAAIA,KAAK,KAAKjG,yBAAyB,CAACiB,OAAxC,EAAiD;MAC/C,IAAIkG,qBAAJ;;MAEA,IAAMC,YAAY,GAAG/G,KAAK,CAACgH,UAAN,CAAiBD,YAAtC;MACA,OAAO,aAAalH,IAAI,CAACkH,YAAD,EAAezI,QAAQ,CAAC,EAAD,EAAK,CAACwI,qBAAqB,GAAG9G,KAAK,CAACiH,eAA/B,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEH,qBAAqB,CAACI,YAA9F,CAAvB,CAAxB;IACD;;IAED,OAAOL,YAAP;EACD,CAToC,EASlC,CAAC7G,KAAK,CAACgH,UAAN,CAAiBD,YAAlB,EAAgC,CAACxF,sBAAsB,GAAGvB,KAAK,CAACiH,eAAhC,KAAoD,IAApD,GAA2D,KAAK,CAAhE,GAAoE1F,sBAAsB,CAAC2F,YAA3H,CATkC,CAArC;EAUA9H,4BAA4B,CAACa,MAAD,EAAS,aAAT,EAAwBmF,wBAAxB,CAA5B;EACAhG,4BAA4B,CAACa,MAAD,EAAS,cAAT,EAAyBsG,yBAAzB,CAA5B;EACAnH,4BAA4B,CAACa,MAAD,EAAS,iBAAT,EAA4B2G,4BAA5B,CAA5B;EACA;AACF;AACA;;EAEE,IAAMO,cAAc,GAAG5I,KAAK,CAACoD,MAAN,CAAa,IAAb,CAAvB;;EAEA,IAAMyF,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,iBAAiB,EAAI;IAChD,IAAIF,cAAc,CAACtG,OAAf,KAA2BwG,iBAAiB,CAACnC,KAAjD,EAAwD;MACtDiC,cAAc,CAACtG,OAAf,GAAyBwG,iBAAiB,CAACnC,KAA3C;MACA9C,mBAAmB,CAAC9C,mBAAmB,CAACR,mBAAmB,CAACmB,MAAM,CAACY,OAAP,CAAed,KAAhB,CAApB,EAA4CsH,iBAAiB,CAACnC,KAA9D,CAApB,CAAnB;IACD;EACF,CALD;;EAOAhG,sBAAsB,CAACe,MAAD,EAAS,yBAAT,EAAoCmH,oBAApC,CAAtB;EACAjI,uBAAuB,CAACc,MAAD,EAAS,wBAAT,EAAmCD,KAAK,CAACsH,wBAAzC,CAAvB;EACA;AACF;AACA;;EAEE,IAAMC,cAAc,GAAGhJ,KAAK,CAAC8D,WAAN,CAAkB,YAAM;IAC7Cb,MAAM,CAACgG,IAAP;IACA,IAAMvG,YAAY,GAAGzB,kBAAkB,CAAC;MACtCS,MAAM,EAANA,MADsC;MAEtCe,WAAW,EAAXA,WAFsC;MAGtCE,eAAe,EAAE,EAHqB;MAItCP,YAAY,EAAE8C,SAJwB;MAKtCtC,2CAA2C,EAAE,CAAClB,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAL/C;MAMtCY,uBAAuB,EAAE;IANa,CAAD,CAAvC;IAQAe,mBAAmB,CAACnB,YAAD,CAAnB;EACD,CAXsB,EAWpB,CAAChB,MAAD,EAASuB,MAAT,EAAiBY,mBAAjB,EAAsCpB,WAAtC,CAXoB,CAAvB;EAYA3B,0BAA0B,CAACY,MAAD,EAAS,gBAAT,EAA2BsH,cAA3B,CAA1B;EACA;AACF;AACA;EACE;EACA;;EAEA,IAAME,aAAa,GAAGlJ,KAAK,CAACoD,MAAN,CAAa,IAAb,CAAtB;EACApD,KAAK,CAACmJ,SAAN,CAAgB,YAAM;IACpB,IAAID,aAAa,CAAC5G,OAAlB,EAA2B;MACzB4G,aAAa,CAAC5G,OAAd,GAAwB,KAAxB;MACA;IACD;;IAEDW,MAAM,CAACgG,IAAP,gDAAoDxH,KAAK,CAACY,OAAN,CAAc0F,MAAlE;;IAEA,IAAI5E,mBAAmB,CAACb,OAApB,KAAgCb,KAAK,CAACY,OAAtC,IAAiDgB,uBAAuB,CAACf,OAAxB,KAAoCG,WAAzF,EAAsG;MACpG;IACD;;IAED,IAAMC,YAAY,GAAGzB,kBAAkB,CAAC;MACtCS,MAAM,EAANA,MADsC;MAEtCe,WAAW,EAAXA,WAFsC;MAGtCL,YAAY,EAAE8C,SAHwB;MAItC;MACAtC,2CAA2C,EAAE,CAAClB,MAAM,CAACY,OAAP,CAAeC,eAAf,CAA+BF,OAA/B,CAAuCH,4BAL/C;MAMtCS,eAAe,EAAElB,KAAK,CAACY,OANe;MAOtCS,uBAAuB,EAAE;IAPa,CAAD,CAAvC;IASAK,mBAAmB,CAACb,OAApB,GAA8Bb,KAAK,CAACY,OAApC;IACAgB,uBAAuB,CAACf,OAAxB,GAAkCG,WAAlC;IACAoB,mBAAmB,CAACnB,YAAD,CAAnB;EACD,CAxBD,EAwBG,CAACO,MAAD,EAASvB,MAAT,EAAiBmC,mBAAjB,EAAsCpC,KAAK,CAACY,OAA5C,EAAqDI,WAArD,CAxBH;EAyBAzC,KAAK,CAACmJ,SAAN,CAAgB,YAAM;IACpB,IAAI1H,KAAK,CAACU,qBAAN,KAAgC+C,SAApC,EAA+C;MAC7CxD,MAAM,CAACY,OAAP,CAAeyC,wBAAf,CAAwCtD,KAAK,CAACU,qBAA9C;IACD;EACF,CAJD,EAIG,CAACT,MAAD,EAASuB,MAAT,EAAiBxB,KAAK,CAACU,qBAAvB,CAJH;AAKD"},"metadata":{},"sourceType":"module"}