{"ast":null,"code":"import _defineProperty from \"C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport var rowsStateInitializer = function rowsStateInitializer(state, props, apiRef) {\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef: apiRef,\n      previousTree: null,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading\n    })\n  });\n};\nexport var useGridRows = function useGridRows(apiRef, props) {\n  if (process.env.NODE_ENV !== 'production') {\n    // Freeze rows for immutability\n    Object.freeze(props.rows);\n  }\n\n  var logger = useGridLogger(apiRef, 'useGridRows');\n  var currentPage = useGridVisibleRows(apiRef, props);\n  var lastUpdateMs = React.useRef(Date.now());\n  var timeout = React.useRef(null);\n  var getRow = React.useCallback(function (id) {\n    var _ref;\n\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  var lookup = React.useMemo(function () {\n    return currentPage.rows.reduce(function (acc, _ref2, index) {\n      var id = _ref2.id;\n      acc[id] = index;\n      return acc;\n    }, {});\n  }, [currentPage.rows]);\n  var throttledRowsChange = React.useCallback(function (newCache, throttle) {\n    var run = function run() {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(function (state) {\n        return _extends({}, state, {\n          rows: getRowsStateFromCache({\n            apiRef: apiRef,\n            previousTree: gridRowTreeSelector(apiRef),\n            rowCountProp: props.rowCount,\n            loadingProp: props.loading\n          })\n        });\n      });\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.unstable_caches.rows = newCache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    var throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  var setRows = React.useCallback(function (rows) {\n    logger.debug(\"Updating all rows, new length \".concat(rows.length));\n    throttledRowsChange(createRowsInternalCache({\n      rows: rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), true);\n  }, [logger, props.getRowId, props.loading, throttledRowsChange]);\n  var updateRows = React.useCallback(function (updates) {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\n\n\n    var uniqUpdates = new Map();\n    updates.forEach(function (update) {\n      var id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n\n      if (uniqUpdates.has(id)) {\n        uniqUpdates.set(id, _extends({}, uniqUpdates.get(id), update));\n      } else {\n        uniqUpdates.set(id, update);\n      }\n    });\n    var deletedRowIds = [];\n    var prevCache = apiRef.current.unstable_caches.rows;\n    var newCache = {\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\n      ids: _toConsumableArray(prevCache.ids)\n    };\n    uniqUpdates.forEach(function (partialRow, id) {\n      // eslint-disable-next-line no-underscore-dangle\n      if (partialRow._action === 'delete') {\n        delete newCache.idRowsLookup[id];\n        delete newCache.idToIdLookup[id];\n        deletedRowIds.push(id);\n        return;\n      }\n\n      var oldRow = apiRef.current.getRow(id);\n\n      if (!oldRow) {\n        newCache.idRowsLookup[id] = partialRow;\n        newCache.idToIdLookup[id] = id;\n        newCache.ids.push(id);\n        return;\n      }\n\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\n    });\n\n    if (deletedRowIds.length > 0) {\n      newCache.ids = newCache.ids.filter(function (id) {\n        return !deletedRowIds.includes(id);\n      });\n    }\n\n    throttledRowsChange(newCache, true);\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  var getRowModels = React.useCallback(function () {\n    var allRows = gridRowIdsSelector(apiRef);\n    var idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(allRows.map(function (id) {\n      return [id, idRowsLookup[id]];\n    }));\n  }, [apiRef]);\n  var getRowsCount = React.useCallback(function () {\n    return gridRowCountSelector(apiRef);\n  }, [apiRef]);\n  var getAllRowIds = React.useCallback(function () {\n    return gridRowIdsSelector(apiRef);\n  }, [apiRef]);\n  var getRowIndexRelativeToVisibleRows = React.useCallback(function (id) {\n    return lookup[id];\n  }, [lookup]);\n  var setRowChildrenExpansion = React.useCallback(function (id, isExpanded) {\n    var currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(\"MUI: No row with id #\".concat(id, \" found\"));\n    }\n\n    var newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, _defineProperty({}, id, newNode))\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  var getRowNode = React.useCallback(function (id) {\n    var _gridRowTreeSelector$;\n\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  var getRowGroupChildren = React.useCallback(function (_ref3) {\n    var _ref3$skipAutoGenerat = _ref3.skipAutoGeneratedRows,\n        skipAutoGeneratedRows = _ref3$skipAutoGenerat === void 0 ? true : _ref3$skipAutoGenerat,\n        groupId = _ref3.groupId,\n        applySorting = _ref3.applySorting,\n        applyFiltering = _ref3.applyFiltering;\n    var tree = gridRowTreeSelector(apiRef);\n    var children;\n\n    if (applySorting) {\n      var groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      var sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      var startIndex = sortedRowIds.findIndex(function (id) {\n        return id === groupId;\n      }) + 1;\n\n      for (var index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        var id = sortedRowIds[index];\n        var node = tree[id];\n\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      var filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(function (childId) {\n        return filteredRowsLookup[childId] !== false;\n      });\n    }\n\n    return children;\n  }, [apiRef]);\n  var setRowIndex = React.useCallback(function (rowId, targetIndex) {\n    var allRows = gridRowIdsSelector(apiRef);\n    var oldIndex = allRows.findIndex(function (row) {\n      return row === rowId;\n    });\n\n    if (oldIndex === -1 || oldIndex === targetIndex) {\n      return;\n    }\n\n    logger.debug(\"Moving row \".concat(rowId, \" to index \").concat(targetIndex));\n\n    var updatedRows = _toConsumableArray(allRows);\n\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          ids: updatedRows\n        })\n      });\n    });\n    apiRef.current.applySorting();\n  }, [apiRef, logger]);\n  var rowApi = {\n    getRow: getRow,\n    getRowModels: getRowModels,\n    getRowsCount: getRowsCount,\n    getAllRowIds: getAllRowIds,\n    setRows: setRows,\n    setRowIndex: setRowIndex,\n    updateRows: updateRows,\n    setRowChildrenExpansion: setRowChildrenExpansion,\n    getRowNode: getRowNode,\n    getRowIndexRelativeToVisibleRows: getRowIndexRelativeToVisibleRows,\n    getRowGroupChildren: getRowGroupChildren\n  };\n  /**\n   * EVENTS\n   */\n\n  var groupRows = React.useCallback(function () {\n    logger.info(\"Row grouping pre-processing have changed, regenerating the row tree\");\n    var cache;\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = apiRef.current.unstable_caches.rows;\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading\n      });\n    }\n\n    throttledRowsChange(cache, false);\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, throttledRowsChange]);\n  var handleStrategyProcessorChange = React.useCallback(function (methodName) {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  var handleStrategyActivityChange = React.useCallback(function () {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\n   * APPLIERS\n   */\n\n  var applyHydrateRowsProcessor = React.useCallback(function () {\n    apiRef.current.setState(function (state) {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\n      });\n    });\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(function () {\n    return function () {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  var isFirstRender = React.useRef(true);\n  React.useEffect(function () {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    } // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows && apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading) {\n      return;\n    }\n\n    logger.debug(\"Updating all rows, new length \".concat(props.rows.length));\n    throttledRowsChange(createRowsInternalCache({\n      rows: props.rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), false);\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};","map":{"version":3,"names":["_extends","React","useGridApiMethod","useGridLogger","gridRowCountSelector","gridRowsLookupSelector","gridRowTreeSelector","gridRowIdsSelector","gridRowGroupingNameSelector","GridSignature","useGridApiEventHandler","useGridVisibleRows","gridSortedRowIdsSelector","gridFilteredRowsLookupSelector","getTreeNodeDescendants","createRowsInternalCache","getRowsStateFromCache","getRowIdFromRowModel","useGridRegisterPipeApplier","rowsStateInitializer","state","props","apiRef","current","unstable_caches","rows","getRowId","loading","previousTree","rowCountProp","rowCount","loadingProp","useGridRows","process","env","NODE_ENV","Object","freeze","logger","currentPage","lastUpdateMs","useRef","Date","now","timeout","getRow","useCallback","id","_ref","lookup","useMemo","reduce","acc","index","throttledRowsChange","newCache","throttle","run","setState","publishEvent","forceUpdate","clearTimeout","throttleRemainingTimeMs","throttleRowsMs","setTimeout","setRows","debug","length","updateRows","updates","signature","DataGrid","Error","join","uniqUpdates","Map","forEach","update","has","set","get","deletedRowIds","prevCache","rowsBeforePartialUpdates","loadingPropBeforePartialUpdates","idRowsLookup","idToIdLookup","ids","partialRow","_action","push","oldRow","filter","includes","getRowModels","allRows","map","getRowsCount","getAllRowIds","getRowIndexRelativeToVisibleRows","setRowChildrenExpansion","isExpanded","currentNode","getRowNode","newNode","childrenExpanded","tree","_gridRowTreeSelector$","getRowGroupChildren","skipAutoGeneratedRows","groupId","applySorting","applyFiltering","children","groupNode","sortedRowIds","startIndex","findIndex","depth","node","isAutoGenerated","filteredRowsLookup","childId","setRowIndex","rowId","targetIndex","oldIndex","row","updatedRows","splice","rowApi","groupRows","info","cache","handleStrategyProcessorChange","methodName","handleStrategyActivityChange","unstable_getActiveStrategy","applyHydrateRowsProcessor","unstable_applyPipeProcessors","groupingResponseBeforeRowHydration","useEffect","isFirstRender"],"sources":["C:/Users/AEPL/Desktop/Git Clones/Dummy_project/Backend/dummy1/node_modules/@mui/x-data-grid/hooks/features/rows/useGridRows.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { useGridLogger } from '../../utils/useGridLogger';\nimport { gridRowCountSelector, gridRowsLookupSelector, gridRowTreeSelector, gridRowIdsSelector, gridRowGroupingNameSelector } from './gridRowsSelector';\nimport { GridSignature, useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { gridSortedRowIdsSelector } from '../sorting/gridSortingSelector';\nimport { gridFilteredRowsLookupSelector } from '../filter/gridFilterSelector';\nimport { getTreeNodeDescendants, createRowsInternalCache, getRowsStateFromCache, getRowIdFromRowModel } from './gridRowsUtils';\nimport { useGridRegisterPipeApplier } from '../../core/pipeProcessing';\nexport const rowsStateInitializer = (state, props, apiRef) => {\n  apiRef.current.unstable_caches.rows = createRowsInternalCache({\n    rows: props.rows,\n    getRowId: props.getRowId,\n    loading: props.loading\n  });\n  return _extends({}, state, {\n    rows: getRowsStateFromCache({\n      apiRef,\n      previousTree: null,\n      rowCountProp: props.rowCount,\n      loadingProp: props.loading\n    })\n  });\n};\nexport const useGridRows = (apiRef, props) => {\n  if (process.env.NODE_ENV !== 'production') {\n    // Freeze rows for immutability\n    Object.freeze(props.rows);\n  }\n\n  const logger = useGridLogger(apiRef, 'useGridRows');\n  const currentPage = useGridVisibleRows(apiRef, props);\n  const lastUpdateMs = React.useRef(Date.now());\n  const timeout = React.useRef(null);\n  const getRow = React.useCallback(id => {\n    var _ref;\n\n    return (_ref = gridRowsLookupSelector(apiRef)[id]) != null ? _ref : null;\n  }, [apiRef]);\n  const lookup = React.useMemo(() => currentPage.rows.reduce((acc, {\n    id\n  }, index) => {\n    acc[id] = index;\n    return acc;\n  }, {}), [currentPage.rows]);\n  const throttledRowsChange = React.useCallback((newCache, throttle) => {\n    const run = () => {\n      timeout.current = null;\n      lastUpdateMs.current = Date.now();\n      apiRef.current.setState(state => _extends({}, state, {\n        rows: getRowsStateFromCache({\n          apiRef,\n          previousTree: gridRowTreeSelector(apiRef),\n          rowCountProp: props.rowCount,\n          loadingProp: props.loading\n        })\n      }));\n      apiRef.current.publishEvent('rowsSet');\n      apiRef.current.forceUpdate();\n    };\n\n    if (timeout.current) {\n      clearTimeout(timeout.current);\n      timeout.current = null;\n    }\n\n    apiRef.current.unstable_caches.rows = newCache;\n\n    if (!throttle) {\n      run();\n      return;\n    }\n\n    const throttleRemainingTimeMs = props.throttleRowsMs - (Date.now() - lastUpdateMs.current);\n\n    if (throttleRemainingTimeMs > 0) {\n      timeout.current = setTimeout(run, throttleRemainingTimeMs);\n      return;\n    }\n\n    run();\n  }, [props.throttleRowsMs, props.rowCount, props.loading, apiRef]);\n  /**\n   * API METHODS\n   */\n\n  const setRows = React.useCallback(rows => {\n    logger.debug(`Updating all rows, new length ${rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), true);\n  }, [logger, props.getRowId, props.loading, throttledRowsChange]);\n  const updateRows = React.useCallback(updates => {\n    if (props.signature === GridSignature.DataGrid && updates.length > 1) {\n      // TODO: Add test with direct call to `apiRef.current.updateRows` in DataGrid after enabling the `apiRef` on the free plan.\n      throw new Error([\"MUI: You can't update several rows at once in `apiRef.current.updateRows` on the DataGrid.\", 'You need to upgrade to the DataGridPro component to unlock this feature.'].join('\\n'));\n    } // we remove duplicate updates. A server can batch updates, and send several updates for the same row in one fn call.\n\n\n    const uniqUpdates = new Map();\n    updates.forEach(update => {\n      const id = getRowIdFromRowModel(update, props.getRowId, 'A row was provided without id when calling updateRows():');\n\n      if (uniqUpdates.has(id)) {\n        uniqUpdates.set(id, _extends({}, uniqUpdates.get(id), update));\n      } else {\n        uniqUpdates.set(id, update);\n      }\n    });\n    const deletedRowIds = [];\n    const prevCache = apiRef.current.unstable_caches.rows;\n    const newCache = {\n      rowsBeforePartialUpdates: prevCache.rowsBeforePartialUpdates,\n      loadingPropBeforePartialUpdates: prevCache.loadingPropBeforePartialUpdates,\n      idRowsLookup: _extends({}, prevCache.idRowsLookup),\n      idToIdLookup: _extends({}, prevCache.idToIdLookup),\n      ids: [...prevCache.ids]\n    };\n    uniqUpdates.forEach((partialRow, id) => {\n      // eslint-disable-next-line no-underscore-dangle\n      if (partialRow._action === 'delete') {\n        delete newCache.idRowsLookup[id];\n        delete newCache.idToIdLookup[id];\n        deletedRowIds.push(id);\n        return;\n      }\n\n      const oldRow = apiRef.current.getRow(id);\n\n      if (!oldRow) {\n        newCache.idRowsLookup[id] = partialRow;\n        newCache.idToIdLookup[id] = id;\n        newCache.ids.push(id);\n        return;\n      }\n\n      newCache.idRowsLookup[id] = _extends({}, apiRef.current.getRow(id), partialRow);\n    });\n\n    if (deletedRowIds.length > 0) {\n      newCache.ids = newCache.ids.filter(id => !deletedRowIds.includes(id));\n    }\n\n    throttledRowsChange(newCache, true);\n  }, [props.signature, props.getRowId, throttledRowsChange, apiRef]);\n  const getRowModels = React.useCallback(() => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const idRowsLookup = gridRowsLookupSelector(apiRef);\n    return new Map(allRows.map(id => [id, idRowsLookup[id]]));\n  }, [apiRef]);\n  const getRowsCount = React.useCallback(() => gridRowCountSelector(apiRef), [apiRef]);\n  const getAllRowIds = React.useCallback(() => gridRowIdsSelector(apiRef), [apiRef]);\n  const getRowIndexRelativeToVisibleRows = React.useCallback(id => lookup[id], [lookup]);\n  const setRowChildrenExpansion = React.useCallback((id, isExpanded) => {\n    const currentNode = apiRef.current.getRowNode(id);\n\n    if (!currentNode) {\n      throw new Error(`MUI: No row with id #${id} found`);\n    }\n\n    const newNode = _extends({}, currentNode, {\n      childrenExpanded: isExpanded\n    });\n\n    apiRef.current.setState(state => {\n      return _extends({}, state, {\n        rows: _extends({}, state.rows, {\n          tree: _extends({}, state.rows.tree, {\n            [id]: newNode\n          })\n        })\n      });\n    });\n    apiRef.current.forceUpdate();\n    apiRef.current.publishEvent('rowExpansionChange', newNode);\n  }, [apiRef]);\n  const getRowNode = React.useCallback(id => {\n    var _gridRowTreeSelector$;\n\n    return (_gridRowTreeSelector$ = gridRowTreeSelector(apiRef)[id]) != null ? _gridRowTreeSelector$ : null;\n  }, [apiRef]);\n  const getRowGroupChildren = React.useCallback(({\n    skipAutoGeneratedRows = true,\n    groupId,\n    applySorting,\n    applyFiltering\n  }) => {\n    const tree = gridRowTreeSelector(apiRef);\n    let children;\n\n    if (applySorting) {\n      const groupNode = tree[groupId];\n\n      if (!groupNode) {\n        return [];\n      }\n\n      const sortedRowIds = gridSortedRowIdsSelector(apiRef);\n      children = [];\n      const startIndex = sortedRowIds.findIndex(id => id === groupId) + 1;\n\n      for (let index = startIndex; index < sortedRowIds.length && tree[sortedRowIds[index]].depth > groupNode.depth; index += 1) {\n        const id = sortedRowIds[index];\n        const node = tree[id];\n\n        if (!skipAutoGeneratedRows || !node.isAutoGenerated) {\n          children.push(id);\n        }\n      }\n    } else {\n      children = getTreeNodeDescendants(tree, groupId, skipAutoGeneratedRows);\n    }\n\n    if (applyFiltering) {\n      const filteredRowsLookup = gridFilteredRowsLookupSelector(apiRef);\n      children = children.filter(childId => filteredRowsLookup[childId] !== false);\n    }\n\n    return children;\n  }, [apiRef]);\n  const setRowIndex = React.useCallback((rowId, targetIndex) => {\n    const allRows = gridRowIdsSelector(apiRef);\n    const oldIndex = allRows.findIndex(row => row === rowId);\n\n    if (oldIndex === -1 || oldIndex === targetIndex) {\n      return;\n    }\n\n    logger.debug(`Moving row ${rowId} to index ${targetIndex}`);\n    const updatedRows = [...allRows];\n    updatedRows.splice(targetIndex, 0, updatedRows.splice(oldIndex, 1)[0]);\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, {\n        ids: updatedRows\n      })\n    }));\n    apiRef.current.applySorting();\n  }, [apiRef, logger]);\n  const rowApi = {\n    getRow,\n    getRowModels,\n    getRowsCount,\n    getAllRowIds,\n    setRows,\n    setRowIndex,\n    updateRows,\n    setRowChildrenExpansion,\n    getRowNode,\n    getRowIndexRelativeToVisibleRows,\n    getRowGroupChildren\n  };\n  /**\n   * EVENTS\n   */\n\n  const groupRows = React.useCallback(() => {\n    logger.info(`Row grouping pre-processing have changed, regenerating the row tree`);\n    let cache;\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows) {\n      // The `props.rows` did not change since the last row grouping\n      // We can use the current rows cache which contains the partial updates done recently.\n      cache = apiRef.current.unstable_caches.rows;\n    } else {\n      // The `props.rows` has changed since the last row grouping\n      // We must use the new `props.rows` on the new grouping\n      // This occurs because this event is triggered before the `useEffect` on the rows when both the grouping pre-processing and the rows changes on the same render\n      cache = createRowsInternalCache({\n        rows: props.rows,\n        getRowId: props.getRowId,\n        loading: props.loading\n      });\n    }\n\n    throttledRowsChange(cache, false);\n  }, [logger, apiRef, props.rows, props.getRowId, props.loading, throttledRowsChange]);\n  const handleStrategyProcessorChange = React.useCallback(methodName => {\n    if (methodName === 'rowTreeCreation') {\n      groupRows();\n    }\n  }, [groupRows]);\n  const handleStrategyActivityChange = React.useCallback(() => {\n    // `rowTreeCreation` is the only processor ran when `strategyAvailabilityChange` is fired.\n    // All the other processors listen to `rowsSet` which will be published by the `groupRows` method below.\n    if (apiRef.current.unstable_getActiveStrategy('rowTree') !== gridRowGroupingNameSelector(apiRef)) {\n      groupRows();\n    }\n  }, [apiRef, groupRows]);\n  useGridApiEventHandler(apiRef, 'activeStrategyProcessorChange', handleStrategyProcessorChange);\n  useGridApiEventHandler(apiRef, 'strategyAvailabilityChange', handleStrategyActivityChange);\n  /**\n   * APPLIERS\n   */\n\n  const applyHydrateRowsProcessor = React.useCallback(() => {\n    apiRef.current.setState(state => _extends({}, state, {\n      rows: _extends({}, state.rows, apiRef.current.unstable_applyPipeProcessors('hydrateRows', state.rows.groupingResponseBeforeRowHydration))\n    }));\n    apiRef.current.publishEvent('rowsSet');\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  useGridRegisterPipeApplier(apiRef, 'hydrateRows', applyHydrateRowsProcessor);\n  useGridApiMethod(apiRef, rowApi, 'GridRowApi');\n  /**\n   * EFFECTS\n   */\n\n  React.useEffect(() => {\n    return () => {\n      if (timeout.current !== null) {\n        clearTimeout(timeout.current);\n      }\n    };\n  }, []); // The effect do not track any value defined synchronously during the 1st render by hooks called after `useGridRows`\n  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one\n\n  const isFirstRender = React.useRef(true);\n  React.useEffect(() => {\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    } // The new rows have already been applied (most likely in the `'rowGroupsPreProcessingChange'` listener)\n\n\n    if (apiRef.current.unstable_caches.rows.rowsBeforePartialUpdates === props.rows && apiRef.current.unstable_caches.rows.loadingPropBeforePartialUpdates === props.loading) {\n      return;\n    }\n\n    logger.debug(`Updating all rows, new length ${props.rows.length}`);\n    throttledRowsChange(createRowsInternalCache({\n      rows: props.rows,\n      getRowId: props.getRowId,\n      loading: props.loading\n    }), false);\n  }, [props.rows, props.rowCount, props.getRowId, props.loading, logger, throttledRowsChange, apiRef]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}